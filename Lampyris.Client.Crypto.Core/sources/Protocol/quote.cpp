// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: quote.proto
// Protobuf C++ Version: 6.30.2

#include "quote.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace lampyris {
namespace crypto {
namespace protocol {
namespace quote {

inline constexpr TradeDataBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{::int64_t{0}},
        price_{0},
        volume_{0},
        isbuy_{false},
        count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TradeDataBean::TradeDataBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TradeDataBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TradeDataBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeDataBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeDataBeanDefaultTypeInternal() {}
  union {
    TradeDataBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeDataBeanDefaultTypeInternal _TradeDataBean_default_instance_;

inline constexpr SymbolTradeRuleBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        maxprice_{0},
        minprice_{0},
        priceticksize_{0},
        maxquantity_{0},
        minquantity_{0},
        quantityticksize_{0},
        minnotional_{0},
        onboardtimestamp_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR SymbolTradeRuleBean::SymbolTradeRuleBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SymbolTradeRuleBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SymbolTradeRuleBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolTradeRuleBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolTradeRuleBeanDefaultTypeInternal() {}
  union {
    SymbolTradeRuleBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolTradeRuleBeanDefaultTypeInternal _SymbolTradeRuleBean_default_instance_;

inline constexpr SymbolTickerDataBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        labels_{},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        price_{0},
        percentage_{0},
        currency_{0},
        markprice_{0},
        indexprice_{0},
        fundingrate_{0},
        nextfundingtime_{::int64_t{0}},
        risespeed_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SymbolTickerDataBean::SymbolTickerDataBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SymbolTickerDataBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SymbolTickerDataBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolTickerDataBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolTickerDataBeanDefaultTypeInternal() {}
  union {
    SymbolTickerDataBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolTickerDataBeanDefaultTypeInternal _SymbolTickerDataBean_default_instance_;

inline constexpr SelfSelectedSymbolInfoBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{::int64_t{0}},
        initialprice_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SelfSelectedSymbolInfoBean::SelfSelectedSymbolInfoBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SelfSelectedSymbolInfoBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SelfSelectedSymbolInfoBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfSelectedSymbolInfoBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfSelectedSymbolInfoBeanDefaultTypeInternal() {}
  union {
    SelfSelectedSymbolInfoBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfSelectedSymbolInfoBeanDefaultTypeInternal _SelfSelectedSymbolInfoBean_default_instance_;

inline constexpr ReqTradeRule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbollist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqTradeRule::ReqTradeRule(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ReqTradeRule_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqTradeRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqTradeRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqTradeRuleDefaultTypeInternal() {}
  union {
    ReqTradeRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqTradeRuleDefaultTypeInternal _ReqTradeRule_default_instance_;

inline constexpr ReqSubscribeTradeData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbols_{},
        iscancel_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ReqSubscribeTradeData::ReqSubscribeTradeData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ReqSubscribeTradeData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqSubscribeTradeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSubscribeTradeDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSubscribeTradeDataDefaultTypeInternal() {}
  union {
    ReqSubscribeTradeData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSubscribeTradeDataDefaultTypeInternal _ReqSubscribeTradeData_default_instance_;

inline constexpr ReqSubscribeTickerData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        iscancel_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ReqSubscribeTickerData::ReqSubscribeTickerData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ReqSubscribeTickerData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqSubscribeTickerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSubscribeTickerDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSubscribeTickerDataDefaultTypeInternal() {}
  union {
    ReqSubscribeTickerData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSubscribeTickerDataDefaultTypeInternal _ReqSubscribeTickerData_default_instance_;

inline constexpr ReqSubscribeCandlestickUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbols_{},
        barsize_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        iscancel_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ReqSubscribeCandlestickUpdate::ReqSubscribeCandlestickUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ReqSubscribeCandlestickUpdate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqSubscribeCandlestickUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSubscribeCandlestickUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSubscribeCandlestickUpdateDefaultTypeInternal() {}
  union {
    ReqSubscribeCandlestickUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSubscribeCandlestickUpdateDefaultTypeInternal _ReqSubscribeCandlestickUpdate_default_instance_;

inline constexpr ReqCandlestickQuery::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        barsize_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        starttime_{::int64_t{0}},
        endtime_{::int64_t{0}},
        count_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR ReqCandlestickQuery::ReqCandlestickQuery(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ReqCandlestickQuery_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqCandlestickQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqCandlestickQueryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqCandlestickQueryDefaultTypeInternal() {}
  union {
    ReqCandlestickQuery _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqCandlestickQueryDefaultTypeInternal _ReqCandlestickQuery_default_instance_;

inline constexpr MarketPreviewIntervalDataBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        lowerboundperc_{0},
        upperboundperc_{0},
        count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketPreviewIntervalDataBean::MarketPreviewIntervalDataBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MarketPreviewIntervalDataBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketPreviewIntervalDataBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketPreviewIntervalDataBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketPreviewIntervalDataBeanDefaultTypeInternal() {}
  union {
    MarketPreviewIntervalDataBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketPreviewIntervalDataBeanDefaultTypeInternal _MarketPreviewIntervalDataBean_default_instance_;

inline constexpr MarketMonitorNoticeBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{::int64_t{0}},
        noticetype_{0},
        noticelevel_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketMonitorNoticeBean::MarketMonitorNoticeBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MarketMonitorNoticeBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketMonitorNoticeBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketMonitorNoticeBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketMonitorNoticeBeanDefaultTypeInternal() {}
  union {
    MarketMonitorNoticeBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketMonitorNoticeBeanDefaultTypeInternal _MarketMonitorNoticeBean_default_instance_;

inline constexpr CandlestickBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        time_{::int64_t{0}},
        open_{0},
        high_{0},
        low_{0},
        close_{0},
        volume_{0},
        currency_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CandlestickBean::CandlestickBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CandlestickBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CandlestickBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandlestickBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandlestickBeanDefaultTypeInternal() {}
  union {
    CandlestickBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandlestickBeanDefaultTypeInternal _CandlestickBean_default_instance_;

inline constexpr SymbolTradeDataBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        beanlist_{},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR SymbolTradeDataBean::SymbolTradeDataBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SymbolTradeDataBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SymbolTradeDataBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolTradeDataBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolTradeDataBeanDefaultTypeInternal() {}
  union {
    SymbolTradeDataBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolTradeDataBeanDefaultTypeInternal _SymbolTradeDataBean_default_instance_;

inline constexpr SelfSelectedSymbolGroupBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbollist_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        candelete_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SelfSelectedSymbolGroupBean::SelfSelectedSymbolGroupBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SelfSelectedSymbolGroupBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SelfSelectedSymbolGroupBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelfSelectedSymbolGroupBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelfSelectedSymbolGroupBeanDefaultTypeInternal() {}
  union {
    SelfSelectedSymbolGroupBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelfSelectedSymbolGroupBeanDefaultTypeInternal _SelfSelectedSymbolGroupBean_default_instance_;

inline constexpr ResTradeRule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : beanlist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResTradeRule::ResTradeRule(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ResTradeRule_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResTradeRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResTradeRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResTradeRuleDefaultTypeInternal() {}
  union {
    ResTradeRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResTradeRuleDefaultTypeInternal _ResTradeRule_default_instance_;

inline constexpr ResSubscribeTickerData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : beanlist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResSubscribeTickerData::ResSubscribeTickerData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ResSubscribeTickerData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResSubscribeTickerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResSubscribeTickerDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResSubscribeTickerDataDefaultTypeInternal() {}
  union {
    ResSubscribeTickerData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResSubscribeTickerDataDefaultTypeInternal _ResSubscribeTickerData_default_instance_;

inline constexpr ResMarketPreviewData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        intervaldatalist_{},
        risecount_{0},
        flatcount_{0},
        topgaineravgperc_{0},
        bottomgaineravgperc_{0},
        avgperc_{0},
        mainstreamavgperc_{0},
        fallcount_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResMarketPreviewData::ResMarketPreviewData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ResMarketPreviewData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResMarketPreviewDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResMarketPreviewDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResMarketPreviewDataDefaultTypeInternal() {}
  union {
    ResMarketPreviewData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResMarketPreviewDataDefaultTypeInternal _ResMarketPreviewData_default_instance_;

inline constexpr ResCandlestickQuery::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        beanlist_{},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        barsize_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ResCandlestickQuery::ResCandlestickQuery(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ResCandlestickQuery_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResCandlestickQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResCandlestickQueryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResCandlestickQueryDefaultTypeInternal() {}
  union {
    ResCandlestickQuery _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResCandlestickQueryDefaultTypeInternal _ResCandlestickQuery_default_instance_;

inline constexpr MarketMonitorNoticeListBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : beanlist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketMonitorNoticeListBean::MarketMonitorNoticeListBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MarketMonitorNoticeListBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketMonitorNoticeListBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketMonitorNoticeListBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketMonitorNoticeListBeanDefaultTypeInternal() {}
  union {
    MarketMonitorNoticeListBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketMonitorNoticeListBeanDefaultTypeInternal _MarketMonitorNoticeListBean_default_instance_;

inline constexpr CandlestickUpdateBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        barsize_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bean_{nullptr},
        isend_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CandlestickUpdateBean::CandlestickUpdateBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CandlestickUpdateBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CandlestickUpdateBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandlestickUpdateBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandlestickUpdateBeanDefaultTypeInternal() {}
  union {
    CandlestickUpdateBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandlestickUpdateBeanDefaultTypeInternal _CandlestickUpdateBean_default_instance_;

inline constexpr ResSelfSelectedSymbol::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : grouplist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResSelfSelectedSymbol::ResSelfSelectedSymbol(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ResSelfSelectedSymbol_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResSelfSelectedSymbolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResSelfSelectedSymbolDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResSelfSelectedSymbolDefaultTypeInternal() {}
  union {
    ResSelfSelectedSymbol _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResSelfSelectedSymbolDefaultTypeInternal _ResSelfSelectedSymbol_default_instance_;

inline constexpr ReqSelfSelectedSymbol::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : grouplist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqSelfSelectedSymbol::ReqSelfSelectedSymbol(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ReqSelfSelectedSymbol_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqSelfSelectedSymbolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSelfSelectedSymbolDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSelfSelectedSymbolDefaultTypeInternal() {}
  union {
    ReqSelfSelectedSymbol _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSelfSelectedSymbolDefaultTypeInternal _ReqSelfSelectedSymbol_default_instance_;
}  // namespace quote
}  // namespace protocol
}  // namespace crypto
}  // namespace lampyris
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_quote_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_quote_2eproto = nullptr;
const ::uint32_t
    TableStruct_quote_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.percentage_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.markprice_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.indexprice_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.fundingrate_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.nextfundingtime_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.risespeed_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTickerDataBean, _impl_.labels_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeTickerData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeTickerData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeTickerData, _impl_.iscancel_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResSubscribeTickerData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResSubscribeTickerData, _impl_.beanlist_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeTradeData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeTradeData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeTradeData, _impl_.symbols_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeTradeData, _impl_.iscancel_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeDataBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeDataBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeDataBean, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeDataBean, _impl_.beanlist_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::TradeDataBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::TradeDataBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::TradeDataBean, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::TradeDataBean, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::TradeDataBean, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::TradeDataBean, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::TradeDataBean, _impl_.isbuy_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::TradeDataBean, _impl_.count_),
        0,
        1,
        2,
        3,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeCandlestickUpdate, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeCandlestickUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeCandlestickUpdate, _impl_.symbols_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeCandlestickUpdate, _impl_.barsize_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSubscribeCandlestickUpdate, _impl_.iscancel_),
        ~0u,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqCandlestickQuery, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqCandlestickQuery, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqCandlestickQuery, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqCandlestickQuery, _impl_.barsize_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqCandlestickQuery, _impl_.starttime_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqCandlestickQuery, _impl_.endtime_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqCandlestickQuery, _impl_.count_),
        0,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResCandlestickQuery, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResCandlestickQuery, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResCandlestickQuery, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResCandlestickQuery, _impl_.barsize_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResCandlestickQuery, _impl_.beanlist_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickUpdateBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickUpdateBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickUpdateBean, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickUpdateBean, _impl_.barsize_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickUpdateBean, _impl_.bean_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickUpdateBean, _impl_.isend_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickBean, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickBean, _impl_.open_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickBean, _impl_.high_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickBean, _impl_.low_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickBean, _impl_.close_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickBean, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::CandlestickBean, _impl_.currency_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqTradeRule, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqTradeRule, _impl_.symbollist_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResTradeRule, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResTradeRule, _impl_.beanlist_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_.maxprice_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_.minprice_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_.priceticksize_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_.maxquantity_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_.minquantity_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_.quantityticksize_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_.minnotional_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean, _impl_.onboardtimestamp_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketMonitorNoticeListBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketMonitorNoticeListBean, _impl_.beanlist_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean, _impl_.noticetype_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean, _impl_.noticelevel_),
        0,
        2,
        3,
        1,
        4,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean, _impl_.initialprice_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean, _impl_.candelete_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean, _impl_.symbollist_),
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSelfSelectedSymbol, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ReqSelfSelectedSymbol, _impl_.grouplist_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResSelfSelectedSymbol, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResSelfSelectedSymbol, _impl_.grouplist_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketPreviewIntervalDataBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketPreviewIntervalDataBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketPreviewIntervalDataBean, _impl_.lowerboundperc_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketPreviewIntervalDataBean, _impl_.upperboundperc_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::MarketPreviewIntervalDataBean, _impl_.count_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _impl_.risecount_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _impl_.flatcount_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _impl_.fallcount_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _impl_.intervaldatalist_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _impl_.topgaineravgperc_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _impl_.bottomgaineravgperc_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _impl_.avgperc_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::quote::ResMarketPreviewData, _impl_.mainstreamavgperc_),
        0,
        1,
        6,
        ~0u,
        2,
        3,
        4,
        5,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 18, -1, sizeof(::lampyris::crypto::protocol::quote::SymbolTickerDataBean)},
        {28, 37, -1, sizeof(::lampyris::crypto::protocol::quote::ReqSubscribeTickerData)},
        {38, -1, -1, sizeof(::lampyris::crypto::protocol::quote::ResSubscribeTickerData)},
        {47, 57, -1, sizeof(::lampyris::crypto::protocol::quote::ReqSubscribeTradeData)},
        {59, 69, -1, sizeof(::lampyris::crypto::protocol::quote::SymbolTradeDataBean)},
        {71, 85, -1, sizeof(::lampyris::crypto::protocol::quote::TradeDataBean)},
        {91, 102, -1, sizeof(::lampyris::crypto::protocol::quote::ReqSubscribeCandlestickUpdate)},
        {105, 118, -1, sizeof(::lampyris::crypto::protocol::quote::ReqCandlestickQuery)},
        {123, 134, -1, sizeof(::lampyris::crypto::protocol::quote::ResCandlestickQuery)},
        {137, 149, -1, sizeof(::lampyris::crypto::protocol::quote::CandlestickUpdateBean)},
        {153, 168, -1, sizeof(::lampyris::crypto::protocol::quote::CandlestickBean)},
        {175, -1, -1, sizeof(::lampyris::crypto::protocol::quote::ReqTradeRule)},
        {184, -1, -1, sizeof(::lampyris::crypto::protocol::quote::ResTradeRule)},
        {193, 210, -1, sizeof(::lampyris::crypto::protocol::quote::SymbolTradeRuleBean)},
        {219, -1, -1, sizeof(::lampyris::crypto::protocol::quote::MarketMonitorNoticeListBean)},
        {228, 241, -1, sizeof(::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean)},
        {246, 257, -1, sizeof(::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean)},
        {260, 271, -1, sizeof(::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean)},
        {274, -1, -1, sizeof(::lampyris::crypto::protocol::quote::ReqSelfSelectedSymbol)},
        {283, -1, -1, sizeof(::lampyris::crypto::protocol::quote::ResSelfSelectedSymbol)},
        {292, 303, -1, sizeof(::lampyris::crypto::protocol::quote::MarketPreviewIntervalDataBean)},
        {306, 322, -1, sizeof(::lampyris::crypto::protocol::quote::ResMarketPreviewData)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::lampyris::crypto::protocol::quote::_SymbolTickerDataBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ReqSubscribeTickerData_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ResSubscribeTickerData_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ReqSubscribeTradeData_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_SymbolTradeDataBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_TradeDataBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ReqSubscribeCandlestickUpdate_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ReqCandlestickQuery_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ResCandlestickQuery_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_CandlestickUpdateBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_CandlestickBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ReqTradeRule_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ResTradeRule_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_SymbolTradeRuleBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_MarketMonitorNoticeListBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_MarketMonitorNoticeBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_SelfSelectedSymbolInfoBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_SelfSelectedSymbolGroupBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ReqSelfSelectedSymbol_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ResSelfSelectedSymbol_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_MarketPreviewIntervalDataBean_default_instance_._instance,
    &::lampyris::crypto::protocol::quote::_ResMarketPreviewData_default_instance_._instance,
};
const char descriptor_table_protodef_quote_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013quote.proto\022\036lampyris.crypto.protocol."
    "quote\"\323\001\n\024SymbolTickerDataBean\022\016\n\006symbol"
    "\030\001 \001(\t\022\r\n\005price\030\002 \001(\001\022\022\n\npercentage\030\003 \001("
    "\001\022\020\n\010currency\030\004 \001(\001\022\021\n\tmarkPrice\030\005 \001(\001\022\022"
    "\n\nindexPrice\030\006 \001(\001\022\023\n\013fundingRate\030\007 \001(\001\022"
    "\027\n\017nextFundingTime\030\010 \001(\003\022\021\n\triseSpeed\030\t "
    "\001(\001\022\016\n\006labels\030\n \003(\t\"*\n\026ReqSubscribeTicke"
    "rData\022\020\n\010isCancel\030\001 \001(\010\"`\n\026ResSubscribeT"
    "ickerData\022F\n\010beanList\030\001 \003(\01324.lampyris.c"
    "rypto.protocol.quote.SymbolTickerDataBea"
    "n\":\n\025ReqSubscribeTradeData\022\017\n\007symbols\030\001 "
    "\003(\t\022\020\n\010isCancel\030\002 \001(\010\"f\n\023SymbolTradeData"
    "Bean\022\016\n\006symbol\030\001 \001(\t\022\?\n\010beanList\030\002 \003(\0132-"
    ".lampyris.crypto.protocol.quote.TradeDat"
    "aBean\"o\n\rTradeDataBean\022\016\n\006symbol\030\001 \001(\t\022\021"
    "\n\ttimestamp\030\002 \001(\003\022\r\n\005price\030\003 \001(\001\022\016\n\006volu"
    "me\030\004 \001(\001\022\r\n\005isBuy\030\005 \001(\010\022\r\n\005count\030\006 \001(\005\"S"
    "\n\035ReqSubscribeCandlestickUpdate\022\017\n\007symbo"
    "ls\030\001 \003(\t\022\017\n\007barSize\030\002 \001(\t\022\020\n\010isCancel\030\003 "
    "\001(\010\"i\n\023ReqCandlestickQuery\022\016\n\006symbol\030\001 \001"
    "(\t\022\017\n\007barSize\030\002 \001(\t\022\021\n\tstartTime\030\003 \001(\003\022\017"
    "\n\007endTime\030\004 \001(\003\022\r\n\005count\030\005 \001(\003\"y\n\023ResCan"
    "dlestickQuery\022\016\n\006symbol\030\001 \001(\t\022\017\n\007barSize"
    "\030\002 \001(\t\022A\n\010beanList\030\003 \003(\0132/.lampyris.cryp"
    "to.protocol.quote.CandlestickBean\"\206\001\n\025Ca"
    "ndlestickUpdateBean\022\016\n\006symbol\030\001 \001(\t\022\017\n\007b"
    "arSize\030\002 \001(\t\022=\n\004bean\030\003 \001(\0132/.lampyris.cr"
    "ypto.protocol.quote.CandlestickBean\022\r\n\005i"
    "sEnd\030\004 \001(\010\"y\n\017CandlestickBean\022\014\n\004time\030\001 "
    "\001(\003\022\014\n\004open\030\002 \001(\001\022\014\n\004high\030\003 \001(\001\022\013\n\003low\030\004"
    " \001(\001\022\r\n\005close\030\005 \001(\001\022\016\n\006volume\030\006 \001(\001\022\020\n\010c"
    "urrency\030\007 \001(\001\"\"\n\014ReqTradeRule\022\022\n\nsymbolL"
    "ist\030\001 \003(\t\"U\n\014ResTradeRule\022E\n\010beanList\030\001 "
    "\003(\01323.lampyris.crypto.protocol.quote.Sym"
    "bolTradeRuleBean\"\323\001\n\023SymbolTradeRuleBean"
    "\022\016\n\006symbol\030\001 \001(\t\022\020\n\010maxPrice\030\002 \001(\001\022\020\n\010mi"
    "nPrice\030\003 \001(\001\022\025\n\rpriceTickSize\030\004 \001(\001\022\023\n\013m"
    "axQuantity\030\005 \001(\001\022\023\n\013minQuantity\030\006 \001(\001\022\030\n"
    "\020quantityTickSize\030\007 \001(\001\022\023\n\013minNotional\030\010"
    " \001(\001\022\030\n\020onBoardTimestamp\030\t \001(\003\"h\n\033Market"
    "MonitorNoticeListBean\022I\n\010beanList\030\001 \003(\0132"
    "7.lampyris.crypto.protocol.quote.MarketM"
    "onitorNoticeBean\"t\n\027MarketMonitorNoticeB"
    "ean\022\016\n\006symbol\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\003\022\022"
    "\n\nnoticeType\030\003 \001(\005\022\r\n\005value\030\004 \001(\t\022\023\n\013not"
    "iceLevel\030\005 \001(\005\"U\n\032SelfSelectedSymbolInfo"
    "Bean\022\016\n\006symbol\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\003\022"
    "\024\n\014initialPrice\030\003 \001(\001\"\216\001\n\033SelfSelectedSy"
    "mbolGroupBean\022\014\n\004name\030\001 \001(\t\022\021\n\tcanDelete"
    "\030\002 \001(\010\022N\n\nsymbolList\030\003 \003(\0132:.lampyris.cr"
    "ypto.protocol.quote.SelfSelectedSymbolIn"
    "foBean\"g\n\025ReqSelfSelectedSymbol\022N\n\tgroup"
    "List\030\001 \003(\0132;.lampyris.crypto.protocol.qu"
    "ote.SelfSelectedSymbolGroupBean\"g\n\025ResSe"
    "lfSelectedSymbol\022N\n\tgroupList\030\001 \003(\0132;.la"
    "mpyris.crypto.protocol.quote.SelfSelecte"
    "dSymbolGroupBean\"^\n\035MarketPreviewInterva"
    "lDataBean\022\026\n\016lowerBoundPerc\030\001 \001(\005\022\026\n\016upp"
    "erBoundPerc\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"\213\002\n\024Res"
    "MarketPreviewData\022\021\n\triseCount\030\001 \001(\005\022\021\n\t"
    "flatCount\030\002 \001(\005\022\021\n\tfallCount\030\003 \001(\005\022W\n\020in"
    "tervalDataList\030\004 \003(\0132=.lampyris.crypto.p"
    "rotocol.quote.MarketPreviewIntervalDataB"
    "ean\022\030\n\020topGainerAvgPerc\030\005 \001(\001\022\033\n\023bottomG"
    "ainerAvgPerc\030\006 \001(\001\022\017\n\007avgPerc\030\007 \001(\001\022\031\n\021m"
    "ainstreamAvgPerc\030\010 \001(\001b\006proto3"
};
static ::absl::once_flag descriptor_table_quote_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_quote_2eproto = {
    false,
    false,
    2630,
    descriptor_table_protodef_quote_2eproto,
    "quote.proto",
    &descriptor_table_quote_2eproto_once,
    nullptr,
    0,
    22,
    schemas,
    file_default_instances,
    TableStruct_quote_2eproto::offsets,
    file_level_enum_descriptors_quote_2eproto,
    file_level_service_descriptors_quote_2eproto,
};
namespace lampyris {
namespace crypto {
namespace protocol {
namespace quote {
// ===================================================================

class SymbolTickerDataBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SymbolTickerDataBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_._has_bits_);
};

SymbolTickerDataBean::SymbolTickerDataBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SymbolTickerDataBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
}
PROTOBUF_NDEBUG_INLINE SymbolTickerDataBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::SymbolTickerDataBean& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        labels_{visibility, arena, from.labels_},
        symbol_(arena, from.symbol_) {}

SymbolTickerDataBean::SymbolTickerDataBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SymbolTickerDataBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SymbolTickerDataBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SymbolTickerDataBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, price_),
           offsetof(Impl_, risespeed_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::risespeed_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
}
PROTOBUF_NDEBUG_INLINE SymbolTickerDataBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        labels_{visibility, arena},
        symbol_(arena) {}

inline void SymbolTickerDataBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, risespeed_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::risespeed_));
}
SymbolTickerDataBean::~SymbolTickerDataBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
  SharedDtor(*this);
}
inline void SymbolTickerDataBean::SharedDtor(MessageLite& self) {
  SymbolTickerDataBean& this_ = static_cast<SymbolTickerDataBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SymbolTickerDataBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SymbolTickerDataBean(arena);
}
constexpr auto SymbolTickerDataBean::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.labels_) +
          decltype(SymbolTickerDataBean::_impl_.labels_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SymbolTickerDataBean), alignof(SymbolTickerDataBean), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SymbolTickerDataBean::PlacementNew_,
                                 sizeof(SymbolTickerDataBean),
                                 alignof(SymbolTickerDataBean));
  }
}
constexpr auto SymbolTickerDataBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SymbolTickerDataBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SymbolTickerDataBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SymbolTickerDataBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SymbolTickerDataBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SymbolTickerDataBean>(), &SymbolTickerDataBean::ByteSizeLong,
              &SymbolTickerDataBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_._cached_size_),
          false,
      },
      &SymbolTickerDataBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SymbolTickerDataBean_class_data_ =
        SymbolTickerDataBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SymbolTickerDataBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SymbolTickerDataBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SymbolTickerDataBean_class_data_.tc_table);
  return SymbolTickerDataBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 80, 2>
SymbolTickerDataBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SymbolTickerDataBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.symbol_)}},
    // double price = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.price_)}},
    // double percentage = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.percentage_)}},
    // double currency = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.currency_)}},
    // double markPrice = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 4, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.markprice_)}},
    // double indexPrice = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 5, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.indexprice_)}},
    // double fundingRate = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 6, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.fundingrate_)}},
    // int64 nextFundingTime = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SymbolTickerDataBean, _impl_.nextfundingtime_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.nextfundingtime_)}},
    // double riseSpeed = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 8, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.risespeed_)}},
    // repeated string labels = 10;
    {::_pbi::TcParser::FastUR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.labels_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double price = 2;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.price_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double percentage = 3;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.percentage_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double currency = 4;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.currency_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double markPrice = 5;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.markprice_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double indexPrice = 6;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.indexprice_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double fundingRate = 7;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.fundingrate_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int64 nextFundingTime = 8;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.nextfundingtime_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // double riseSpeed = 9;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.risespeed_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated string labels = 10;
    {PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.labels_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\63\6\0\0\0\0\0\0\0\0\6\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.SymbolTickerDataBean"
    "symbol"
    "labels"
  }},
};
PROTOBUF_NOINLINE void SymbolTickerDataBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labels_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.symbol_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x000000feu) != 0) {
    ::memset(&_impl_.price_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nextfundingtime_) -
        reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.nextfundingtime_));
  }
  _impl_.risespeed_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SymbolTickerDataBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SymbolTickerDataBean& this_ = static_cast<const SymbolTickerDataBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SymbolTickerDataBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SymbolTickerDataBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_symbol().empty()) {
      const std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.SymbolTickerDataBean.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // double price = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          2, this_._internal_price(), target);
    }
  }

  // double percentage = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_percentage()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_percentage(), target);
    }
  }

  // double currency = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_currency()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          4, this_._internal_currency(), target);
    }
  }

  // double markPrice = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_markprice()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this_._internal_markprice(), target);
    }
  }

  // double indexPrice = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_indexprice()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          6, this_._internal_indexprice(), target);
    }
  }

  // double fundingRate = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_fundingrate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this_._internal_fundingrate(), target);
    }
  }

  // int64 nextFundingTime = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_nextfundingtime() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<8>(
              stream, this_._internal_nextfundingtime(), target);
    }
  }

  // double riseSpeed = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_risespeed()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          9, this_._internal_risespeed(), target);
    }
  }

  // repeated string labels = 10;
  for (int i = 0, n = this_._internal_labels_size(); i < n; ++i) {
    const auto& s = this_._internal_labels().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.SymbolTickerDataBean.labels");
    target = stream->WriteString(10, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SymbolTickerDataBean::ByteSizeLong(const MessageLite& base) {
  const SymbolTickerDataBean& this_ = static_cast<const SymbolTickerDataBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SymbolTickerDataBean::ByteSizeLong() const {
  const SymbolTickerDataBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string labels = 10;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_labels().size());
      for (int i = 0, n = this_._internal_labels().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_labels().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string symbol = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // double price = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
        total_size += 9;
      }
    }
    // double percentage = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_percentage()) != 0) {
        total_size += 9;
      }
    }
    // double currency = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_currency()) != 0) {
        total_size += 9;
      }
    }
    // double markPrice = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_markprice()) != 0) {
        total_size += 9;
      }
    }
    // double indexPrice = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_indexprice()) != 0) {
        total_size += 9;
      }
    }
    // double fundingRate = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_fundingrate()) != 0) {
        total_size += 9;
      }
    }
    // int64 nextFundingTime = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_nextfundingtime() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_nextfundingtime());
      }
    }
  }
   {
    // double riseSpeed = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_risespeed()) != 0) {
        total_size += 9;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SymbolTickerDataBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SymbolTickerDataBean*>(&to_msg);
  auto& from = static_cast<const SymbolTickerDataBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_labels()->MergeFrom(from._internal_labels());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_price()) != 0) {
        _this->_impl_.price_ = from._impl_.price_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_percentage()) != 0) {
        _this->_impl_.percentage_ = from._impl_.percentage_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_currency()) != 0) {
        _this->_impl_.currency_ = from._impl_.currency_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_markprice()) != 0) {
        _this->_impl_.markprice_ = from._impl_.markprice_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_indexprice()) != 0) {
        _this->_impl_.indexprice_ = from._impl_.indexprice_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_fundingrate()) != 0) {
        _this->_impl_.fundingrate_ = from._impl_.fundingrate_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_nextfundingtime() != 0) {
        _this->_impl_.nextfundingtime_ = from._impl_.nextfundingtime_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (::absl::bit_cast<::uint64_t>(from._internal_risespeed()) != 0) {
      _this->_impl_.risespeed_ = from._impl_.risespeed_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolTickerDataBean::CopyFrom(const SymbolTickerDataBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SymbolTickerDataBean::InternalSwap(SymbolTickerDataBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.risespeed_)
      + sizeof(SymbolTickerDataBean::_impl_.risespeed_)
      - PROTOBUF_FIELD_OFFSET(SymbolTickerDataBean, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata SymbolTickerDataBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqSubscribeTickerData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReqSubscribeTickerData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReqSubscribeTickerData, _impl_._has_bits_);
};

ReqSubscribeTickerData::ReqSubscribeTickerData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqSubscribeTickerData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ReqSubscribeTickerData)
}
ReqSubscribeTickerData::ReqSubscribeTickerData(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ReqSubscribeTickerData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqSubscribeTickerData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE ReqSubscribeTickerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ReqSubscribeTickerData::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.iscancel_ = {};
}
ReqSubscribeTickerData::~ReqSubscribeTickerData() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ReqSubscribeTickerData)
  SharedDtor(*this);
}
inline void ReqSubscribeTickerData::SharedDtor(MessageLite& self) {
  ReqSubscribeTickerData& this_ = static_cast<ReqSubscribeTickerData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ReqSubscribeTickerData::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ReqSubscribeTickerData(arena);
}
constexpr auto ReqSubscribeTickerData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ReqSubscribeTickerData),
                                            alignof(ReqSubscribeTickerData));
}
constexpr auto ReqSubscribeTickerData::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ReqSubscribeTickerData_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ReqSubscribeTickerData::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ReqSubscribeTickerData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ReqSubscribeTickerData::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ReqSubscribeTickerData>(), &ReqSubscribeTickerData::ByteSizeLong,
              &ReqSubscribeTickerData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ReqSubscribeTickerData, _impl_._cached_size_),
          false,
      },
      &ReqSubscribeTickerData::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ReqSubscribeTickerData_class_data_ =
        ReqSubscribeTickerData::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ReqSubscribeTickerData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ReqSubscribeTickerData_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ReqSubscribeTickerData_class_data_.tc_table);
  return ReqSubscribeTickerData_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2>
ReqSubscribeTickerData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReqSubscribeTickerData, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ReqSubscribeTickerData_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ReqSubscribeTickerData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool isCancel = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ReqSubscribeTickerData, _impl_.iscancel_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ReqSubscribeTickerData, _impl_.iscancel_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool isCancel = 1;
    {PROTOBUF_FIELD_OFFSET(ReqSubscribeTickerData, _impl_.iscancel_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void ReqSubscribeTickerData::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ReqSubscribeTickerData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iscancel_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ReqSubscribeTickerData::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ReqSubscribeTickerData& this_ = static_cast<const ReqSubscribeTickerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ReqSubscribeTickerData::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ReqSubscribeTickerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ReqSubscribeTickerData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool isCancel = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_iscancel() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_iscancel(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ReqSubscribeTickerData)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ReqSubscribeTickerData::ByteSizeLong(const MessageLite& base) {
  const ReqSubscribeTickerData& this_ = static_cast<const ReqSubscribeTickerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ReqSubscribeTickerData::ByteSizeLong() const {
  const ReqSubscribeTickerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ReqSubscribeTickerData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // bool isCancel = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_iscancel() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ReqSubscribeTickerData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqSubscribeTickerData*>(&to_msg);
  auto& from = static_cast<const ReqSubscribeTickerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ReqSubscribeTickerData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (from._internal_iscancel() != 0) {
      _this->_impl_.iscancel_ = from._impl_.iscancel_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSubscribeTickerData::CopyFrom(const ReqSubscribeTickerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ReqSubscribeTickerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqSubscribeTickerData::InternalSwap(ReqSubscribeTickerData* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.iscancel_, other->_impl_.iscancel_);
}

::google::protobuf::Metadata ReqSubscribeTickerData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResSubscribeTickerData::_Internal {
 public:
};

ResSubscribeTickerData::ResSubscribeTickerData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResSubscribeTickerData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
}
PROTOBUF_NDEBUG_INLINE ResSubscribeTickerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ResSubscribeTickerData& from_msg)
      : beanlist_{visibility, arena, from.beanlist_},
        _cached_size_{0} {}

ResSubscribeTickerData::ResSubscribeTickerData(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ResSubscribeTickerData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResSubscribeTickerData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResSubscribeTickerData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
}
PROTOBUF_NDEBUG_INLINE ResSubscribeTickerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : beanlist_{visibility, arena},
        _cached_size_{0} {}

inline void ResSubscribeTickerData::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ResSubscribeTickerData::~ResSubscribeTickerData() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
  SharedDtor(*this);
}
inline void ResSubscribeTickerData::SharedDtor(MessageLite& self) {
  ResSubscribeTickerData& this_ = static_cast<ResSubscribeTickerData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ResSubscribeTickerData::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ResSubscribeTickerData(arena);
}
constexpr auto ResSubscribeTickerData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResSubscribeTickerData, _impl_.beanlist_) +
          decltype(ResSubscribeTickerData::_impl_.beanlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ResSubscribeTickerData), alignof(ResSubscribeTickerData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResSubscribeTickerData::PlacementNew_,
                                 sizeof(ResSubscribeTickerData),
                                 alignof(ResSubscribeTickerData));
  }
}
constexpr auto ResSubscribeTickerData::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ResSubscribeTickerData_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ResSubscribeTickerData::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ResSubscribeTickerData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ResSubscribeTickerData::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ResSubscribeTickerData>(), &ResSubscribeTickerData::ByteSizeLong,
              &ResSubscribeTickerData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ResSubscribeTickerData, _impl_._cached_size_),
          false,
      },
      &ResSubscribeTickerData::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ResSubscribeTickerData_class_data_ =
        ResSubscribeTickerData::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ResSubscribeTickerData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ResSubscribeTickerData_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ResSubscribeTickerData_class_data_.tc_table);
  return ResSubscribeTickerData_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ResSubscribeTickerData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ResSubscribeTickerData_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ResSubscribeTickerData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.quote.SymbolTickerDataBean beanList = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResSubscribeTickerData, _impl_.beanlist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .lampyris.crypto.protocol.quote.SymbolTickerDataBean beanList = 1;
    {PROTOBUF_FIELD_OFFSET(ResSubscribeTickerData, _impl_.beanlist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ResSubscribeTickerData::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beanlist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ResSubscribeTickerData::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ResSubscribeTickerData& this_ = static_cast<const ResSubscribeTickerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ResSubscribeTickerData::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ResSubscribeTickerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .lampyris.crypto.protocol.quote.SymbolTickerDataBean beanList = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_beanlist_size());
       i < n; i++) {
    const auto& repfield = this_._internal_beanlist().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ResSubscribeTickerData::ByteSizeLong(const MessageLite& base) {
  const ResSubscribeTickerData& this_ = static_cast<const ResSubscribeTickerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ResSubscribeTickerData::ByteSizeLong() const {
  const ResSubscribeTickerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .lampyris.crypto.protocol.quote.SymbolTickerDataBean beanList = 1;
    {
      total_size += 1UL * this_._internal_beanlist_size();
      for (const auto& msg : this_._internal_beanlist()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ResSubscribeTickerData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResSubscribeTickerData*>(&to_msg);
  auto& from = static_cast<const ResSubscribeTickerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beanlist()->MergeFrom(
      from._internal_beanlist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResSubscribeTickerData::CopyFrom(const ResSubscribeTickerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResSubscribeTickerData::InternalSwap(ResSubscribeTickerData* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.beanlist_.InternalSwap(&other->_impl_.beanlist_);
}

::google::protobuf::Metadata ResSubscribeTickerData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqSubscribeTradeData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReqSubscribeTradeData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReqSubscribeTradeData, _impl_._has_bits_);
};

ReqSubscribeTradeData::ReqSubscribeTradeData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqSubscribeTradeData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
}
PROTOBUF_NDEBUG_INLINE ReqSubscribeTradeData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ReqSubscribeTradeData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbols_{visibility, arena, from.symbols_} {}

ReqSubscribeTradeData::ReqSubscribeTradeData(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ReqSubscribeTradeData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqSubscribeTradeData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqSubscribeTradeData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.iscancel_ = from._impl_.iscancel_;

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
}
PROTOBUF_NDEBUG_INLINE ReqSubscribeTradeData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbols_{visibility, arena} {}

inline void ReqSubscribeTradeData::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.iscancel_ = {};
}
ReqSubscribeTradeData::~ReqSubscribeTradeData() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
  SharedDtor(*this);
}
inline void ReqSubscribeTradeData::SharedDtor(MessageLite& self) {
  ReqSubscribeTradeData& this_ = static_cast<ReqSubscribeTradeData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ReqSubscribeTradeData::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ReqSubscribeTradeData(arena);
}
constexpr auto ReqSubscribeTradeData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ReqSubscribeTradeData, _impl_.symbols_) +
          decltype(ReqSubscribeTradeData::_impl_.symbols_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ReqSubscribeTradeData), alignof(ReqSubscribeTradeData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ReqSubscribeTradeData::PlacementNew_,
                                 sizeof(ReqSubscribeTradeData),
                                 alignof(ReqSubscribeTradeData));
  }
}
constexpr auto ReqSubscribeTradeData::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ReqSubscribeTradeData_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ReqSubscribeTradeData::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ReqSubscribeTradeData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ReqSubscribeTradeData::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ReqSubscribeTradeData>(), &ReqSubscribeTradeData::ByteSizeLong,
              &ReqSubscribeTradeData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ReqSubscribeTradeData, _impl_._cached_size_),
          false,
      },
      &ReqSubscribeTradeData::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ReqSubscribeTradeData_class_data_ =
        ReqSubscribeTradeData::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ReqSubscribeTradeData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ReqSubscribeTradeData_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ReqSubscribeTradeData_class_data_.tc_table);
  return ReqSubscribeTradeData_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 68, 2>
ReqSubscribeTradeData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReqSubscribeTradeData, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ReqSubscribeTradeData_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ReqSubscribeTradeData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool isCancel = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ReqSubscribeTradeData, _impl_.iscancel_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(ReqSubscribeTradeData, _impl_.iscancel_)}},
    // repeated string symbols = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqSubscribeTradeData, _impl_.symbols_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string symbols = 1;
    {PROTOBUF_FIELD_OFFSET(ReqSubscribeTradeData, _impl_.symbols_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool isCancel = 2;
    {PROTOBUF_FIELD_OFFSET(ReqSubscribeTradeData, _impl_.iscancel_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\64\7\0\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.ReqSubscribeTradeData"
    "symbols"
  }},
};
PROTOBUF_NOINLINE void ReqSubscribeTradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbols_.Clear();
  _impl_.iscancel_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ReqSubscribeTradeData::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ReqSubscribeTradeData& this_ = static_cast<const ReqSubscribeTradeData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ReqSubscribeTradeData::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ReqSubscribeTradeData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string symbols = 1;
  for (int i = 0, n = this_._internal_symbols_size(); i < n; ++i) {
    const auto& s = this_._internal_symbols().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.ReqSubscribeTradeData.symbols");
    target = stream->WriteString(1, s, target);
  }

  // bool isCancel = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_iscancel() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_iscancel(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ReqSubscribeTradeData::ByteSizeLong(const MessageLite& base) {
  const ReqSubscribeTradeData& this_ = static_cast<const ReqSubscribeTradeData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ReqSubscribeTradeData::ByteSizeLong() const {
  const ReqSubscribeTradeData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string symbols = 1;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_symbols().size());
      for (int i = 0, n = this_._internal_symbols().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_symbols().Get(i));
      }
    }
  }
   {
    // bool isCancel = 2;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_iscancel() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ReqSubscribeTradeData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqSubscribeTradeData*>(&to_msg);
  auto& from = static_cast<const ReqSubscribeTradeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_symbols()->MergeFrom(from._internal_symbols());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (from._internal_iscancel() != 0) {
      _this->_impl_.iscancel_ = from._impl_.iscancel_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSubscribeTradeData::CopyFrom(const ReqSubscribeTradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqSubscribeTradeData::InternalSwap(ReqSubscribeTradeData* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.symbols_.InternalSwap(&other->_impl_.symbols_);
  swap(_impl_.iscancel_, other->_impl_.iscancel_);
}

::google::protobuf::Metadata ReqSubscribeTradeData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SymbolTradeDataBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SymbolTradeDataBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SymbolTradeDataBean, _impl_._has_bits_);
};

SymbolTradeDataBean::SymbolTradeDataBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SymbolTradeDataBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
}
PROTOBUF_NDEBUG_INLINE SymbolTradeDataBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::SymbolTradeDataBean& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        beanlist_{visibility, arena, from.beanlist_},
        symbol_(arena, from.symbol_) {}

SymbolTradeDataBean::SymbolTradeDataBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SymbolTradeDataBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SymbolTradeDataBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SymbolTradeDataBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
}
PROTOBUF_NDEBUG_INLINE SymbolTradeDataBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        beanlist_{visibility, arena},
        symbol_(arena) {}

inline void SymbolTradeDataBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SymbolTradeDataBean::~SymbolTradeDataBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
  SharedDtor(*this);
}
inline void SymbolTradeDataBean::SharedDtor(MessageLite& self) {
  SymbolTradeDataBean& this_ = static_cast<SymbolTradeDataBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SymbolTradeDataBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SymbolTradeDataBean(arena);
}
constexpr auto SymbolTradeDataBean::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SymbolTradeDataBean, _impl_.beanlist_) +
          decltype(SymbolTradeDataBean::_impl_.beanlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SymbolTradeDataBean), alignof(SymbolTradeDataBean), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SymbolTradeDataBean::PlacementNew_,
                                 sizeof(SymbolTradeDataBean),
                                 alignof(SymbolTradeDataBean));
  }
}
constexpr auto SymbolTradeDataBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SymbolTradeDataBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SymbolTradeDataBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SymbolTradeDataBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SymbolTradeDataBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SymbolTradeDataBean>(), &SymbolTradeDataBean::ByteSizeLong,
              &SymbolTradeDataBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SymbolTradeDataBean, _impl_._cached_size_),
          false,
      },
      &SymbolTradeDataBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SymbolTradeDataBean_class_data_ =
        SymbolTradeDataBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SymbolTradeDataBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SymbolTradeDataBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SymbolTradeDataBean_class_data_.tc_table);
  return SymbolTradeDataBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 65, 2>
SymbolTradeDataBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SymbolTradeDataBean, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SymbolTradeDataBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SymbolTradeDataBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.quote.TradeDataBean beanList = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeDataBean, _impl_.beanlist_)}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeDataBean, _impl_.symbol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeDataBean, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .lampyris.crypto.protocol.quote.TradeDataBean beanList = 2;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeDataBean, _impl_.beanlist_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::TradeDataBean>()},
  }},
  {{
    "\62\6\0\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.SymbolTradeDataBean"
    "symbol"
  }},
};
PROTOBUF_NOINLINE void SymbolTradeDataBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beanlist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.symbol_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SymbolTradeDataBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SymbolTradeDataBean& this_ = static_cast<const SymbolTradeDataBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SymbolTradeDataBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SymbolTradeDataBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_symbol().empty()) {
      const std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.SymbolTradeDataBean.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // repeated .lampyris.crypto.protocol.quote.TradeDataBean beanList = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_beanlist_size());
       i < n; i++) {
    const auto& repfield = this_._internal_beanlist().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SymbolTradeDataBean::ByteSizeLong(const MessageLite& base) {
  const SymbolTradeDataBean& this_ = static_cast<const SymbolTradeDataBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SymbolTradeDataBean::ByteSizeLong() const {
  const SymbolTradeDataBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .lampyris.crypto.protocol.quote.TradeDataBean beanList = 2;
    {
      total_size += 1UL * this_._internal_beanlist_size();
      for (const auto& msg : this_._internal_beanlist()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // string symbol = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SymbolTradeDataBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SymbolTradeDataBean*>(&to_msg);
  auto& from = static_cast<const SymbolTradeDataBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beanlist()->MergeFrom(
      from._internal_beanlist());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_symbol().empty()) {
      _this->_internal_set_symbol(from._internal_symbol());
    } else {
      if (_this->_impl_.symbol_.IsDefault()) {
        _this->_internal_set_symbol("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolTradeDataBean::CopyFrom(const SymbolTradeDataBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SymbolTradeDataBean::InternalSwap(SymbolTradeDataBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.beanlist_.InternalSwap(&other->_impl_.beanlist_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
}

::google::protobuf::Metadata SymbolTradeDataBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TradeDataBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TradeDataBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_._has_bits_);
};

TradeDataBean::TradeDataBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TradeDataBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.TradeDataBean)
}
PROTOBUF_NDEBUG_INLINE TradeDataBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::TradeDataBean& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_) {}

TradeDataBean::TradeDataBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TradeDataBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TradeDataBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TradeDataBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, count_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::count_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.TradeDataBean)
}
PROTOBUF_NDEBUG_INLINE TradeDataBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbol_(arena) {}

inline void TradeDataBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, count_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::count_));
}
TradeDataBean::~TradeDataBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.TradeDataBean)
  SharedDtor(*this);
}
inline void TradeDataBean::SharedDtor(MessageLite& self) {
  TradeDataBean& this_ = static_cast<TradeDataBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TradeDataBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TradeDataBean(arena);
}
constexpr auto TradeDataBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TradeDataBean),
                                            alignof(TradeDataBean));
}
constexpr auto TradeDataBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TradeDataBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TradeDataBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TradeDataBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TradeDataBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TradeDataBean>(), &TradeDataBean::ByteSizeLong,
              &TradeDataBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_._cached_size_),
          false,
      },
      &TradeDataBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TradeDataBean_class_data_ =
        TradeDataBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TradeDataBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TradeDataBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TradeDataBean_class_data_.tc_table);
  return TradeDataBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 59, 2>
TradeDataBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    TradeDataBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::TradeDataBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.symbol_)}},
    // int64 timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TradeDataBean, _impl_.timestamp_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.timestamp_)}},
    // double price = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.price_)}},
    // double volume = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.volume_)}},
    // bool isBuy = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TradeDataBean, _impl_.isbuy_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.isbuy_)}},
    // int32 count = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TradeDataBean, _impl_.count_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.count_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // double price = 3;
    {PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.price_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double volume = 4;
    {PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.volume_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // bool isBuy = 5;
    {PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.isbuy_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // int32 count = 6;
    {PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.count_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\54\6\0\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.TradeDataBean"
    "symbol"
  }},
};
PROTOBUF_NOINLINE void TradeDataBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.TradeDataBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.symbol_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000003eu) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TradeDataBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TradeDataBean& this_ = static_cast<const TradeDataBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TradeDataBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TradeDataBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.TradeDataBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_symbol().empty()) {
      const std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.TradeDataBean.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int64 timestamp = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_timestamp(), target);
    }
  }

  // double price = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_price(), target);
    }
  }

  // double volume = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          4, this_._internal_volume(), target);
    }
  }

  // bool isBuy = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_isbuy() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_isbuy(), target);
    }
  }

  // int32 count = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
              stream, this_._internal_count(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.TradeDataBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TradeDataBean::ByteSizeLong(const MessageLite& base) {
  const TradeDataBean& this_ = static_cast<const TradeDataBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TradeDataBean::ByteSizeLong() const {
  const TradeDataBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.TradeDataBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string symbol = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // int64 timestamp = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // double price = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
        total_size += 9;
      }
    }
    // double volume = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
        total_size += 9;
      }
    }
    // bool isBuy = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_isbuy() != 0) {
        total_size += 2;
      }
    }
    // int32 count = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_count());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TradeDataBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TradeDataBean*>(&to_msg);
  auto& from = static_cast<const TradeDataBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.TradeDataBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_price()) != 0) {
        _this->_impl_.price_ = from._impl_.price_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_volume()) != 0) {
        _this->_impl_.volume_ = from._impl_.volume_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_isbuy() != 0) {
        _this->_impl_.isbuy_ = from._impl_.isbuy_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_count() != 0) {
        _this->_impl_.count_ = from._impl_.count_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradeDataBean::CopyFrom(const TradeDataBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.TradeDataBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TradeDataBean::InternalSwap(TradeDataBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.count_)
      + sizeof(TradeDataBean::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(TradeDataBean, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata TradeDataBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqSubscribeCandlestickUpdate::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReqSubscribeCandlestickUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_._has_bits_);
};

ReqSubscribeCandlestickUpdate::ReqSubscribeCandlestickUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqSubscribeCandlestickUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
}
PROTOBUF_NDEBUG_INLINE ReqSubscribeCandlestickUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ReqSubscribeCandlestickUpdate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbols_{visibility, arena, from.symbols_},
        barsize_(arena, from.barsize_) {}

ReqSubscribeCandlestickUpdate::ReqSubscribeCandlestickUpdate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ReqSubscribeCandlestickUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqSubscribeCandlestickUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqSubscribeCandlestickUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.iscancel_ = from._impl_.iscancel_;

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
}
PROTOBUF_NDEBUG_INLINE ReqSubscribeCandlestickUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbols_{visibility, arena},
        barsize_(arena) {}

inline void ReqSubscribeCandlestickUpdate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.iscancel_ = {};
}
ReqSubscribeCandlestickUpdate::~ReqSubscribeCandlestickUpdate() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
  SharedDtor(*this);
}
inline void ReqSubscribeCandlestickUpdate::SharedDtor(MessageLite& self) {
  ReqSubscribeCandlestickUpdate& this_ = static_cast<ReqSubscribeCandlestickUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.barsize_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ReqSubscribeCandlestickUpdate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ReqSubscribeCandlestickUpdate(arena);
}
constexpr auto ReqSubscribeCandlestickUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_.symbols_) +
          decltype(ReqSubscribeCandlestickUpdate::_impl_.symbols_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ReqSubscribeCandlestickUpdate), alignof(ReqSubscribeCandlestickUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ReqSubscribeCandlestickUpdate::PlacementNew_,
                                 sizeof(ReqSubscribeCandlestickUpdate),
                                 alignof(ReqSubscribeCandlestickUpdate));
  }
}
constexpr auto ReqSubscribeCandlestickUpdate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ReqSubscribeCandlestickUpdate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ReqSubscribeCandlestickUpdate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ReqSubscribeCandlestickUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ReqSubscribeCandlestickUpdate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ReqSubscribeCandlestickUpdate>(), &ReqSubscribeCandlestickUpdate::ByteSizeLong,
              &ReqSubscribeCandlestickUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_._cached_size_),
          false,
      },
      &ReqSubscribeCandlestickUpdate::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ReqSubscribeCandlestickUpdate_class_data_ =
        ReqSubscribeCandlestickUpdate::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ReqSubscribeCandlestickUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ReqSubscribeCandlestickUpdate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ReqSubscribeCandlestickUpdate_class_data_.tc_table);
  return ReqSubscribeCandlestickUpdate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 83, 2>
ReqSubscribeCandlestickUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ReqSubscribeCandlestickUpdate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ReqSubscribeCandlestickUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string symbols = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_.symbols_)}},
    // string barSize = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_.barsize_)}},
    // bool isCancel = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ReqSubscribeCandlestickUpdate, _impl_.iscancel_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_.iscancel_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string symbols = 1;
    {PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_.symbols_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string barSize = 2;
    {PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_.barsize_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool isCancel = 3;
    {PROTOBUF_FIELD_OFFSET(ReqSubscribeCandlestickUpdate, _impl_.iscancel_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\74\7\7\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate"
    "symbols"
    "barSize"
  }},
};
PROTOBUF_NOINLINE void ReqSubscribeCandlestickUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbols_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.barsize_.ClearNonDefaultToEmpty();
  }
  _impl_.iscancel_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ReqSubscribeCandlestickUpdate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ReqSubscribeCandlestickUpdate& this_ = static_cast<const ReqSubscribeCandlestickUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ReqSubscribeCandlestickUpdate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ReqSubscribeCandlestickUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string symbols = 1;
  for (int i = 0, n = this_._internal_symbols_size(); i < n; ++i) {
    const auto& s = this_._internal_symbols().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.symbols");
    target = stream->WriteString(1, s, target);
  }

  // string barSize = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_barsize().empty()) {
      const std::string& _s = this_._internal_barsize();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.barSize");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // bool isCancel = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_iscancel() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_iscancel(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ReqSubscribeCandlestickUpdate::ByteSizeLong(const MessageLite& base) {
  const ReqSubscribeCandlestickUpdate& this_ = static_cast<const ReqSubscribeCandlestickUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ReqSubscribeCandlestickUpdate::ByteSizeLong() const {
  const ReqSubscribeCandlestickUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string symbols = 1;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_symbols().size());
      for (int i = 0, n = this_._internal_symbols().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_symbols().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string barSize = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_barsize().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_barsize());
      }
    }
    // bool isCancel = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_iscancel() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ReqSubscribeCandlestickUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqSubscribeCandlestickUpdate*>(&to_msg);
  auto& from = static_cast<const ReqSubscribeCandlestickUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_symbols()->MergeFrom(from._internal_symbols());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_barsize().empty()) {
        _this->_internal_set_barsize(from._internal_barsize());
      } else {
        if (_this->_impl_.barsize_.IsDefault()) {
          _this->_internal_set_barsize("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_iscancel() != 0) {
        _this->_impl_.iscancel_ = from._impl_.iscancel_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSubscribeCandlestickUpdate::CopyFrom(const ReqSubscribeCandlestickUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqSubscribeCandlestickUpdate::InternalSwap(ReqSubscribeCandlestickUpdate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.symbols_.InternalSwap(&other->_impl_.symbols_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.barsize_, &other->_impl_.barsize_, arena);
  swap(_impl_.iscancel_, other->_impl_.iscancel_);
}

::google::protobuf::Metadata ReqSubscribeCandlestickUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqCandlestickQuery::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReqCandlestickQuery>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_._has_bits_);
};

ReqCandlestickQuery::ReqCandlestickQuery(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqCandlestickQuery_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
}
PROTOBUF_NDEBUG_INLINE ReqCandlestickQuery::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ReqCandlestickQuery& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_),
        barsize_(arena, from.barsize_) {}

ReqCandlestickQuery::ReqCandlestickQuery(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ReqCandlestickQuery& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqCandlestickQuery_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqCandlestickQuery* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, starttime_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, starttime_),
           offsetof(Impl_, count_) -
               offsetof(Impl_, starttime_) +
               sizeof(Impl_::count_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
}
PROTOBUF_NDEBUG_INLINE ReqCandlestickQuery::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbol_(arena),
        barsize_(arena) {}

inline void ReqCandlestickQuery::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, starttime_),
           0,
           offsetof(Impl_, count_) -
               offsetof(Impl_, starttime_) +
               sizeof(Impl_::count_));
}
ReqCandlestickQuery::~ReqCandlestickQuery() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
  SharedDtor(*this);
}
inline void ReqCandlestickQuery::SharedDtor(MessageLite& self) {
  ReqCandlestickQuery& this_ = static_cast<ReqCandlestickQuery&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.barsize_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ReqCandlestickQuery::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ReqCandlestickQuery(arena);
}
constexpr auto ReqCandlestickQuery::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReqCandlestickQuery),
                                            alignof(ReqCandlestickQuery));
}
constexpr auto ReqCandlestickQuery::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ReqCandlestickQuery_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ReqCandlestickQuery::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ReqCandlestickQuery>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ReqCandlestickQuery::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ReqCandlestickQuery>(), &ReqCandlestickQuery::ByteSizeLong,
              &ReqCandlestickQuery::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_._cached_size_),
          false,
      },
      &ReqCandlestickQuery::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ReqCandlestickQuery_class_data_ =
        ReqCandlestickQuery::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ReqCandlestickQuery::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ReqCandlestickQuery_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ReqCandlestickQuery_class_data_.tc_table);
  return ReqCandlestickQuery_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 72, 2>
ReqCandlestickQuery::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ReqCandlestickQuery_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ReqCandlestickQuery>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.symbol_)}},
    // string barSize = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.barsize_)}},
    // int64 startTime = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ReqCandlestickQuery, _impl_.starttime_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.starttime_)}},
    // int64 endTime = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ReqCandlestickQuery, _impl_.endtime_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.endtime_)}},
    // int64 count = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ReqCandlestickQuery, _impl_.count_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.count_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string barSize = 2;
    {PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.barsize_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 startTime = 3;
    {PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.starttime_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 endTime = 4;
    {PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.endtime_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 count = 5;
    {PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.count_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\62\6\7\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.ReqCandlestickQuery"
    "symbol"
    "barSize"
  }},
};
PROTOBUF_NOINLINE void ReqCandlestickQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.symbol_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.barsize_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000001cu) != 0) {
    ::memset(&_impl_.starttime_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ReqCandlestickQuery::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ReqCandlestickQuery& this_ = static_cast<const ReqCandlestickQuery&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ReqCandlestickQuery::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ReqCandlestickQuery& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_symbol().empty()) {
      const std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.ReqCandlestickQuery.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string barSize = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_barsize().empty()) {
      const std::string& _s = this_._internal_barsize();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.ReqCandlestickQuery.barSize");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int64 startTime = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_starttime() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_starttime(), target);
    }
  }

  // int64 endTime = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_endtime() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
              stream, this_._internal_endtime(), target);
    }
  }

  // int64 count = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
              stream, this_._internal_count(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ReqCandlestickQuery::ByteSizeLong(const MessageLite& base) {
  const ReqCandlestickQuery& this_ = static_cast<const ReqCandlestickQuery&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ReqCandlestickQuery::ByteSizeLong() const {
  const ReqCandlestickQuery& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string symbol = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // string barSize = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_barsize().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_barsize());
      }
    }
    // int64 startTime = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_starttime() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_starttime());
      }
    }
    // int64 endTime = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_endtime() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_endtime());
      }
    }
    // int64 count = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_count());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ReqCandlestickQuery::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqCandlestickQuery*>(&to_msg);
  auto& from = static_cast<const ReqCandlestickQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_barsize().empty()) {
        _this->_internal_set_barsize(from._internal_barsize());
      } else {
        if (_this->_impl_.barsize_.IsDefault()) {
          _this->_internal_set_barsize("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_starttime() != 0) {
        _this->_impl_.starttime_ = from._impl_.starttime_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_endtime() != 0) {
        _this->_impl_.endtime_ = from._impl_.endtime_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_count() != 0) {
        _this->_impl_.count_ = from._impl_.count_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqCandlestickQuery::CopyFrom(const ReqCandlestickQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqCandlestickQuery::InternalSwap(ReqCandlestickQuery* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.barsize_, &other->_impl_.barsize_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.count_)
      + sizeof(ReqCandlestickQuery::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(ReqCandlestickQuery, _impl_.starttime_)>(
          reinterpret_cast<char*>(&_impl_.starttime_),
          reinterpret_cast<char*>(&other->_impl_.starttime_));
}

::google::protobuf::Metadata ReqCandlestickQuery::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResCandlestickQuery::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ResCandlestickQuery>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_._has_bits_);
};

ResCandlestickQuery::ResCandlestickQuery(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResCandlestickQuery_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ResCandlestickQuery)
}
PROTOBUF_NDEBUG_INLINE ResCandlestickQuery::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ResCandlestickQuery& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        beanlist_{visibility, arena, from.beanlist_},
        symbol_(arena, from.symbol_),
        barsize_(arena, from.barsize_) {}

ResCandlestickQuery::ResCandlestickQuery(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ResCandlestickQuery& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResCandlestickQuery_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResCandlestickQuery* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ResCandlestickQuery)
}
PROTOBUF_NDEBUG_INLINE ResCandlestickQuery::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        beanlist_{visibility, arena},
        symbol_(arena),
        barsize_(arena) {}

inline void ResCandlestickQuery::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ResCandlestickQuery::~ResCandlestickQuery() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ResCandlestickQuery)
  SharedDtor(*this);
}
inline void ResCandlestickQuery::SharedDtor(MessageLite& self) {
  ResCandlestickQuery& this_ = static_cast<ResCandlestickQuery&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.barsize_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ResCandlestickQuery::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ResCandlestickQuery(arena);
}
constexpr auto ResCandlestickQuery::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_.beanlist_) +
          decltype(ResCandlestickQuery::_impl_.beanlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ResCandlestickQuery), alignof(ResCandlestickQuery), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResCandlestickQuery::PlacementNew_,
                                 sizeof(ResCandlestickQuery),
                                 alignof(ResCandlestickQuery));
  }
}
constexpr auto ResCandlestickQuery::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ResCandlestickQuery_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ResCandlestickQuery::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ResCandlestickQuery>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ResCandlestickQuery::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ResCandlestickQuery>(), &ResCandlestickQuery::ByteSizeLong,
              &ResCandlestickQuery::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_._cached_size_),
          false,
      },
      &ResCandlestickQuery::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ResCandlestickQuery_class_data_ =
        ResCandlestickQuery::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ResCandlestickQuery::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ResCandlestickQuery_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ResCandlestickQuery_class_data_.tc_table);
  return ResCandlestickQuery_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 72, 2>
ResCandlestickQuery::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ResCandlestickQuery_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ResCandlestickQuery>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_.symbol_)}},
    // string barSize = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_.barsize_)}},
    // repeated .lampyris.crypto.protocol.quote.CandlestickBean beanList = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_.beanlist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string barSize = 2;
    {PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_.barsize_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .lampyris.crypto.protocol.quote.CandlestickBean beanList = 3;
    {PROTOBUF_FIELD_OFFSET(ResCandlestickQuery, _impl_.beanlist_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::CandlestickBean>()},
  }},
  {{
    "\62\6\7\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.ResCandlestickQuery"
    "symbol"
    "barSize"
  }},
};
PROTOBUF_NOINLINE void ResCandlestickQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ResCandlestickQuery)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beanlist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.symbol_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.barsize_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ResCandlestickQuery::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ResCandlestickQuery& this_ = static_cast<const ResCandlestickQuery&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ResCandlestickQuery::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ResCandlestickQuery& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ResCandlestickQuery)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_symbol().empty()) {
      const std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.ResCandlestickQuery.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string barSize = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_barsize().empty()) {
      const std::string& _s = this_._internal_barsize();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.ResCandlestickQuery.barSize");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // repeated .lampyris.crypto.protocol.quote.CandlestickBean beanList = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_beanlist_size());
       i < n; i++) {
    const auto& repfield = this_._internal_beanlist().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ResCandlestickQuery)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ResCandlestickQuery::ByteSizeLong(const MessageLite& base) {
  const ResCandlestickQuery& this_ = static_cast<const ResCandlestickQuery&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ResCandlestickQuery::ByteSizeLong() const {
  const ResCandlestickQuery& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ResCandlestickQuery)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .lampyris.crypto.protocol.quote.CandlestickBean beanList = 3;
    {
      total_size += 1UL * this_._internal_beanlist_size();
      for (const auto& msg : this_._internal_beanlist()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string symbol = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // string barSize = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_barsize().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_barsize());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ResCandlestickQuery::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResCandlestickQuery*>(&to_msg);
  auto& from = static_cast<const ResCandlestickQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ResCandlestickQuery)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beanlist()->MergeFrom(
      from._internal_beanlist());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_barsize().empty()) {
        _this->_internal_set_barsize(from._internal_barsize());
      } else {
        if (_this->_impl_.barsize_.IsDefault()) {
          _this->_internal_set_barsize("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResCandlestickQuery::CopyFrom(const ResCandlestickQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ResCandlestickQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResCandlestickQuery::InternalSwap(ResCandlestickQuery* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.beanlist_.InternalSwap(&other->_impl_.beanlist_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.barsize_, &other->_impl_.barsize_, arena);
}

::google::protobuf::Metadata ResCandlestickQuery::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CandlestickUpdateBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CandlestickUpdateBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_._has_bits_);
};

CandlestickUpdateBean::CandlestickUpdateBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CandlestickUpdateBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
}
PROTOBUF_NDEBUG_INLINE CandlestickUpdateBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::CandlestickUpdateBean& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_),
        barsize_(arena, from.barsize_) {}

CandlestickUpdateBean::CandlestickUpdateBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CandlestickUpdateBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CandlestickUpdateBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CandlestickUpdateBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bean_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bean_)
                : nullptr;
  _impl_.isend_ = from._impl_.isend_;

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
}
PROTOBUF_NDEBUG_INLINE CandlestickUpdateBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbol_(arena),
        barsize_(arena) {}

inline void CandlestickUpdateBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bean_),
           0,
           offsetof(Impl_, isend_) -
               offsetof(Impl_, bean_) +
               sizeof(Impl_::isend_));
}
CandlestickUpdateBean::~CandlestickUpdateBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
  SharedDtor(*this);
}
inline void CandlestickUpdateBean::SharedDtor(MessageLite& self) {
  CandlestickUpdateBean& this_ = static_cast<CandlestickUpdateBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.barsize_.Destroy();
  delete this_._impl_.bean_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CandlestickUpdateBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CandlestickUpdateBean(arena);
}
constexpr auto CandlestickUpdateBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CandlestickUpdateBean),
                                            alignof(CandlestickUpdateBean));
}
constexpr auto CandlestickUpdateBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CandlestickUpdateBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CandlestickUpdateBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CandlestickUpdateBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CandlestickUpdateBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CandlestickUpdateBean>(), &CandlestickUpdateBean::ByteSizeLong,
              &CandlestickUpdateBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_._cached_size_),
          false,
      },
      &CandlestickUpdateBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull CandlestickUpdateBean_class_data_ =
        CandlestickUpdateBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CandlestickUpdateBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CandlestickUpdateBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CandlestickUpdateBean_class_data_.tc_table);
  return CandlestickUpdateBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 74, 2>
CandlestickUpdateBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CandlestickUpdateBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::CandlestickUpdateBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool isEnd = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CandlestickUpdateBean, _impl_.isend_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.isend_)}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.symbol_)}},
    // string barSize = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.barsize_)}},
    // .lampyris.crypto.protocol.quote.CandlestickBean bean = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.bean_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string barSize = 2;
    {PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.barsize_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .lampyris.crypto.protocol.quote.CandlestickBean bean = 3;
    {PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.bean_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool isEnd = 4;
    {PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.isend_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::CandlestickBean>()},
  }},
  {{
    "\64\6\7\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.CandlestickUpdateBean"
    "symbol"
    "barSize"
  }},
};
PROTOBUF_NOINLINE void CandlestickUpdateBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.symbol_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.barsize_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.bean_ != nullptr);
      _impl_.bean_->Clear();
    }
  }
  _impl_.isend_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CandlestickUpdateBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CandlestickUpdateBean& this_ = static_cast<const CandlestickUpdateBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CandlestickUpdateBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CandlestickUpdateBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_symbol().empty()) {
      const std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.CandlestickUpdateBean.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string barSize = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_barsize().empty()) {
      const std::string& _s = this_._internal_barsize();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.CandlestickUpdateBean.barSize");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .lampyris.crypto.protocol.quote.CandlestickBean bean = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.bean_, this_._impl_.bean_->GetCachedSize(), target,
        stream);
  }

  // bool isEnd = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (this_._internal_isend() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_isend(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CandlestickUpdateBean::ByteSizeLong(const MessageLite& base) {
  const CandlestickUpdateBean& this_ = static_cast<const CandlestickUpdateBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CandlestickUpdateBean::ByteSizeLong() const {
  const CandlestickUpdateBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string symbol = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // string barSize = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_barsize().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_barsize());
      }
    }
    // .lampyris.crypto.protocol.quote.CandlestickBean bean = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bean_);
    }
    // bool isEnd = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_isend() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CandlestickUpdateBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CandlestickUpdateBean*>(&to_msg);
  auto& from = static_cast<const CandlestickUpdateBean&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_barsize().empty()) {
        _this->_internal_set_barsize(from._internal_barsize());
      } else {
        if (_this->_impl_.barsize_.IsDefault()) {
          _this->_internal_set_barsize("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.bean_ != nullptr);
      if (_this->_impl_.bean_ == nullptr) {
        _this->_impl_.bean_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.bean_);
      } else {
        _this->_impl_.bean_->MergeFrom(*from._impl_.bean_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_isend() != 0) {
        _this->_impl_.isend_ = from._impl_.isend_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CandlestickUpdateBean::CopyFrom(const CandlestickUpdateBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CandlestickUpdateBean::InternalSwap(CandlestickUpdateBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.barsize_, &other->_impl_.barsize_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.isend_)
      + sizeof(CandlestickUpdateBean::_impl_.isend_)
      - PROTOBUF_FIELD_OFFSET(CandlestickUpdateBean, _impl_.bean_)>(
          reinterpret_cast<char*>(&_impl_.bean_),
          reinterpret_cast<char*>(&other->_impl_.bean_));
}

::google::protobuf::Metadata CandlestickUpdateBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CandlestickBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CandlestickBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_._has_bits_);
};

CandlestickBean::CandlestickBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CandlestickBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.CandlestickBean)
}
CandlestickBean::CandlestickBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CandlestickBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CandlestickBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CandlestickBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CandlestickBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, currency_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::currency_));
}
CandlestickBean::~CandlestickBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.CandlestickBean)
  SharedDtor(*this);
}
inline void CandlestickBean::SharedDtor(MessageLite& self) {
  CandlestickBean& this_ = static_cast<CandlestickBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CandlestickBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CandlestickBean(arena);
}
constexpr auto CandlestickBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CandlestickBean),
                                            alignof(CandlestickBean));
}
constexpr auto CandlestickBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CandlestickBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CandlestickBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CandlestickBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CandlestickBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CandlestickBean>(), &CandlestickBean::ByteSizeLong,
              &CandlestickBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_._cached_size_),
          false,
      },
      &CandlestickBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull CandlestickBean_class_data_ =
        CandlestickBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CandlestickBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CandlestickBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CandlestickBean_class_data_.tc_table);
  return CandlestickBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2>
CandlestickBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CandlestickBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::CandlestickBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 time = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CandlestickBean, _impl_.time_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.time_)}},
    // double open = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.open_)}},
    // double high = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.high_)}},
    // double low = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.low_)}},
    // double close = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 4, 0, PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.close_)}},
    // double volume = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 5, 0, PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.volume_)}},
    // double currency = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 6, 0, PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.currency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 time = 1;
    {PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // double open = 2;
    {PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.open_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double high = 3;
    {PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.high_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double low = 4;
    {PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.low_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double close = 5;
    {PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.close_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double volume = 6;
    {PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.volume_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double currency = 7;
    {PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.currency_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CandlestickBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.CandlestickBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    ::memset(&_impl_.time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.currency_) -
        reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.currency_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CandlestickBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CandlestickBean& this_ = static_cast<const CandlestickBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CandlestickBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CandlestickBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.CandlestickBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 time = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_time() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
              stream, this_._internal_time(), target);
    }
  }

  // double open = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          2, this_._internal_open(), target);
    }
  }

  // double high = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_high(), target);
    }
  }

  // double low = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          4, this_._internal_low(), target);
    }
  }

  // double close = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this_._internal_close(), target);
    }
  }

  // double volume = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          6, this_._internal_volume(), target);
    }
  }

  // double currency = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_currency()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this_._internal_currency(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.CandlestickBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CandlestickBean::ByteSizeLong(const MessageLite& base) {
  const CandlestickBean& this_ = static_cast<const CandlestickBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CandlestickBean::ByteSizeLong() const {
  const CandlestickBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.CandlestickBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // int64 time = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_time() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_time());
      }
    }
    // double open = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
        total_size += 9;
      }
    }
    // double high = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
        total_size += 9;
      }
    }
    // double low = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
        total_size += 9;
      }
    }
    // double close = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
        total_size += 9;
      }
    }
    // double volume = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
        total_size += 9;
      }
    }
    // double currency = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_currency()) != 0) {
        total_size += 9;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CandlestickBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CandlestickBean*>(&to_msg);
  auto& from = static_cast<const CandlestickBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.CandlestickBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_time() != 0) {
        _this->_impl_.time_ = from._impl_.time_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_open()) != 0) {
        _this->_impl_.open_ = from._impl_.open_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_high()) != 0) {
        _this->_impl_.high_ = from._impl_.high_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_low()) != 0) {
        _this->_impl_.low_ = from._impl_.low_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_close()) != 0) {
        _this->_impl_.close_ = from._impl_.close_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_volume()) != 0) {
        _this->_impl_.volume_ = from._impl_.volume_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_currency()) != 0) {
        _this->_impl_.currency_ = from._impl_.currency_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CandlestickBean::CopyFrom(const CandlestickBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.CandlestickBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CandlestickBean::InternalSwap(CandlestickBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.currency_)
      + sizeof(CandlestickBean::_impl_.currency_)
      - PROTOBUF_FIELD_OFFSET(CandlestickBean, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata CandlestickBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqTradeRule::_Internal {
 public:
};

ReqTradeRule::ReqTradeRule(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqTradeRule_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ReqTradeRule)
}
PROTOBUF_NDEBUG_INLINE ReqTradeRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ReqTradeRule& from_msg)
      : symbollist_{visibility, arena, from.symbollist_},
        _cached_size_{0} {}

ReqTradeRule::ReqTradeRule(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ReqTradeRule& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqTradeRule_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqTradeRule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ReqTradeRule)
}
PROTOBUF_NDEBUG_INLINE ReqTradeRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : symbollist_{visibility, arena},
        _cached_size_{0} {}

inline void ReqTradeRule::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReqTradeRule::~ReqTradeRule() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ReqTradeRule)
  SharedDtor(*this);
}
inline void ReqTradeRule::SharedDtor(MessageLite& self) {
  ReqTradeRule& this_ = static_cast<ReqTradeRule&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ReqTradeRule::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ReqTradeRule(arena);
}
constexpr auto ReqTradeRule::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ReqTradeRule, _impl_.symbollist_) +
          decltype(ReqTradeRule::_impl_.symbollist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ReqTradeRule), alignof(ReqTradeRule), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ReqTradeRule::PlacementNew_,
                                 sizeof(ReqTradeRule),
                                 alignof(ReqTradeRule));
  }
}
constexpr auto ReqTradeRule::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ReqTradeRule_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ReqTradeRule::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ReqTradeRule>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ReqTradeRule::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ReqTradeRule>(), &ReqTradeRule::ByteSizeLong,
              &ReqTradeRule::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ReqTradeRule, _impl_._cached_size_),
          false,
      },
      &ReqTradeRule::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ReqTradeRule_class_data_ =
        ReqTradeRule::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ReqTradeRule::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ReqTradeRule_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ReqTradeRule_class_data_.tc_table);
  return ReqTradeRule_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 62, 2>
ReqTradeRule::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ReqTradeRule_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ReqTradeRule>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string symbolList = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqTradeRule, _impl_.symbollist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string symbolList = 1;
    {PROTOBUF_FIELD_OFFSET(ReqTradeRule, _impl_.symbollist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\53\12\0\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.ReqTradeRule"
    "symbolList"
  }},
};
PROTOBUF_NOINLINE void ReqTradeRule::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ReqTradeRule)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbollist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ReqTradeRule::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ReqTradeRule& this_ = static_cast<const ReqTradeRule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ReqTradeRule::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ReqTradeRule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ReqTradeRule)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string symbolList = 1;
  for (int i = 0, n = this_._internal_symbollist_size(); i < n; ++i) {
    const auto& s = this_._internal_symbollist().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.ReqTradeRule.symbolList");
    target = stream->WriteString(1, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ReqTradeRule)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ReqTradeRule::ByteSizeLong(const MessageLite& base) {
  const ReqTradeRule& this_ = static_cast<const ReqTradeRule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ReqTradeRule::ByteSizeLong() const {
  const ReqTradeRule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ReqTradeRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string symbolList = 1;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_symbollist().size());
      for (int i = 0, n = this_._internal_symbollist().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_symbollist().Get(i));
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ReqTradeRule::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqTradeRule*>(&to_msg);
  auto& from = static_cast<const ReqTradeRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ReqTradeRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_symbollist()->MergeFrom(from._internal_symbollist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqTradeRule::CopyFrom(const ReqTradeRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ReqTradeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqTradeRule::InternalSwap(ReqTradeRule* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.symbollist_.InternalSwap(&other->_impl_.symbollist_);
}

::google::protobuf::Metadata ReqTradeRule::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResTradeRule::_Internal {
 public:
};

ResTradeRule::ResTradeRule(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResTradeRule_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ResTradeRule)
}
PROTOBUF_NDEBUG_INLINE ResTradeRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ResTradeRule& from_msg)
      : beanlist_{visibility, arena, from.beanlist_},
        _cached_size_{0} {}

ResTradeRule::ResTradeRule(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ResTradeRule& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResTradeRule_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResTradeRule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ResTradeRule)
}
PROTOBUF_NDEBUG_INLINE ResTradeRule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : beanlist_{visibility, arena},
        _cached_size_{0} {}

inline void ResTradeRule::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ResTradeRule::~ResTradeRule() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ResTradeRule)
  SharedDtor(*this);
}
inline void ResTradeRule::SharedDtor(MessageLite& self) {
  ResTradeRule& this_ = static_cast<ResTradeRule&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ResTradeRule::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ResTradeRule(arena);
}
constexpr auto ResTradeRule::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResTradeRule, _impl_.beanlist_) +
          decltype(ResTradeRule::_impl_.beanlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ResTradeRule), alignof(ResTradeRule), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResTradeRule::PlacementNew_,
                                 sizeof(ResTradeRule),
                                 alignof(ResTradeRule));
  }
}
constexpr auto ResTradeRule::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ResTradeRule_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ResTradeRule::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ResTradeRule>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ResTradeRule::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ResTradeRule>(), &ResTradeRule::ByteSizeLong,
              &ResTradeRule::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ResTradeRule, _impl_._cached_size_),
          false,
      },
      &ResTradeRule::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ResTradeRule_class_data_ =
        ResTradeRule::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ResTradeRule::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ResTradeRule_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ResTradeRule_class_data_.tc_table);
  return ResTradeRule_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ResTradeRule::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ResTradeRule_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ResTradeRule>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.quote.SymbolTradeRuleBean beanList = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResTradeRule, _impl_.beanlist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .lampyris.crypto.protocol.quote.SymbolTradeRuleBean beanList = 1;
    {PROTOBUF_FIELD_OFFSET(ResTradeRule, _impl_.beanlist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ResTradeRule::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ResTradeRule)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beanlist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ResTradeRule::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ResTradeRule& this_ = static_cast<const ResTradeRule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ResTradeRule::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ResTradeRule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ResTradeRule)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .lampyris.crypto.protocol.quote.SymbolTradeRuleBean beanList = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_beanlist_size());
       i < n; i++) {
    const auto& repfield = this_._internal_beanlist().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ResTradeRule)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ResTradeRule::ByteSizeLong(const MessageLite& base) {
  const ResTradeRule& this_ = static_cast<const ResTradeRule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ResTradeRule::ByteSizeLong() const {
  const ResTradeRule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ResTradeRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .lampyris.crypto.protocol.quote.SymbolTradeRuleBean beanList = 1;
    {
      total_size += 1UL * this_._internal_beanlist_size();
      for (const auto& msg : this_._internal_beanlist()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ResTradeRule::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResTradeRule*>(&to_msg);
  auto& from = static_cast<const ResTradeRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ResTradeRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beanlist()->MergeFrom(
      from._internal_beanlist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResTradeRule::CopyFrom(const ResTradeRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ResTradeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResTradeRule::InternalSwap(ResTradeRule* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.beanlist_.InternalSwap(&other->_impl_.beanlist_);
}

::google::protobuf::Metadata ResTradeRule::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SymbolTradeRuleBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SymbolTradeRuleBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_._has_bits_);
};

SymbolTradeRuleBean::SymbolTradeRuleBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SymbolTradeRuleBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
}
PROTOBUF_NDEBUG_INLINE SymbolTradeRuleBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::SymbolTradeRuleBean& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_) {}

SymbolTradeRuleBean::SymbolTradeRuleBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SymbolTradeRuleBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SymbolTradeRuleBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SymbolTradeRuleBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, maxprice_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, maxprice_),
           offsetof(Impl_, onboardtimestamp_) -
               offsetof(Impl_, maxprice_) +
               sizeof(Impl_::onboardtimestamp_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
}
PROTOBUF_NDEBUG_INLINE SymbolTradeRuleBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbol_(arena) {}

inline void SymbolTradeRuleBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, maxprice_),
           0,
           offsetof(Impl_, onboardtimestamp_) -
               offsetof(Impl_, maxprice_) +
               sizeof(Impl_::onboardtimestamp_));
}
SymbolTradeRuleBean::~SymbolTradeRuleBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
  SharedDtor(*this);
}
inline void SymbolTradeRuleBean::SharedDtor(MessageLite& self) {
  SymbolTradeRuleBean& this_ = static_cast<SymbolTradeRuleBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SymbolTradeRuleBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SymbolTradeRuleBean(arena);
}
constexpr auto SymbolTradeRuleBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SymbolTradeRuleBean),
                                            alignof(SymbolTradeRuleBean));
}
constexpr auto SymbolTradeRuleBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SymbolTradeRuleBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SymbolTradeRuleBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SymbolTradeRuleBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SymbolTradeRuleBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SymbolTradeRuleBean>(), &SymbolTradeRuleBean::ByteSizeLong,
              &SymbolTradeRuleBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_._cached_size_),
          false,
      },
      &SymbolTradeRuleBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SymbolTradeRuleBean_class_data_ =
        SymbolTradeRuleBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SymbolTradeRuleBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SymbolTradeRuleBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SymbolTradeRuleBean_class_data_.tc_table);
  return SymbolTradeRuleBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 73, 2>
SymbolTradeRuleBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SymbolTradeRuleBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.symbol_)}},
    // double maxPrice = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.maxprice_)}},
    // double minPrice = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.minprice_)}},
    // double priceTickSize = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.priceticksize_)}},
    // double maxQuantity = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 4, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.maxquantity_)}},
    // double minQuantity = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 5, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.minquantity_)}},
    // double quantityTickSize = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 6, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.quantityticksize_)}},
    // double minNotional = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 7, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.minnotional_)}},
    // int64 onBoardTimestamp = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SymbolTradeRuleBean, _impl_.onboardtimestamp_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.onboardtimestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double maxPrice = 2;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.maxprice_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double minPrice = 3;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.minprice_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double priceTickSize = 4;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.priceticksize_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double maxQuantity = 5;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.maxquantity_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double minQuantity = 6;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.minquantity_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double quantityTickSize = 7;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.quantityticksize_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double minNotional = 8;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.minnotional_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int64 onBoardTimestamp = 9;
    {PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.onboardtimestamp_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\62\6\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.SymbolTradeRuleBean"
    "symbol"
  }},
};
PROTOBUF_NOINLINE void SymbolTradeRuleBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.symbol_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x000000feu) != 0) {
    ::memset(&_impl_.maxprice_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.minnotional_) -
        reinterpret_cast<char*>(&_impl_.maxprice_)) + sizeof(_impl_.minnotional_));
  }
  _impl_.onboardtimestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SymbolTradeRuleBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SymbolTradeRuleBean& this_ = static_cast<const SymbolTradeRuleBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SymbolTradeRuleBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SymbolTradeRuleBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_symbol().empty()) {
      const std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.SymbolTradeRuleBean.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // double maxPrice = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_maxprice()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          2, this_._internal_maxprice(), target);
    }
  }

  // double minPrice = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_minprice()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_minprice(), target);
    }
  }

  // double priceTickSize = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_priceticksize()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          4, this_._internal_priceticksize(), target);
    }
  }

  // double maxQuantity = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_maxquantity()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this_._internal_maxquantity(), target);
    }
  }

  // double minQuantity = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_minquantity()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          6, this_._internal_minquantity(), target);
    }
  }

  // double quantityTickSize = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_quantityticksize()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this_._internal_quantityticksize(), target);
    }
  }

  // double minNotional = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_minnotional()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          8, this_._internal_minnotional(), target);
    }
  }

  // int64 onBoardTimestamp = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_onboardtimestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<9>(
              stream, this_._internal_onboardtimestamp(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SymbolTradeRuleBean::ByteSizeLong(const MessageLite& base) {
  const SymbolTradeRuleBean& this_ = static_cast<const SymbolTradeRuleBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SymbolTradeRuleBean::ByteSizeLong() const {
  const SymbolTradeRuleBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string symbol = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // double maxPrice = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_maxprice()) != 0) {
        total_size += 9;
      }
    }
    // double minPrice = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_minprice()) != 0) {
        total_size += 9;
      }
    }
    // double priceTickSize = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_priceticksize()) != 0) {
        total_size += 9;
      }
    }
    // double maxQuantity = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_maxquantity()) != 0) {
        total_size += 9;
      }
    }
    // double minQuantity = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_minquantity()) != 0) {
        total_size += 9;
      }
    }
    // double quantityTickSize = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_quantityticksize()) != 0) {
        total_size += 9;
      }
    }
    // double minNotional = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_minnotional()) != 0) {
        total_size += 9;
      }
    }
  }
   {
    // int64 onBoardTimestamp = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_onboardtimestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_onboardtimestamp());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SymbolTradeRuleBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SymbolTradeRuleBean*>(&to_msg);
  auto& from = static_cast<const SymbolTradeRuleBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_maxprice()) != 0) {
        _this->_impl_.maxprice_ = from._impl_.maxprice_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_minprice()) != 0) {
        _this->_impl_.minprice_ = from._impl_.minprice_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_priceticksize()) != 0) {
        _this->_impl_.priceticksize_ = from._impl_.priceticksize_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_maxquantity()) != 0) {
        _this->_impl_.maxquantity_ = from._impl_.maxquantity_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_minquantity()) != 0) {
        _this->_impl_.minquantity_ = from._impl_.minquantity_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_quantityticksize()) != 0) {
        _this->_impl_.quantityticksize_ = from._impl_.quantityticksize_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_minnotional()) != 0) {
        _this->_impl_.minnotional_ = from._impl_.minnotional_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (from._internal_onboardtimestamp() != 0) {
      _this->_impl_.onboardtimestamp_ = from._impl_.onboardtimestamp_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolTradeRuleBean::CopyFrom(const SymbolTradeRuleBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SymbolTradeRuleBean::InternalSwap(SymbolTradeRuleBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.onboardtimestamp_)
      + sizeof(SymbolTradeRuleBean::_impl_.onboardtimestamp_)
      - PROTOBUF_FIELD_OFFSET(SymbolTradeRuleBean, _impl_.maxprice_)>(
          reinterpret_cast<char*>(&_impl_.maxprice_),
          reinterpret_cast<char*>(&other->_impl_.maxprice_));
}

::google::protobuf::Metadata SymbolTradeRuleBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketMonitorNoticeListBean::_Internal {
 public:
};

MarketMonitorNoticeListBean::MarketMonitorNoticeListBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarketMonitorNoticeListBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.MarketMonitorNoticeListBean)
}
PROTOBUF_NDEBUG_INLINE MarketMonitorNoticeListBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::MarketMonitorNoticeListBean& from_msg)
      : beanlist_{visibility, arena, from.beanlist_},
        _cached_size_{0} {}

MarketMonitorNoticeListBean::MarketMonitorNoticeListBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MarketMonitorNoticeListBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarketMonitorNoticeListBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketMonitorNoticeListBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.MarketMonitorNoticeListBean)
}
PROTOBUF_NDEBUG_INLINE MarketMonitorNoticeListBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : beanlist_{visibility, arena},
        _cached_size_{0} {}

inline void MarketMonitorNoticeListBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MarketMonitorNoticeListBean::~MarketMonitorNoticeListBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.MarketMonitorNoticeListBean)
  SharedDtor(*this);
}
inline void MarketMonitorNoticeListBean::SharedDtor(MessageLite& self) {
  MarketMonitorNoticeListBean& this_ = static_cast<MarketMonitorNoticeListBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MarketMonitorNoticeListBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MarketMonitorNoticeListBean(arena);
}
constexpr auto MarketMonitorNoticeListBean::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeListBean, _impl_.beanlist_) +
          decltype(MarketMonitorNoticeListBean::_impl_.beanlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(MarketMonitorNoticeListBean), alignof(MarketMonitorNoticeListBean), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MarketMonitorNoticeListBean::PlacementNew_,
                                 sizeof(MarketMonitorNoticeListBean),
                                 alignof(MarketMonitorNoticeListBean));
  }
}
constexpr auto MarketMonitorNoticeListBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MarketMonitorNoticeListBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MarketMonitorNoticeListBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MarketMonitorNoticeListBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MarketMonitorNoticeListBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MarketMonitorNoticeListBean>(), &MarketMonitorNoticeListBean::ByteSizeLong,
              &MarketMonitorNoticeListBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeListBean, _impl_._cached_size_),
          false,
      },
      &MarketMonitorNoticeListBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MarketMonitorNoticeListBean_class_data_ =
        MarketMonitorNoticeListBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MarketMonitorNoticeListBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MarketMonitorNoticeListBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MarketMonitorNoticeListBean_class_data_.tc_table);
  return MarketMonitorNoticeListBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
MarketMonitorNoticeListBean::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MarketMonitorNoticeListBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::MarketMonitorNoticeListBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.quote.MarketMonitorNoticeBean beanList = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeListBean, _impl_.beanlist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .lampyris.crypto.protocol.quote.MarketMonitorNoticeBean beanList = 1;
    {PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeListBean, _impl_.beanlist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void MarketMonitorNoticeListBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeListBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beanlist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MarketMonitorNoticeListBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MarketMonitorNoticeListBean& this_ = static_cast<const MarketMonitorNoticeListBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MarketMonitorNoticeListBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MarketMonitorNoticeListBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeListBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .lampyris.crypto.protocol.quote.MarketMonitorNoticeBean beanList = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_beanlist_size());
       i < n; i++) {
    const auto& repfield = this_._internal_beanlist().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.MarketMonitorNoticeListBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MarketMonitorNoticeListBean::ByteSizeLong(const MessageLite& base) {
  const MarketMonitorNoticeListBean& this_ = static_cast<const MarketMonitorNoticeListBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MarketMonitorNoticeListBean::ByteSizeLong() const {
  const MarketMonitorNoticeListBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeListBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .lampyris.crypto.protocol.quote.MarketMonitorNoticeBean beanList = 1;
    {
      total_size += 1UL * this_._internal_beanlist_size();
      for (const auto& msg : this_._internal_beanlist()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MarketMonitorNoticeListBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketMonitorNoticeListBean*>(&to_msg);
  auto& from = static_cast<const MarketMonitorNoticeListBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeListBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beanlist()->MergeFrom(
      from._internal_beanlist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketMonitorNoticeListBean::CopyFrom(const MarketMonitorNoticeListBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeListBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketMonitorNoticeListBean::InternalSwap(MarketMonitorNoticeListBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.beanlist_.InternalSwap(&other->_impl_.beanlist_);
}

::google::protobuf::Metadata MarketMonitorNoticeListBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketMonitorNoticeBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketMonitorNoticeBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_._has_bits_);
};

MarketMonitorNoticeBean::MarketMonitorNoticeBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarketMonitorNoticeBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
}
PROTOBUF_NDEBUG_INLINE MarketMonitorNoticeBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_),
        value_(arena, from.value_) {}

MarketMonitorNoticeBean::MarketMonitorNoticeBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MarketMonitorNoticeBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarketMonitorNoticeBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketMonitorNoticeBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, noticelevel_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::noticelevel_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
}
PROTOBUF_NDEBUG_INLINE MarketMonitorNoticeBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbol_(arena),
        value_(arena) {}

inline void MarketMonitorNoticeBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, noticelevel_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::noticelevel_));
}
MarketMonitorNoticeBean::~MarketMonitorNoticeBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
  SharedDtor(*this);
}
inline void MarketMonitorNoticeBean::SharedDtor(MessageLite& self) {
  MarketMonitorNoticeBean& this_ = static_cast<MarketMonitorNoticeBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.value_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MarketMonitorNoticeBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MarketMonitorNoticeBean(arena);
}
constexpr auto MarketMonitorNoticeBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketMonitorNoticeBean),
                                            alignof(MarketMonitorNoticeBean));
}
constexpr auto MarketMonitorNoticeBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MarketMonitorNoticeBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MarketMonitorNoticeBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MarketMonitorNoticeBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MarketMonitorNoticeBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MarketMonitorNoticeBean>(), &MarketMonitorNoticeBean::ByteSizeLong,
              &MarketMonitorNoticeBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_._cached_size_),
          false,
      },
      &MarketMonitorNoticeBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MarketMonitorNoticeBean_class_data_ =
        MarketMonitorNoticeBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MarketMonitorNoticeBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MarketMonitorNoticeBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MarketMonitorNoticeBean_class_data_.tc_table);
  return MarketMonitorNoticeBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 74, 2>
MarketMonitorNoticeBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    MarketMonitorNoticeBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::MarketMonitorNoticeBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.symbol_)}},
    // int64 timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketMonitorNoticeBean, _impl_.timestamp_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.timestamp_)}},
    // int32 noticeType = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketMonitorNoticeBean, _impl_.noticetype_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.noticetype_)}},
    // string value = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.value_)}},
    // int32 noticeLevel = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketMonitorNoticeBean, _impl_.noticelevel_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.noticelevel_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.timestamp_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int32 noticeType = 3;
    {PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.noticetype_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string value = 4;
    {PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 noticeLevel = 5;
    {PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.noticelevel_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\66\6\0\0\5\0\0\0"
    "lampyris.crypto.protocol.quote.MarketMonitorNoticeBean"
    "symbol"
    "value"
  }},
};
PROTOBUF_NOINLINE void MarketMonitorNoticeBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.symbol_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000001cu) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.noticelevel_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.noticelevel_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MarketMonitorNoticeBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MarketMonitorNoticeBean& this_ = static_cast<const MarketMonitorNoticeBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MarketMonitorNoticeBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MarketMonitorNoticeBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_symbol().empty()) {
      const std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int64 timestamp = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_timestamp(), target);
    }
  }

  // int32 noticeType = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_noticetype() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_noticetype(), target);
    }
  }

  // string value = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_value().empty()) {
      const std::string& _s = this_._internal_value();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.value");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // int32 noticeLevel = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_noticelevel() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
              stream, this_._internal_noticelevel(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MarketMonitorNoticeBean::ByteSizeLong(const MessageLite& base) {
  const MarketMonitorNoticeBean& this_ = static_cast<const MarketMonitorNoticeBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MarketMonitorNoticeBean::ByteSizeLong() const {
  const MarketMonitorNoticeBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string symbol = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // string value = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_value().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_value());
      }
    }
    // int64 timestamp = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // int32 noticeType = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_noticetype() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_noticetype());
      }
    }
    // int32 noticeLevel = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_noticelevel() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_noticelevel());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MarketMonitorNoticeBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketMonitorNoticeBean*>(&to_msg);
  auto& from = static_cast<const MarketMonitorNoticeBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_value().empty()) {
        _this->_internal_set_value(from._internal_value());
      } else {
        if (_this->_impl_.value_.IsDefault()) {
          _this->_internal_set_value("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_noticetype() != 0) {
        _this->_impl_.noticetype_ = from._impl_.noticetype_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_noticelevel() != 0) {
        _this->_impl_.noticelevel_ = from._impl_.noticelevel_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketMonitorNoticeBean::CopyFrom(const MarketMonitorNoticeBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketMonitorNoticeBean::InternalSwap(MarketMonitorNoticeBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.noticelevel_)
      + sizeof(MarketMonitorNoticeBean::_impl_.noticelevel_)
      - PROTOBUF_FIELD_OFFSET(MarketMonitorNoticeBean, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata MarketMonitorNoticeBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SelfSelectedSymbolInfoBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SelfSelectedSymbolInfoBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_._has_bits_);
};

SelfSelectedSymbolInfoBean::SelfSelectedSymbolInfoBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SelfSelectedSymbolInfoBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
}
PROTOBUF_NDEBUG_INLINE SelfSelectedSymbolInfoBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_) {}

SelfSelectedSymbolInfoBean::SelfSelectedSymbolInfoBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SelfSelectedSymbolInfoBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SelfSelectedSymbolInfoBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SelfSelectedSymbolInfoBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, initialprice_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::initialprice_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
}
PROTOBUF_NDEBUG_INLINE SelfSelectedSymbolInfoBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbol_(arena) {}

inline void SelfSelectedSymbolInfoBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, initialprice_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::initialprice_));
}
SelfSelectedSymbolInfoBean::~SelfSelectedSymbolInfoBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
  SharedDtor(*this);
}
inline void SelfSelectedSymbolInfoBean::SharedDtor(MessageLite& self) {
  SelfSelectedSymbolInfoBean& this_ = static_cast<SelfSelectedSymbolInfoBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SelfSelectedSymbolInfoBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SelfSelectedSymbolInfoBean(arena);
}
constexpr auto SelfSelectedSymbolInfoBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SelfSelectedSymbolInfoBean),
                                            alignof(SelfSelectedSymbolInfoBean));
}
constexpr auto SelfSelectedSymbolInfoBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SelfSelectedSymbolInfoBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SelfSelectedSymbolInfoBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SelfSelectedSymbolInfoBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SelfSelectedSymbolInfoBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SelfSelectedSymbolInfoBean>(), &SelfSelectedSymbolInfoBean::ByteSizeLong,
              &SelfSelectedSymbolInfoBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_._cached_size_),
          false,
      },
      &SelfSelectedSymbolInfoBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SelfSelectedSymbolInfoBean_class_data_ =
        SelfSelectedSymbolInfoBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SelfSelectedSymbolInfoBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SelfSelectedSymbolInfoBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SelfSelectedSymbolInfoBean_class_data_.tc_table);
  return SelfSelectedSymbolInfoBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 72, 2>
SelfSelectedSymbolInfoBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SelfSelectedSymbolInfoBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_.symbol_)}},
    // int64 timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SelfSelectedSymbolInfoBean, _impl_.timestamp_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_.timestamp_)}},
    // double initialPrice = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_.initialprice_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_.symbol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // double initialPrice = 3;
    {PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_.initialprice_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\71\6\0\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean"
    "symbol"
  }},
};
PROTOBUF_NOINLINE void SelfSelectedSymbolInfoBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.symbol_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.initialprice_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.initialprice_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SelfSelectedSymbolInfoBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SelfSelectedSymbolInfoBean& this_ = static_cast<const SelfSelectedSymbolInfoBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SelfSelectedSymbolInfoBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SelfSelectedSymbolInfoBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string symbol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_symbol().empty()) {
      const std::string& _s = this_._internal_symbol();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.symbol");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int64 timestamp = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_timestamp(), target);
    }
  }

  // double initialPrice = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_initialprice()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_initialprice(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SelfSelectedSymbolInfoBean::ByteSizeLong(const MessageLite& base) {
  const SelfSelectedSymbolInfoBean& this_ = static_cast<const SelfSelectedSymbolInfoBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SelfSelectedSymbolInfoBean::ByteSizeLong() const {
  const SelfSelectedSymbolInfoBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string symbol = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_symbol().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_symbol());
      }
    }
    // int64 timestamp = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // double initialPrice = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_initialprice()) != 0) {
        total_size += 9;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SelfSelectedSymbolInfoBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SelfSelectedSymbolInfoBean*>(&to_msg);
  auto& from = static_cast<const SelfSelectedSymbolInfoBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_symbol().empty()) {
        _this->_internal_set_symbol(from._internal_symbol());
      } else {
        if (_this->_impl_.symbol_.IsDefault()) {
          _this->_internal_set_symbol("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_initialprice()) != 0) {
        _this->_impl_.initialprice_ = from._impl_.initialprice_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SelfSelectedSymbolInfoBean::CopyFrom(const SelfSelectedSymbolInfoBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SelfSelectedSymbolInfoBean::InternalSwap(SelfSelectedSymbolInfoBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_.initialprice_)
      + sizeof(SelfSelectedSymbolInfoBean::_impl_.initialprice_)
      - PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolInfoBean, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata SelfSelectedSymbolInfoBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SelfSelectedSymbolGroupBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SelfSelectedSymbolGroupBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_._has_bits_);
};

SelfSelectedSymbolGroupBean::SelfSelectedSymbolGroupBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SelfSelectedSymbolGroupBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
}
PROTOBUF_NDEBUG_INLINE SelfSelectedSymbolGroupBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbollist_{visibility, arena, from.symbollist_},
        name_(arena, from.name_) {}

SelfSelectedSymbolGroupBean::SelfSelectedSymbolGroupBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SelfSelectedSymbolGroupBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SelfSelectedSymbolGroupBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SelfSelectedSymbolGroupBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.candelete_ = from._impl_.candelete_;

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
}
PROTOBUF_NDEBUG_INLINE SelfSelectedSymbolGroupBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        symbollist_{visibility, arena},
        name_(arena) {}

inline void SelfSelectedSymbolGroupBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.candelete_ = {};
}
SelfSelectedSymbolGroupBean::~SelfSelectedSymbolGroupBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
  SharedDtor(*this);
}
inline void SelfSelectedSymbolGroupBean::SharedDtor(MessageLite& self) {
  SelfSelectedSymbolGroupBean& this_ = static_cast<SelfSelectedSymbolGroupBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SelfSelectedSymbolGroupBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SelfSelectedSymbolGroupBean(arena);
}
constexpr auto SelfSelectedSymbolGroupBean::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_.symbollist_) +
          decltype(SelfSelectedSymbolGroupBean::_impl_.symbollist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SelfSelectedSymbolGroupBean), alignof(SelfSelectedSymbolGroupBean), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SelfSelectedSymbolGroupBean::PlacementNew_,
                                 sizeof(SelfSelectedSymbolGroupBean),
                                 alignof(SelfSelectedSymbolGroupBean));
  }
}
constexpr auto SelfSelectedSymbolGroupBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SelfSelectedSymbolGroupBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SelfSelectedSymbolGroupBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SelfSelectedSymbolGroupBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SelfSelectedSymbolGroupBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SelfSelectedSymbolGroupBean>(), &SelfSelectedSymbolGroupBean::ByteSizeLong,
              &SelfSelectedSymbolGroupBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_._cached_size_),
          false,
      },
      &SelfSelectedSymbolGroupBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull SelfSelectedSymbolGroupBean_class_data_ =
        SelfSelectedSymbolGroupBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SelfSelectedSymbolGroupBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SelfSelectedSymbolGroupBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SelfSelectedSymbolGroupBean_class_data_.tc_table);
  return SelfSelectedSymbolGroupBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 71, 2>
SelfSelectedSymbolGroupBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SelfSelectedSymbolGroupBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_.name_)}},
    // bool canDelete = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SelfSelectedSymbolGroupBean, _impl_.candelete_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_.candelete_)}},
    // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean symbolList = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_.symbollist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool canDelete = 2;
    {PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_.candelete_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean symbolList = 3;
    {PROTOBUF_FIELD_OFFSET(SelfSelectedSymbolGroupBean, _impl_.symbollist_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>()},
  }},
  {{
    "\72\4\0\0\0\0\0\0"
    "lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean"
    "name"
  }},
};
PROTOBUF_NOINLINE void SelfSelectedSymbolGroupBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbollist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.candelete_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SelfSelectedSymbolGroupBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SelfSelectedSymbolGroupBean& this_ = static_cast<const SelfSelectedSymbolGroupBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SelfSelectedSymbolGroupBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SelfSelectedSymbolGroupBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // bool canDelete = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_candelete() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_candelete(), target);
    }
  }

  // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean symbolList = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_symbollist_size());
       i < n; i++) {
    const auto& repfield = this_._internal_symbollist().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SelfSelectedSymbolGroupBean::ByteSizeLong(const MessageLite& base) {
  const SelfSelectedSymbolGroupBean& this_ = static_cast<const SelfSelectedSymbolGroupBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SelfSelectedSymbolGroupBean::ByteSizeLong() const {
  const SelfSelectedSymbolGroupBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean symbolList = 3;
    {
      total_size += 1UL * this_._internal_symbollist_size();
      for (const auto& msg : this_._internal_symbollist()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // bool canDelete = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_candelete() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SelfSelectedSymbolGroupBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SelfSelectedSymbolGroupBean*>(&to_msg);
  auto& from = static_cast<const SelfSelectedSymbolGroupBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_symbollist()->MergeFrom(
      from._internal_symbollist());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_candelete() != 0) {
        _this->_impl_.candelete_ = from._impl_.candelete_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SelfSelectedSymbolGroupBean::CopyFrom(const SelfSelectedSymbolGroupBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SelfSelectedSymbolGroupBean::InternalSwap(SelfSelectedSymbolGroupBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.symbollist_.InternalSwap(&other->_impl_.symbollist_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.candelete_, other->_impl_.candelete_);
}

::google::protobuf::Metadata SelfSelectedSymbolGroupBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqSelfSelectedSymbol::_Internal {
 public:
};

ReqSelfSelectedSymbol::ReqSelfSelectedSymbol(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqSelfSelectedSymbol_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
}
PROTOBUF_NDEBUG_INLINE ReqSelfSelectedSymbol::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ReqSelfSelectedSymbol& from_msg)
      : grouplist_{visibility, arena, from.grouplist_},
        _cached_size_{0} {}

ReqSelfSelectedSymbol::ReqSelfSelectedSymbol(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ReqSelfSelectedSymbol& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReqSelfSelectedSymbol_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqSelfSelectedSymbol* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
}
PROTOBUF_NDEBUG_INLINE ReqSelfSelectedSymbol::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : grouplist_{visibility, arena},
        _cached_size_{0} {}

inline void ReqSelfSelectedSymbol::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReqSelfSelectedSymbol::~ReqSelfSelectedSymbol() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
  SharedDtor(*this);
}
inline void ReqSelfSelectedSymbol::SharedDtor(MessageLite& self) {
  ReqSelfSelectedSymbol& this_ = static_cast<ReqSelfSelectedSymbol&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ReqSelfSelectedSymbol::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ReqSelfSelectedSymbol(arena);
}
constexpr auto ReqSelfSelectedSymbol::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ReqSelfSelectedSymbol, _impl_.grouplist_) +
          decltype(ReqSelfSelectedSymbol::_impl_.grouplist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ReqSelfSelectedSymbol), alignof(ReqSelfSelectedSymbol), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ReqSelfSelectedSymbol::PlacementNew_,
                                 sizeof(ReqSelfSelectedSymbol),
                                 alignof(ReqSelfSelectedSymbol));
  }
}
constexpr auto ReqSelfSelectedSymbol::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ReqSelfSelectedSymbol_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ReqSelfSelectedSymbol::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ReqSelfSelectedSymbol>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ReqSelfSelectedSymbol::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ReqSelfSelectedSymbol>(), &ReqSelfSelectedSymbol::ByteSizeLong,
              &ReqSelfSelectedSymbol::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ReqSelfSelectedSymbol, _impl_._cached_size_),
          false,
      },
      &ReqSelfSelectedSymbol::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ReqSelfSelectedSymbol_class_data_ =
        ReqSelfSelectedSymbol::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ReqSelfSelectedSymbol::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ReqSelfSelectedSymbol_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ReqSelfSelectedSymbol_class_data_.tc_table);
  return ReqSelfSelectedSymbol_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ReqSelfSelectedSymbol::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ReqSelfSelectedSymbol_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ReqSelfSelectedSymbol>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean groupList = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqSelfSelectedSymbol, _impl_.grouplist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean groupList = 1;
    {PROTOBUF_FIELD_OFFSET(ReqSelfSelectedSymbol, _impl_.grouplist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ReqSelfSelectedSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grouplist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ReqSelfSelectedSymbol::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ReqSelfSelectedSymbol& this_ = static_cast<const ReqSelfSelectedSymbol&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ReqSelfSelectedSymbol::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ReqSelfSelectedSymbol& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean groupList = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_grouplist_size());
       i < n; i++) {
    const auto& repfield = this_._internal_grouplist().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ReqSelfSelectedSymbol::ByteSizeLong(const MessageLite& base) {
  const ReqSelfSelectedSymbol& this_ = static_cast<const ReqSelfSelectedSymbol&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ReqSelfSelectedSymbol::ByteSizeLong() const {
  const ReqSelfSelectedSymbol& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean groupList = 1;
    {
      total_size += 1UL * this_._internal_grouplist_size();
      for (const auto& msg : this_._internal_grouplist()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ReqSelfSelectedSymbol::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqSelfSelectedSymbol*>(&to_msg);
  auto& from = static_cast<const ReqSelfSelectedSymbol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_grouplist()->MergeFrom(
      from._internal_grouplist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSelfSelectedSymbol::CopyFrom(const ReqSelfSelectedSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqSelfSelectedSymbol::InternalSwap(ReqSelfSelectedSymbol* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.grouplist_.InternalSwap(&other->_impl_.grouplist_);
}

::google::protobuf::Metadata ReqSelfSelectedSymbol::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResSelfSelectedSymbol::_Internal {
 public:
};

ResSelfSelectedSymbol::ResSelfSelectedSymbol(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResSelfSelectedSymbol_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
}
PROTOBUF_NDEBUG_INLINE ResSelfSelectedSymbol::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ResSelfSelectedSymbol& from_msg)
      : grouplist_{visibility, arena, from.grouplist_},
        _cached_size_{0} {}

ResSelfSelectedSymbol::ResSelfSelectedSymbol(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ResSelfSelectedSymbol& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResSelfSelectedSymbol_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResSelfSelectedSymbol* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
}
PROTOBUF_NDEBUG_INLINE ResSelfSelectedSymbol::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : grouplist_{visibility, arena},
        _cached_size_{0} {}

inline void ResSelfSelectedSymbol::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ResSelfSelectedSymbol::~ResSelfSelectedSymbol() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
  SharedDtor(*this);
}
inline void ResSelfSelectedSymbol::SharedDtor(MessageLite& self) {
  ResSelfSelectedSymbol& this_ = static_cast<ResSelfSelectedSymbol&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ResSelfSelectedSymbol::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ResSelfSelectedSymbol(arena);
}
constexpr auto ResSelfSelectedSymbol::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResSelfSelectedSymbol, _impl_.grouplist_) +
          decltype(ResSelfSelectedSymbol::_impl_.grouplist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ResSelfSelectedSymbol), alignof(ResSelfSelectedSymbol), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResSelfSelectedSymbol::PlacementNew_,
                                 sizeof(ResSelfSelectedSymbol),
                                 alignof(ResSelfSelectedSymbol));
  }
}
constexpr auto ResSelfSelectedSymbol::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ResSelfSelectedSymbol_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ResSelfSelectedSymbol::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ResSelfSelectedSymbol>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ResSelfSelectedSymbol::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ResSelfSelectedSymbol>(), &ResSelfSelectedSymbol::ByteSizeLong,
              &ResSelfSelectedSymbol::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ResSelfSelectedSymbol, _impl_._cached_size_),
          false,
      },
      &ResSelfSelectedSymbol::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ResSelfSelectedSymbol_class_data_ =
        ResSelfSelectedSymbol::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ResSelfSelectedSymbol::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ResSelfSelectedSymbol_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ResSelfSelectedSymbol_class_data_.tc_table);
  return ResSelfSelectedSymbol_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ResSelfSelectedSymbol::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ResSelfSelectedSymbol_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ResSelfSelectedSymbol>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean groupList = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResSelfSelectedSymbol, _impl_.grouplist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean groupList = 1;
    {PROTOBUF_FIELD_OFFSET(ResSelfSelectedSymbol, _impl_.grouplist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ResSelfSelectedSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grouplist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ResSelfSelectedSymbol::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ResSelfSelectedSymbol& this_ = static_cast<const ResSelfSelectedSymbol&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ResSelfSelectedSymbol::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ResSelfSelectedSymbol& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean groupList = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_grouplist_size());
       i < n; i++) {
    const auto& repfield = this_._internal_grouplist().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ResSelfSelectedSymbol::ByteSizeLong(const MessageLite& base) {
  const ResSelfSelectedSymbol& this_ = static_cast<const ResSelfSelectedSymbol&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ResSelfSelectedSymbol::ByteSizeLong() const {
  const ResSelfSelectedSymbol& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean groupList = 1;
    {
      total_size += 1UL * this_._internal_grouplist_size();
      for (const auto& msg : this_._internal_grouplist()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ResSelfSelectedSymbol::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResSelfSelectedSymbol*>(&to_msg);
  auto& from = static_cast<const ResSelfSelectedSymbol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_grouplist()->MergeFrom(
      from._internal_grouplist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResSelfSelectedSymbol::CopyFrom(const ResSelfSelectedSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResSelfSelectedSymbol::InternalSwap(ResSelfSelectedSymbol* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.grouplist_.InternalSwap(&other->_impl_.grouplist_);
}

::google::protobuf::Metadata ResSelfSelectedSymbol::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketPreviewIntervalDataBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketPreviewIntervalDataBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_._has_bits_);
};

MarketPreviewIntervalDataBean::MarketPreviewIntervalDataBean(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarketPreviewIntervalDataBean_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean)
}
MarketPreviewIntervalDataBean::MarketPreviewIntervalDataBean(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MarketPreviewIntervalDataBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MarketPreviewIntervalDataBean_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE MarketPreviewIntervalDataBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void MarketPreviewIntervalDataBean::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lowerboundperc_),
           0,
           offsetof(Impl_, count_) -
               offsetof(Impl_, lowerboundperc_) +
               sizeof(Impl_::count_));
}
MarketPreviewIntervalDataBean::~MarketPreviewIntervalDataBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean)
  SharedDtor(*this);
}
inline void MarketPreviewIntervalDataBean::SharedDtor(MessageLite& self) {
  MarketPreviewIntervalDataBean& this_ = static_cast<MarketPreviewIntervalDataBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MarketPreviewIntervalDataBean::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MarketPreviewIntervalDataBean(arena);
}
constexpr auto MarketPreviewIntervalDataBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MarketPreviewIntervalDataBean),
                                            alignof(MarketPreviewIntervalDataBean));
}
constexpr auto MarketPreviewIntervalDataBean::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MarketPreviewIntervalDataBean_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MarketPreviewIntervalDataBean::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MarketPreviewIntervalDataBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MarketPreviewIntervalDataBean::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MarketPreviewIntervalDataBean>(), &MarketPreviewIntervalDataBean::ByteSizeLong,
              &MarketPreviewIntervalDataBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_._cached_size_),
          false,
      },
      &MarketPreviewIntervalDataBean::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MarketPreviewIntervalDataBean_class_data_ =
        MarketPreviewIntervalDataBean::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MarketPreviewIntervalDataBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MarketPreviewIntervalDataBean_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MarketPreviewIntervalDataBean_class_data_.tc_table);
  return MarketPreviewIntervalDataBean_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
MarketPreviewIntervalDataBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    MarketPreviewIntervalDataBean_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::MarketPreviewIntervalDataBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 lowerBoundPerc = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketPreviewIntervalDataBean, _impl_.lowerboundperc_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_.lowerboundperc_)}},
    // int32 upperBoundPerc = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketPreviewIntervalDataBean, _impl_.upperboundperc_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_.upperboundperc_)}},
    // int32 count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketPreviewIntervalDataBean, _impl_.count_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_.count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 lowerBoundPerc = 1;
    {PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_.lowerboundperc_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 upperBoundPerc = 2;
    {PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_.upperboundperc_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 count = 3;
    {PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_.count_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void MarketPreviewIntervalDataBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.lowerboundperc_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.lowerboundperc_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MarketPreviewIntervalDataBean::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MarketPreviewIntervalDataBean& this_ = static_cast<const MarketPreviewIntervalDataBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MarketPreviewIntervalDataBean::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MarketPreviewIntervalDataBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 lowerBoundPerc = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_lowerboundperc() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_lowerboundperc(), target);
    }
  }

  // int32 upperBoundPerc = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_upperboundperc() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_upperboundperc(), target);
    }
  }

  // int32 count = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_count(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MarketPreviewIntervalDataBean::ByteSizeLong(const MessageLite& base) {
  const MarketPreviewIntervalDataBean& this_ = static_cast<const MarketPreviewIntervalDataBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MarketPreviewIntervalDataBean::ByteSizeLong() const {
  const MarketPreviewIntervalDataBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // int32 lowerBoundPerc = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_lowerboundperc() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_lowerboundperc());
      }
    }
    // int32 upperBoundPerc = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_upperboundperc() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_upperboundperc());
      }
    }
    // int32 count = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_count());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MarketPreviewIntervalDataBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketPreviewIntervalDataBean*>(&to_msg);
  auto& from = static_cast<const MarketPreviewIntervalDataBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_lowerboundperc() != 0) {
        _this->_impl_.lowerboundperc_ = from._impl_.lowerboundperc_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_upperboundperc() != 0) {
        _this->_impl_.upperboundperc_ = from._impl_.upperboundperc_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_count() != 0) {
        _this->_impl_.count_ = from._impl_.count_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketPreviewIntervalDataBean::CopyFrom(const MarketPreviewIntervalDataBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketPreviewIntervalDataBean::InternalSwap(MarketPreviewIntervalDataBean* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_.count_)
      + sizeof(MarketPreviewIntervalDataBean::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(MarketPreviewIntervalDataBean, _impl_.lowerboundperc_)>(
          reinterpret_cast<char*>(&_impl_.lowerboundperc_),
          reinterpret_cast<char*>(&other->_impl_.lowerboundperc_));
}

::google::protobuf::Metadata MarketPreviewIntervalDataBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResMarketPreviewData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ResMarketPreviewData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_._has_bits_);
};

ResMarketPreviewData::ResMarketPreviewData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResMarketPreviewData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.quote.ResMarketPreviewData)
}
PROTOBUF_NDEBUG_INLINE ResMarketPreviewData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::lampyris::crypto::protocol::quote::ResMarketPreviewData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        intervaldatalist_{visibility, arena, from.intervaldatalist_} {}

ResMarketPreviewData::ResMarketPreviewData(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ResMarketPreviewData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ResMarketPreviewData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResMarketPreviewData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, risecount_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, risecount_),
           offsetof(Impl_, fallcount_) -
               offsetof(Impl_, risecount_) +
               sizeof(Impl_::fallcount_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.quote.ResMarketPreviewData)
}
PROTOBUF_NDEBUG_INLINE ResMarketPreviewData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        intervaldatalist_{visibility, arena} {}

inline void ResMarketPreviewData::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, risecount_),
           0,
           offsetof(Impl_, fallcount_) -
               offsetof(Impl_, risecount_) +
               sizeof(Impl_::fallcount_));
}
ResMarketPreviewData::~ResMarketPreviewData() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.quote.ResMarketPreviewData)
  SharedDtor(*this);
}
inline void ResMarketPreviewData::SharedDtor(MessageLite& self) {
  ResMarketPreviewData& this_ = static_cast<ResMarketPreviewData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ResMarketPreviewData::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ResMarketPreviewData(arena);
}
constexpr auto ResMarketPreviewData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.intervaldatalist_) +
          decltype(ResMarketPreviewData::_impl_.intervaldatalist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ResMarketPreviewData), alignof(ResMarketPreviewData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResMarketPreviewData::PlacementNew_,
                                 sizeof(ResMarketPreviewData),
                                 alignof(ResMarketPreviewData));
  }
}
constexpr auto ResMarketPreviewData::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ResMarketPreviewData_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ResMarketPreviewData::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ResMarketPreviewData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ResMarketPreviewData::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ResMarketPreviewData>(), &ResMarketPreviewData::ByteSizeLong,
              &ResMarketPreviewData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_._cached_size_),
          false,
      },
      &ResMarketPreviewData::kDescriptorMethods,
      &descriptor_table_quote_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ResMarketPreviewData_class_data_ =
        ResMarketPreviewData::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ResMarketPreviewData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ResMarketPreviewData_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ResMarketPreviewData_class_data_.tc_table);
  return ResMarketPreviewData_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 0, 2>
ResMarketPreviewData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ResMarketPreviewData_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::ResMarketPreviewData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double mainstreamAvgPerc = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 5, 0, PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.mainstreamavgperc_)}},
    // int32 riseCount = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResMarketPreviewData, _impl_.risecount_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.risecount_)}},
    // int32 flatCount = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResMarketPreviewData, _impl_.flatcount_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.flatcount_)}},
    // int32 fallCount = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ResMarketPreviewData, _impl_.fallcount_), 6>(),
     {24, 6, 0, PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.fallcount_)}},
    // repeated .lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean intervalDataList = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.intervaldatalist_)}},
    // double topGainerAvgPerc = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 2, 0, PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.topgaineravgperc_)}},
    // double bottomGainerAvgPerc = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 3, 0, PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.bottomgaineravgperc_)}},
    // double avgPerc = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 4, 0, PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.avgperc_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 riseCount = 1;
    {PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.risecount_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 flatCount = 2;
    {PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.flatcount_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 fallCount = 3;
    {PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.fallcount_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean intervalDataList = 4;
    {PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.intervaldatalist_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // double topGainerAvgPerc = 5;
    {PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.topgaineravgperc_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double bottomGainerAvgPerc = 6;
    {PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.bottomgaineravgperc_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double avgPerc = 7;
    {PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.avgperc_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double mainstreamAvgPerc = 8;
    {PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.mainstreamavgperc_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::quote::MarketPreviewIntervalDataBean>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ResMarketPreviewData::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.quote.ResMarketPreviewData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intervaldatalist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    ::memset(&_impl_.risecount_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fallcount_) -
        reinterpret_cast<char*>(&_impl_.risecount_)) + sizeof(_impl_.fallcount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ResMarketPreviewData::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ResMarketPreviewData& this_ = static_cast<const ResMarketPreviewData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ResMarketPreviewData::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ResMarketPreviewData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.quote.ResMarketPreviewData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 riseCount = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_risecount() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_risecount(), target);
    }
  }

  // int32 flatCount = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_flatcount() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_flatcount(), target);
    }
  }

  // int32 fallCount = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_fallcount() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_fallcount(), target);
    }
  }

  // repeated .lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean intervalDataList = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_intervaldatalist_size());
       i < n; i++) {
    const auto& repfield = this_._internal_intervaldatalist().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // double topGainerAvgPerc = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_topgaineravgperc()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this_._internal_topgaineravgperc(), target);
    }
  }

  // double bottomGainerAvgPerc = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_bottomgaineravgperc()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          6, this_._internal_bottomgaineravgperc(), target);
    }
  }

  // double avgPerc = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_avgperc()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this_._internal_avgperc(), target);
    }
  }

  // double mainstreamAvgPerc = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_mainstreamavgperc()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          8, this_._internal_mainstreamavgperc(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.quote.ResMarketPreviewData)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ResMarketPreviewData::ByteSizeLong(const MessageLite& base) {
  const ResMarketPreviewData& this_ = static_cast<const ResMarketPreviewData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ResMarketPreviewData::ByteSizeLong() const {
  const ResMarketPreviewData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.quote.ResMarketPreviewData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .lampyris.crypto.protocol.quote.MarketPreviewIntervalDataBean intervalDataList = 4;
    {
      total_size += 1UL * this_._internal_intervaldatalist_size();
      for (const auto& msg : this_._internal_intervaldatalist()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // int32 riseCount = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_risecount() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_risecount());
      }
    }
    // int32 flatCount = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_flatcount() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_flatcount());
      }
    }
    // double topGainerAvgPerc = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_topgaineravgperc()) != 0) {
        total_size += 9;
      }
    }
    // double bottomGainerAvgPerc = 6;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_bottomgaineravgperc()) != 0) {
        total_size += 9;
      }
    }
    // double avgPerc = 7;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_avgperc()) != 0) {
        total_size += 9;
      }
    }
    // double mainstreamAvgPerc = 8;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_mainstreamavgperc()) != 0) {
        total_size += 9;
      }
    }
    // int32 fallCount = 3;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_fallcount() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_fallcount());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ResMarketPreviewData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResMarketPreviewData*>(&to_msg);
  auto& from = static_cast<const ResMarketPreviewData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.quote.ResMarketPreviewData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_intervaldatalist()->MergeFrom(
      from._internal_intervaldatalist());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_risecount() != 0) {
        _this->_impl_.risecount_ = from._impl_.risecount_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_flatcount() != 0) {
        _this->_impl_.flatcount_ = from._impl_.flatcount_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_topgaineravgperc()) != 0) {
        _this->_impl_.topgaineravgperc_ = from._impl_.topgaineravgperc_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_bottomgaineravgperc()) != 0) {
        _this->_impl_.bottomgaineravgperc_ = from._impl_.bottomgaineravgperc_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_avgperc()) != 0) {
        _this->_impl_.avgperc_ = from._impl_.avgperc_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_mainstreamavgperc()) != 0) {
        _this->_impl_.mainstreamavgperc_ = from._impl_.mainstreamavgperc_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_fallcount() != 0) {
        _this->_impl_.fallcount_ = from._impl_.fallcount_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResMarketPreviewData::CopyFrom(const ResMarketPreviewData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.quote.ResMarketPreviewData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResMarketPreviewData::InternalSwap(ResMarketPreviewData* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.intervaldatalist_.InternalSwap(&other->_impl_.intervaldatalist_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.fallcount_)
      + sizeof(ResMarketPreviewData::_impl_.fallcount_)
      - PROTOBUF_FIELD_OFFSET(ResMarketPreviewData, _impl_.risecount_)>(
          reinterpret_cast<char*>(&_impl_.risecount_),
          reinterpret_cast<char*>(&other->_impl_.risecount_));
}

::google::protobuf::Metadata ResMarketPreviewData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace quote
}  // namespace protocol
}  // namespace crypto
}  // namespace lampyris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_quote_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
