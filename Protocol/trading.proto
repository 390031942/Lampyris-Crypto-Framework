syntax = "proto3";

package lampyris.crypto.protocol.trading;

enum OrderType {
    LIMIT = 0;       // 限价单
    MARKET = 1;      // 市价单
    STOP_LOSS = 2;   // 止损单
    TAKE_PROFIT = 3; // 止盈单
    STOP_LOSS_MARKET = 4;   // 止损市价单
    TAKE_PROFIT_MARKET = 5; // 止盈市价单
    TRAILING_STOP_MARKET = 6; // 跟踪止损单
}

enum OrderStatus {
    NEW = 0; // 新建订单
    PARTIALLY_FILLED = 1; // 部分成交
    FILLED = 2; // 全部成交
    CANCELED = 3; // 已撤销
    REJECTED = 4; // 被拒绝
    EXPIRED = 5; // 订单过期(根据timeInForce参数规则)
    EXPIRED_IN_MATCH = 6; // 订单被STP过期(STP 是一种防止自成交（Self-Trade）的机制，主要用于避免同一个账户的订单在市场中互相成交)
}

enum TimeInForceType {
    GTC = 0; // Good Till Cancel 成交为止（下单后仅有1年有效期，1年后自动取消）
    IOC = 1; // Immediate or Cancel 无法立即成交(吃单)的部分就撤销
    FOK = 2; // Fill or Kill 无法全部立即成交就撤销
    GTX = 3; // Good Till Crossing 无法成为挂单方就撤销
    GTD = 4; // Good Till Date 在特定时间之前有效，到期自动撤销
}

enum OrderSide {
    BUY = 0;
    SELL = 1;
}

enum PositionSide {
    LONG = 0;
    SHORT = 1;
}

// 条件单触发类型
enum ConditionOrderTriggerType {
    PRICE = 0; // 到达指定价格
    RISE_SPEED = 1; // 涨速(%)
    INTERVAL = 2; // 间隔时间(int64时间戳)
}

// 条件单触发数据
message ConditionTriggerBean {
    ConditionOrderTriggerType type = 1;
    string value = 2; // 取值，需要转为字符串
}

message OrderBean {
    string symbol = 1;          // 交易对，例如 BTCUSDT
    OrderSide side = 2;         // 订单方向
    OrderType orderType = 3;    // 订单类型
    double quantity = 4;        // 订单数量（以标的为单位）
    double cashQuantity = 5;    // 订单数量（以USDT为单位）
    double price = 6;           // 订单价格（限价单需要）
    TimeInForceType tifType = 7; // 订单有效方式
    int64 goodTillDate = 8;      // TIF为GTD时订单的自动取消时间
    bool reduceOnly = 9;         // 是否只减仓
    repeated ConditionTriggerBean condition = 10; // 条件列表
    int64 createdTime = 11;      // 创建时间
    PositionSide positionSide = 12;      // 持仓方向
}

// 订单状态，可包含在Res协议中，也可以单独推送给客户端
message OrderStatusBean {
    OrderBean orderBean = 1;    // 订单基本信息
    int64  orderId = 2;         // 订单ID
    OrderStatus status = 3;     // 订单状态
    double filledQuantity = 4;  // 已成交数量
    double avgFilledPrice = 5;  // 成交均价
}

// 请求-下单
message ReqPlaceOrder {
    OrderBean orderBean = 1;
}

// 请求-修改订单
message ReqModifyOrder {
    int64 orderId = 1; // 订单 ID
    OrderBean orderBean = 2;
}

// 请求-撤单
message ReqCancelOrder {
    int64 orderId = 1;  // 订单 ID
}

// 请求-一键清仓
message ReqOneKeyClosePosition {
    repeated string symbols = 1; // 交易对列表   
}

// 请求-查询生效的订单
message ReqQueryActiveOrders {
    string symbol = 1; // 交易对(可选)   
}

// 响应-查询订单
message ResQueryOrders {
    bool   isActive = 1; // 是否是生效的订单  
    repeated OrderStatusBean beanList = 2; // 订单状态列表 
}

// 请求-查询历史订单
message ReqQueryHistoricalOrders {
    string symbol = 1; // 交易对(可选)   
    int64 beginTime = 2; // 开始时间(可选)
    int64 endTime = 3; // 结束时间(可选)
}

// 请求-查询当前持仓
message ReqQueryPositions {
    string symbol = 1; // 交易对(可选)   
}

// 持仓信息
message PositionBean {
    string symbol = 1;   // 交易对，例如 BTCUSDT
    PositionSide positionSide = 2; // 持仓方向，long 或 short
    double quantity = 3; // 持仓数量
    double unrealizedPnL = 4; // 持仓未实现盈亏
    double realizedPnL = 5; // 持仓已实现盈亏
    double initialMargin = 6; // 持仓的初始保证金
    double maintenanceMargin = 7;  // 持仓的维持保证金
    double costPrice = 8; // 持仓的开仓价格
    double markPrice = 9; // 当前标记价格
    int32 autoDeleveragingLevel = 10; // 持仓被自动减仓 队列
    double liquidationPrice = 11; // 强平价格
    int64 updateTime = 12; // 持仓的更新时间
}

// 响应-查询当前持仓
message ResQueryPositions {
    repeated PositionBean beanList = 1; // 持仓列表
}

// 杠杆倍数信息
message LeverageBean {
    string symbol = 1; // 交易对
    int32 leverage = 2; // 杠杆倍数
    double maxNotional = 3; // 最多可开仓名义价值
}

// 请求-批量设置杠杆倍数
message ReqSetLeverage {
    repeated LeverageBean beanList = 1;
}

// 请求-查询杠杆倍数
message ReqQueryLeverage {
    string symbol = 1; // 交易对(若为空，则返回全部symbol的 LeverageBean)
}

// 响应-杠杆倍数信息
message ResQueryLeverage {
    repeated LeverageBean beanList = 1;
}

// 请求-查询杠杆分层
message ReqQueryLeverageBracket {
    string symbol = 1; // 交易对(若为空，则返回全部symbol的 SymbolLeverageBracketBean)
} 

// 响应-查询杠杆分层
message ResQueryLeverageBracket {
    repeated SymbolLeverageBracketBean beanList = 1;
}

// 某symbol的全部杠杆分层信息
message SymbolLeverageBracketBean {
    repeated LeverageBracketBean beanList = 1;
}

// 某symbol的某个杠杆分层信息
message LeverageBracketBean {
    int32 leverage = 1; // 当前分层下的最大杠杆倍数
    double notionalCap = 2; // 当前分层下的名义价值上限
    double notionalFloor = 3; // 当前分层下的名义价值下限
}