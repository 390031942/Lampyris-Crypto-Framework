// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: quote.proto
// Protobuf C++ Version: 5.29.4

#ifndef quote_2eproto_2epb_2eh
#define quote_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_quote_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_quote_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_quote_2eproto;
namespace lampyris {
namespace crypto {
namespace protocol {
namespace quote {
class CandlestickBean;
struct CandlestickBeanDefaultTypeInternal;
extern CandlestickBeanDefaultTypeInternal _CandlestickBean_default_instance_;
class CandlestickUpdateBean;
struct CandlestickUpdateBeanDefaultTypeInternal;
extern CandlestickUpdateBeanDefaultTypeInternal _CandlestickUpdateBean_default_instance_;
class MarketMonitorNoticeBean;
struct MarketMonitorNoticeBeanDefaultTypeInternal;
extern MarketMonitorNoticeBeanDefaultTypeInternal _MarketMonitorNoticeBean_default_instance_;
class ReqCandlestickQuery;
struct ReqCandlestickQueryDefaultTypeInternal;
extern ReqCandlestickQueryDefaultTypeInternal _ReqCandlestickQuery_default_instance_;
class ReqSelfSelectedSymbol;
struct ReqSelfSelectedSymbolDefaultTypeInternal;
extern ReqSelfSelectedSymbolDefaultTypeInternal _ReqSelfSelectedSymbol_default_instance_;
class ReqSubscribeCandlestickUpdate;
struct ReqSubscribeCandlestickUpdateDefaultTypeInternal;
extern ReqSubscribeCandlestickUpdateDefaultTypeInternal _ReqSubscribeCandlestickUpdate_default_instance_;
class ReqSubscribeTickerData;
struct ReqSubscribeTickerDataDefaultTypeInternal;
extern ReqSubscribeTickerDataDefaultTypeInternal _ReqSubscribeTickerData_default_instance_;
class ReqSubscribeTradeData;
struct ReqSubscribeTradeDataDefaultTypeInternal;
extern ReqSubscribeTradeDataDefaultTypeInternal _ReqSubscribeTradeData_default_instance_;
class ReqTradeRule;
struct ReqTradeRuleDefaultTypeInternal;
extern ReqTradeRuleDefaultTypeInternal _ReqTradeRule_default_instance_;
class ResCandlestickQuery;
struct ResCandlestickQueryDefaultTypeInternal;
extern ResCandlestickQueryDefaultTypeInternal _ResCandlestickQuery_default_instance_;
class ResSelfSelectedSymbol;
struct ResSelfSelectedSymbolDefaultTypeInternal;
extern ResSelfSelectedSymbolDefaultTypeInternal _ResSelfSelectedSymbol_default_instance_;
class ResSubscribeTickerData;
struct ResSubscribeTickerDataDefaultTypeInternal;
extern ResSubscribeTickerDataDefaultTypeInternal _ResSubscribeTickerData_default_instance_;
class SelfSelectedSymbolGroupBean;
struct SelfSelectedSymbolGroupBeanDefaultTypeInternal;
extern SelfSelectedSymbolGroupBeanDefaultTypeInternal _SelfSelectedSymbolGroupBean_default_instance_;
class SelfSelectedSymbolInfoBean;
struct SelfSelectedSymbolInfoBeanDefaultTypeInternal;
extern SelfSelectedSymbolInfoBeanDefaultTypeInternal _SelfSelectedSymbolInfoBean_default_instance_;
class SymbolTickerDataBean;
struct SymbolTickerDataBeanDefaultTypeInternal;
extern SymbolTickerDataBeanDefaultTypeInternal _SymbolTickerDataBean_default_instance_;
class SymbolTradeDataBean;
struct SymbolTradeDataBeanDefaultTypeInternal;
extern SymbolTradeDataBeanDefaultTypeInternal _SymbolTradeDataBean_default_instance_;
class SymbolTradeRuleBean;
struct SymbolTradeRuleBeanDefaultTypeInternal;
extern SymbolTradeRuleBeanDefaultTypeInternal _SymbolTradeRuleBean_default_instance_;
class TradeDataBean;
struct TradeDataBeanDefaultTypeInternal;
extern TradeDataBeanDefaultTypeInternal _TradeDataBean_default_instance_;
}  // namespace quote
}  // namespace protocol
}  // namespace crypto
}  // namespace lampyris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace lampyris {
namespace crypto {
namespace protocol {
namespace quote {
enum SymbolTickerDataSortType : int {
  NONE = 0,
  PRICE = 1,
  CURRENCY = 2,
  PERCENTAGE = 3,
  FUNDING_RATE = 4,
  FUNDING_LEFT_TIME = 5,
  SymbolTickerDataSortType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SymbolTickerDataSortType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SymbolTickerDataSortType_IsValid(int value);
extern const uint32_t SymbolTickerDataSortType_internal_data_[];
constexpr SymbolTickerDataSortType SymbolTickerDataSortType_MIN = static_cast<SymbolTickerDataSortType>(0);
constexpr SymbolTickerDataSortType SymbolTickerDataSortType_MAX = static_cast<SymbolTickerDataSortType>(5);
constexpr int SymbolTickerDataSortType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
SymbolTickerDataSortType_descriptor();
template <typename T>
const std::string& SymbolTickerDataSortType_Name(T value) {
  static_assert(std::is_same<T, SymbolTickerDataSortType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SymbolTickerDataSortType_Name().");
  return SymbolTickerDataSortType_Name(static_cast<SymbolTickerDataSortType>(value));
}
template <>
inline const std::string& SymbolTickerDataSortType_Name(SymbolTickerDataSortType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SymbolTickerDataSortType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool SymbolTickerDataSortType_Parse(absl::string_view name, SymbolTickerDataSortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SymbolTickerDataSortType>(
      SymbolTickerDataSortType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TradeDataBean final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.TradeDataBean) */ {
 public:
  inline TradeDataBean() : TradeDataBean(nullptr) {}
  ~TradeDataBean() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TradeDataBean* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TradeDataBean));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TradeDataBean(
      ::google::protobuf::internal::ConstantInitialized);

  inline TradeDataBean(const TradeDataBean& from) : TradeDataBean(nullptr, from) {}
  inline TradeDataBean(TradeDataBean&& from) noexcept
      : TradeDataBean(nullptr, std::move(from)) {}
  inline TradeDataBean& operator=(const TradeDataBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeDataBean& operator=(TradeDataBean&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeDataBean& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeDataBean* internal_default_instance() {
    return reinterpret_cast<const TradeDataBean*>(
        &_TradeDataBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TradeDataBean& a, TradeDataBean& b) { a.Swap(&b); }
  inline void Swap(TradeDataBean* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeDataBean* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeDataBean* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TradeDataBean>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradeDataBean& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TradeDataBean& from) { TradeDataBean::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TradeDataBean* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.TradeDataBean"; }

 protected:
  explicit TradeDataBean(::google::protobuf::Arena* arena);
  TradeDataBean(::google::protobuf::Arena* arena, const TradeDataBean& from);
  TradeDataBean(::google::protobuf::Arena* arena, TradeDataBean&& from) noexcept
      : TradeDataBean(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kPriceFieldNumber = 3,
    kVolumeFieldNumber = 4,
    kIsBuyFieldNumber = 5,
    kCountFieldNumber = 6,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // int64 timestamp = 2;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // double price = 3;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double volume = 4;
  void clear_volume() ;
  double volume() const;
  void set_volume(double value);

  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);

  public:
  // bool isBuy = 5;
  void clear_isbuy() ;
  bool isbuy() const;
  void set_isbuy(bool value);

  private:
  bool _internal_isbuy() const;
  void _internal_set_isbuy(bool value);

  public:
  // int32 count = 6;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.TradeDataBean)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TradeDataBean& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::int64_t timestamp_;
    double price_;
    double volume_;
    bool isbuy_;
    ::int32_t count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class SymbolTradeRuleBean final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.SymbolTradeRuleBean) */ {
 public:
  inline SymbolTradeRuleBean() : SymbolTradeRuleBean(nullptr) {}
  ~SymbolTradeRuleBean() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SymbolTradeRuleBean* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SymbolTradeRuleBean));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SymbolTradeRuleBean(
      ::google::protobuf::internal::ConstantInitialized);

  inline SymbolTradeRuleBean(const SymbolTradeRuleBean& from) : SymbolTradeRuleBean(nullptr, from) {}
  inline SymbolTradeRuleBean(SymbolTradeRuleBean&& from) noexcept
      : SymbolTradeRuleBean(nullptr, std::move(from)) {}
  inline SymbolTradeRuleBean& operator=(const SymbolTradeRuleBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolTradeRuleBean& operator=(SymbolTradeRuleBean&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymbolTradeRuleBean& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolTradeRuleBean* internal_default_instance() {
    return reinterpret_cast<const SymbolTradeRuleBean*>(
        &_SymbolTradeRuleBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(SymbolTradeRuleBean& a, SymbolTradeRuleBean& b) { a.Swap(&b); }
  inline void Swap(SymbolTradeRuleBean* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolTradeRuleBean* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymbolTradeRuleBean* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SymbolTradeRuleBean>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SymbolTradeRuleBean& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SymbolTradeRuleBean& from) { SymbolTradeRuleBean::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SymbolTradeRuleBean* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.SymbolTradeRuleBean"; }

 protected:
  explicit SymbolTradeRuleBean(::google::protobuf::Arena* arena);
  SymbolTradeRuleBean(::google::protobuf::Arena* arena, const SymbolTradeRuleBean& from);
  SymbolTradeRuleBean(::google::protobuf::Arena* arena, SymbolTradeRuleBean&& from) noexcept
      : SymbolTradeRuleBean(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kMaxPriceFieldNumber = 2,
    kMinPriceFieldNumber = 3,
    kPriceTickSizeFieldNumber = 4,
    kMaxQuantityFieldNumber = 5,
    kMinQuantityFieldNumber = 6,
    kQuantityTickSizeFieldNumber = 7,
    kMinNotionalFieldNumber = 8,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // double maxPrice = 2;
  void clear_maxprice() ;
  double maxprice() const;
  void set_maxprice(double value);

  private:
  double _internal_maxprice() const;
  void _internal_set_maxprice(double value);

  public:
  // double minPrice = 3;
  void clear_minprice() ;
  double minprice() const;
  void set_minprice(double value);

  private:
  double _internal_minprice() const;
  void _internal_set_minprice(double value);

  public:
  // double priceTickSize = 4;
  void clear_priceticksize() ;
  double priceticksize() const;
  void set_priceticksize(double value);

  private:
  double _internal_priceticksize() const;
  void _internal_set_priceticksize(double value);

  public:
  // double maxQuantity = 5;
  void clear_maxquantity() ;
  double maxquantity() const;
  void set_maxquantity(double value);

  private:
  double _internal_maxquantity() const;
  void _internal_set_maxquantity(double value);

  public:
  // double minQuantity = 6;
  void clear_minquantity() ;
  double minquantity() const;
  void set_minquantity(double value);

  private:
  double _internal_minquantity() const;
  void _internal_set_minquantity(double value);

  public:
  // double quantityTickSize = 7;
  void clear_quantityticksize() ;
  double quantityticksize() const;
  void set_quantityticksize(double value);

  private:
  double _internal_quantityticksize() const;
  void _internal_set_quantityticksize(double value);

  public:
  // double minNotional = 8;
  void clear_minnotional() ;
  double minnotional() const;
  void set_minnotional(double value);

  private:
  double _internal_minnotional() const;
  void _internal_set_minnotional(double value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.SymbolTradeRuleBean)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      73, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SymbolTradeRuleBean& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    double maxprice_;
    double minprice_;
    double priceticksize_;
    double maxquantity_;
    double minquantity_;
    double quantityticksize_;
    double minnotional_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class SymbolTickerDataBean final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.SymbolTickerDataBean) */ {
 public:
  inline SymbolTickerDataBean() : SymbolTickerDataBean(nullptr) {}
  ~SymbolTickerDataBean() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SymbolTickerDataBean* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SymbolTickerDataBean));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SymbolTickerDataBean(
      ::google::protobuf::internal::ConstantInitialized);

  inline SymbolTickerDataBean(const SymbolTickerDataBean& from) : SymbolTickerDataBean(nullptr, from) {}
  inline SymbolTickerDataBean(SymbolTickerDataBean&& from) noexcept
      : SymbolTickerDataBean(nullptr, std::move(from)) {}
  inline SymbolTickerDataBean& operator=(const SymbolTickerDataBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolTickerDataBean& operator=(SymbolTickerDataBean&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymbolTickerDataBean& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolTickerDataBean* internal_default_instance() {
    return reinterpret_cast<const SymbolTickerDataBean*>(
        &_SymbolTickerDataBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SymbolTickerDataBean& a, SymbolTickerDataBean& b) { a.Swap(&b); }
  inline void Swap(SymbolTickerDataBean* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolTickerDataBean* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymbolTickerDataBean* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SymbolTickerDataBean>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SymbolTickerDataBean& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SymbolTickerDataBean& from) { SymbolTickerDataBean::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SymbolTickerDataBean* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.SymbolTickerDataBean"; }

 protected:
  explicit SymbolTickerDataBean(::google::protobuf::Arena* arena);
  SymbolTickerDataBean(::google::protobuf::Arena* arena, const SymbolTickerDataBean& from);
  SymbolTickerDataBean(::google::protobuf::Arena* arena, SymbolTickerDataBean&& from) noexcept
      : SymbolTickerDataBean(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelsFieldNumber = 11,
    kSymbolFieldNumber = 1,
    kCurrencyFieldNumber = 4,
    kFundingRateFieldNumber = 7,
    kNextFundingTimeFieldNumber = 8,
    kPriceFieldNumber = 2,
    kPercentageFieldNumber = 3,
    kMarkPriceFieldNumber = 5,
    kIndexPriceFieldNumber = 6,
    kRiseSpeedFieldNumber = 10,
    kPriceChangedFieldNumber = 9,
  };
  // repeated string labels = 11;
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_labels(int index, Arg_&& value, Args_... args);
  std::string* add_labels();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_labels(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_labels();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_labels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_labels();

  public:
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string currency = 4;
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string fundingRate = 7;
  void clear_fundingrate() ;
  const std::string& fundingrate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fundingrate(Arg_&& arg, Args_... args);
  std::string* mutable_fundingrate();
  PROTOBUF_NODISCARD std::string* release_fundingrate();
  void set_allocated_fundingrate(std::string* value);

  private:
  const std::string& _internal_fundingrate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fundingrate(
      const std::string& value);
  std::string* _internal_mutable_fundingrate();

  public:
  // string nextFundingTime = 8;
  void clear_nextfundingtime() ;
  const std::string& nextfundingtime() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nextfundingtime(Arg_&& arg, Args_... args);
  std::string* mutable_nextfundingtime();
  PROTOBUF_NODISCARD std::string* release_nextfundingtime();
  void set_allocated_nextfundingtime(std::string* value);

  private:
  const std::string& _internal_nextfundingtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nextfundingtime(
      const std::string& value);
  std::string* _internal_mutable_nextfundingtime();

  public:
  // double price = 2;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double percentage = 3;
  void clear_percentage() ;
  double percentage() const;
  void set_percentage(double value);

  private:
  double _internal_percentage() const;
  void _internal_set_percentage(double value);

  public:
  // double markPrice = 5;
  void clear_markprice() ;
  double markprice() const;
  void set_markprice(double value);

  private:
  double _internal_markprice() const;
  void _internal_set_markprice(double value);

  public:
  // double indexPrice = 6;
  void clear_indexprice() ;
  double indexprice() const;
  void set_indexprice(double value);

  private:
  double _internal_indexprice() const;
  void _internal_set_indexprice(double value);

  public:
  // double riseSpeed = 10;
  void clear_risespeed() ;
  double risespeed() const;
  void set_risespeed(double value);

  private:
  double _internal_risespeed() const;
  void _internal_set_risespeed(double value);

  public:
  // bool priceChanged = 9;
  void clear_pricechanged() ;
  bool pricechanged() const;
  void set_pricechanged(bool value);

  private:
  bool _internal_pricechanged() const;
  void _internal_set_pricechanged(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.SymbolTickerDataBean)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      114, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SymbolTickerDataBean& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> labels_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr fundingrate_;
    ::google::protobuf::internal::ArenaStringPtr nextfundingtime_;
    double price_;
    double percentage_;
    double markprice_;
    double indexprice_;
    double risespeed_;
    bool pricechanged_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class SelfSelectedSymbolInfoBean final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean) */ {
 public:
  inline SelfSelectedSymbolInfoBean() : SelfSelectedSymbolInfoBean(nullptr) {}
  ~SelfSelectedSymbolInfoBean() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SelfSelectedSymbolInfoBean* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SelfSelectedSymbolInfoBean));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SelfSelectedSymbolInfoBean(
      ::google::protobuf::internal::ConstantInitialized);

  inline SelfSelectedSymbolInfoBean(const SelfSelectedSymbolInfoBean& from) : SelfSelectedSymbolInfoBean(nullptr, from) {}
  inline SelfSelectedSymbolInfoBean(SelfSelectedSymbolInfoBean&& from) noexcept
      : SelfSelectedSymbolInfoBean(nullptr, std::move(from)) {}
  inline SelfSelectedSymbolInfoBean& operator=(const SelfSelectedSymbolInfoBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfSelectedSymbolInfoBean& operator=(SelfSelectedSymbolInfoBean&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelfSelectedSymbolInfoBean& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelfSelectedSymbolInfoBean* internal_default_instance() {
    return reinterpret_cast<const SelfSelectedSymbolInfoBean*>(
        &_SelfSelectedSymbolInfoBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(SelfSelectedSymbolInfoBean& a, SelfSelectedSymbolInfoBean& b) { a.Swap(&b); }
  inline void Swap(SelfSelectedSymbolInfoBean* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfSelectedSymbolInfoBean* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelfSelectedSymbolInfoBean* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SelfSelectedSymbolInfoBean>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SelfSelectedSymbolInfoBean& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SelfSelectedSymbolInfoBean& from) { SelfSelectedSymbolInfoBean::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SelfSelectedSymbolInfoBean* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean"; }

 protected:
  explicit SelfSelectedSymbolInfoBean(::google::protobuf::Arena* arena);
  SelfSelectedSymbolInfoBean(::google::protobuf::Arena* arena, const SelfSelectedSymbolInfoBean& from);
  SelfSelectedSymbolInfoBean(::google::protobuf::Arena* arena, SelfSelectedSymbolInfoBean&& from) noexcept
      : SelfSelectedSymbolInfoBean(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kInitialPriceFieldNumber = 3,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // int64 timestamp = 2;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // double initialPrice = 3;
  void clear_initialprice() ;
  double initialprice() const;
  void set_initialprice(double value);

  private:
  double _internal_initialprice() const;
  void _internal_set_initialprice(double value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SelfSelectedSymbolInfoBean& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::int64_t timestamp_;
    double initialprice_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class ReqSubscribeTradeData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.ReqSubscribeTradeData) */ {
 public:
  inline ReqSubscribeTradeData() : ReqSubscribeTradeData(nullptr) {}
  ~ReqSubscribeTradeData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqSubscribeTradeData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqSubscribeTradeData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqSubscribeTradeData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqSubscribeTradeData(const ReqSubscribeTradeData& from) : ReqSubscribeTradeData(nullptr, from) {}
  inline ReqSubscribeTradeData(ReqSubscribeTradeData&& from) noexcept
      : ReqSubscribeTradeData(nullptr, std::move(from)) {}
  inline ReqSubscribeTradeData& operator=(const ReqSubscribeTradeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSubscribeTradeData& operator=(ReqSubscribeTradeData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSubscribeTradeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSubscribeTradeData* internal_default_instance() {
    return reinterpret_cast<const ReqSubscribeTradeData*>(
        &_ReqSubscribeTradeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ReqSubscribeTradeData& a, ReqSubscribeTradeData& b) { a.Swap(&b); }
  inline void Swap(ReqSubscribeTradeData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSubscribeTradeData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSubscribeTradeData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqSubscribeTradeData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqSubscribeTradeData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqSubscribeTradeData& from) { ReqSubscribeTradeData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqSubscribeTradeData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.ReqSubscribeTradeData"; }

 protected:
  explicit ReqSubscribeTradeData(::google::protobuf::Arena* arena);
  ReqSubscribeTradeData(::google::protobuf::Arena* arena, const ReqSubscribeTradeData& from);
  ReqSubscribeTradeData(::google::protobuf::Arena* arena, ReqSubscribeTradeData&& from) noexcept
      : ReqSubscribeTradeData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolsFieldNumber = 1,
    kIsCancelFieldNumber = 2,
  };
  // repeated string symbols = 1;
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;

  public:
  void clear_symbols() ;
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbols(int index, Arg_&& value, Args_... args);
  std::string* add_symbols();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_symbols(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& symbols() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_symbols();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_symbols() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_symbols();

  public:
  // bool isCancel = 2;
  void clear_iscancel() ;
  bool iscancel() const;
  void set_iscancel(bool value);

  private:
  bool _internal_iscancel() const;
  void _internal_set_iscancel(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.ReqSubscribeTradeData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqSubscribeTradeData& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> symbols_;
    bool iscancel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class ReqSubscribeTickerData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.ReqSubscribeTickerData) */ {
 public:
  inline ReqSubscribeTickerData() : ReqSubscribeTickerData(nullptr) {}
  ~ReqSubscribeTickerData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqSubscribeTickerData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqSubscribeTickerData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqSubscribeTickerData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqSubscribeTickerData(const ReqSubscribeTickerData& from) : ReqSubscribeTickerData(nullptr, from) {}
  inline ReqSubscribeTickerData(ReqSubscribeTickerData&& from) noexcept
      : ReqSubscribeTickerData(nullptr, std::move(from)) {}
  inline ReqSubscribeTickerData& operator=(const ReqSubscribeTickerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSubscribeTickerData& operator=(ReqSubscribeTickerData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSubscribeTickerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSubscribeTickerData* internal_default_instance() {
    return reinterpret_cast<const ReqSubscribeTickerData*>(
        &_ReqSubscribeTickerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ReqSubscribeTickerData& a, ReqSubscribeTickerData& b) { a.Swap(&b); }
  inline void Swap(ReqSubscribeTickerData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSubscribeTickerData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSubscribeTickerData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqSubscribeTickerData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqSubscribeTickerData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqSubscribeTickerData& from) { ReqSubscribeTickerData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqSubscribeTickerData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.ReqSubscribeTickerData"; }

 protected:
  explicit ReqSubscribeTickerData(::google::protobuf::Arena* arena);
  ReqSubscribeTickerData(::google::protobuf::Arena* arena, const ReqSubscribeTickerData& from);
  ReqSubscribeTickerData(::google::protobuf::Arena* arena, ReqSubscribeTickerData&& from) noexcept
      : ReqSubscribeTickerData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIsCancelFieldNumber = 1,
    kIsAscendingFieldNumber = 2,
    kSortTypeFieldNumber = 3,
  };
  // bool isCancel = 1;
  void clear_iscancel() ;
  bool iscancel() const;
  void set_iscancel(bool value);

  private:
  bool _internal_iscancel() const;
  void _internal_set_iscancel(bool value);

  public:
  // bool isAscending = 2;
  void clear_isascending() ;
  bool isascending() const;
  void set_isascending(bool value);

  private:
  bool _internal_isascending() const;
  void _internal_set_isascending(bool value);

  public:
  // .lampyris.crypto.protocol.quote.SymbolTickerDataSortType sortType = 3;
  void clear_sorttype() ;
  ::lampyris::crypto::protocol::quote::SymbolTickerDataSortType sorttype() const;
  void set_sorttype(::lampyris::crypto::protocol::quote::SymbolTickerDataSortType value);

  private:
  ::lampyris::crypto::protocol::quote::SymbolTickerDataSortType _internal_sorttype() const;
  void _internal_set_sorttype(::lampyris::crypto::protocol::quote::SymbolTickerDataSortType value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.ReqSubscribeTickerData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqSubscribeTickerData& from_msg);
    bool iscancel_;
    bool isascending_;
    int sorttype_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class ReqSubscribeCandlestickUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate) */ {
 public:
  inline ReqSubscribeCandlestickUpdate() : ReqSubscribeCandlestickUpdate(nullptr) {}
  ~ReqSubscribeCandlestickUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqSubscribeCandlestickUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqSubscribeCandlestickUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqSubscribeCandlestickUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqSubscribeCandlestickUpdate(const ReqSubscribeCandlestickUpdate& from) : ReqSubscribeCandlestickUpdate(nullptr, from) {}
  inline ReqSubscribeCandlestickUpdate(ReqSubscribeCandlestickUpdate&& from) noexcept
      : ReqSubscribeCandlestickUpdate(nullptr, std::move(from)) {}
  inline ReqSubscribeCandlestickUpdate& operator=(const ReqSubscribeCandlestickUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSubscribeCandlestickUpdate& operator=(ReqSubscribeCandlestickUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSubscribeCandlestickUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSubscribeCandlestickUpdate* internal_default_instance() {
    return reinterpret_cast<const ReqSubscribeCandlestickUpdate*>(
        &_ReqSubscribeCandlestickUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ReqSubscribeCandlestickUpdate& a, ReqSubscribeCandlestickUpdate& b) { a.Swap(&b); }
  inline void Swap(ReqSubscribeCandlestickUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSubscribeCandlestickUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSubscribeCandlestickUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqSubscribeCandlestickUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqSubscribeCandlestickUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqSubscribeCandlestickUpdate& from) { ReqSubscribeCandlestickUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqSubscribeCandlestickUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate"; }

 protected:
  explicit ReqSubscribeCandlestickUpdate(::google::protobuf::Arena* arena);
  ReqSubscribeCandlestickUpdate(::google::protobuf::Arena* arena, const ReqSubscribeCandlestickUpdate& from);
  ReqSubscribeCandlestickUpdate(::google::protobuf::Arena* arena, ReqSubscribeCandlestickUpdate&& from) noexcept
      : ReqSubscribeCandlestickUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolsFieldNumber = 1,
    kBarSizeFieldNumber = 2,
    kIsCancelFieldNumber = 3,
  };
  // repeated string symbols = 1;
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;

  public:
  void clear_symbols() ;
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbols(int index, Arg_&& value, Args_... args);
  std::string* add_symbols();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_symbols(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& symbols() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_symbols();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_symbols() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_symbols();

  public:
  // string barSize = 2;
  void clear_barsize() ;
  const std::string& barsize() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_barsize(Arg_&& arg, Args_... args);
  std::string* mutable_barsize();
  PROTOBUF_NODISCARD std::string* release_barsize();
  void set_allocated_barsize(std::string* value);

  private:
  const std::string& _internal_barsize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_barsize(
      const std::string& value);
  std::string* _internal_mutable_barsize();

  public:
  // bool isCancel = 3;
  void clear_iscancel() ;
  bool iscancel() const;
  void set_iscancel(bool value);

  private:
  bool _internal_iscancel() const;
  void _internal_set_iscancel(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      83, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqSubscribeCandlestickUpdate& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> symbols_;
    ::google::protobuf::internal::ArenaStringPtr barsize_;
    bool iscancel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class ReqCandlestickQuery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.ReqCandlestickQuery) */ {
 public:
  inline ReqCandlestickQuery() : ReqCandlestickQuery(nullptr) {}
  ~ReqCandlestickQuery() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqCandlestickQuery* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqCandlestickQuery));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqCandlestickQuery(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqCandlestickQuery(const ReqCandlestickQuery& from) : ReqCandlestickQuery(nullptr, from) {}
  inline ReqCandlestickQuery(ReqCandlestickQuery&& from) noexcept
      : ReqCandlestickQuery(nullptr, std::move(from)) {}
  inline ReqCandlestickQuery& operator=(const ReqCandlestickQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCandlestickQuery& operator=(ReqCandlestickQuery&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCandlestickQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCandlestickQuery* internal_default_instance() {
    return reinterpret_cast<const ReqCandlestickQuery*>(
        &_ReqCandlestickQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ReqCandlestickQuery& a, ReqCandlestickQuery& b) { a.Swap(&b); }
  inline void Swap(ReqCandlestickQuery* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCandlestickQuery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqCandlestickQuery* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqCandlestickQuery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqCandlestickQuery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqCandlestickQuery& from) { ReqCandlestickQuery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqCandlestickQuery* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.ReqCandlestickQuery"; }

 protected:
  explicit ReqCandlestickQuery(::google::protobuf::Arena* arena);
  ReqCandlestickQuery(::google::protobuf::Arena* arena, const ReqCandlestickQuery& from);
  ReqCandlestickQuery(::google::protobuf::Arena* arena, ReqCandlestickQuery&& from) noexcept
      : ReqCandlestickQuery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kBarSizeFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kCountFieldNumber = 5,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string barSize = 2;
  void clear_barsize() ;
  const std::string& barsize() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_barsize(Arg_&& arg, Args_... args);
  std::string* mutable_barsize();
  PROTOBUF_NODISCARD std::string* release_barsize();
  void set_allocated_barsize(std::string* value);

  private:
  const std::string& _internal_barsize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_barsize(
      const std::string& value);
  std::string* _internal_mutable_barsize();

  public:
  // int64 startTime = 3;
  void clear_starttime() ;
  ::int64_t starttime() const;
  void set_starttime(::int64_t value);

  private:
  ::int64_t _internal_starttime() const;
  void _internal_set_starttime(::int64_t value);

  public:
  // int64 endTime = 4;
  void clear_endtime() ;
  ::int64_t endtime() const;
  void set_endtime(::int64_t value);

  private:
  ::int64_t _internal_endtime() const;
  void _internal_set_endtime(::int64_t value);

  public:
  // int64 count = 5;
  void clear_count() ;
  ::int64_t count() const;
  void set_count(::int64_t value);

  private:
  ::int64_t _internal_count() const;
  void _internal_set_count(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.ReqCandlestickQuery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqCandlestickQuery& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr barsize_;
    ::int64_t starttime_;
    ::int64_t endtime_;
    ::int64_t count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class MarketMonitorNoticeBean final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean) */ {
 public:
  inline MarketMonitorNoticeBean() : MarketMonitorNoticeBean(nullptr) {}
  ~MarketMonitorNoticeBean() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MarketMonitorNoticeBean* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MarketMonitorNoticeBean));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketMonitorNoticeBean(
      ::google::protobuf::internal::ConstantInitialized);

  inline MarketMonitorNoticeBean(const MarketMonitorNoticeBean& from) : MarketMonitorNoticeBean(nullptr, from) {}
  inline MarketMonitorNoticeBean(MarketMonitorNoticeBean&& from) noexcept
      : MarketMonitorNoticeBean(nullptr, std::move(from)) {}
  inline MarketMonitorNoticeBean& operator=(const MarketMonitorNoticeBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketMonitorNoticeBean& operator=(MarketMonitorNoticeBean&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketMonitorNoticeBean& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketMonitorNoticeBean* internal_default_instance() {
    return reinterpret_cast<const MarketMonitorNoticeBean*>(
        &_MarketMonitorNoticeBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(MarketMonitorNoticeBean& a, MarketMonitorNoticeBean& b) { a.Swap(&b); }
  inline void Swap(MarketMonitorNoticeBean* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketMonitorNoticeBean* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketMonitorNoticeBean* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MarketMonitorNoticeBean>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketMonitorNoticeBean& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MarketMonitorNoticeBean& from) { MarketMonitorNoticeBean::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MarketMonitorNoticeBean* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.MarketMonitorNoticeBean"; }

 protected:
  explicit MarketMonitorNoticeBean(::google::protobuf::Arena* arena);
  MarketMonitorNoticeBean(::google::protobuf::Arena* arena, const MarketMonitorNoticeBean& from);
  MarketMonitorNoticeBean(::google::protobuf::Arena* arena, MarketMonitorNoticeBean&& from) noexcept
      : MarketMonitorNoticeBean(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kValueFieldNumber = 4,
    kTimestampFieldNumber = 2,
    kNoticeTypeFieldNumber = 3,
    kNoticeLevelFieldNumber = 5,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string value = 4;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // int64 timestamp = 2;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int32 noticeType = 3;
  void clear_noticetype() ;
  ::int32_t noticetype() const;
  void set_noticetype(::int32_t value);

  private:
  ::int32_t _internal_noticetype() const;
  void _internal_set_noticetype(::int32_t value);

  public:
  // int32 noticeLevel = 5;
  void clear_noticelevel() ;
  ::int32_t noticelevel() const;
  void set_noticelevel(::int32_t value);

  private:
  ::int32_t _internal_noticelevel() const;
  void _internal_set_noticelevel(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MarketMonitorNoticeBean& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::int64_t timestamp_;
    ::int32_t noticetype_;
    ::int32_t noticelevel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class CandlestickBean final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.CandlestickBean) */ {
 public:
  inline CandlestickBean() : CandlestickBean(nullptr) {}
  ~CandlestickBean() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CandlestickBean* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CandlestickBean));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CandlestickBean(
      ::google::protobuf::internal::ConstantInitialized);

  inline CandlestickBean(const CandlestickBean& from) : CandlestickBean(nullptr, from) {}
  inline CandlestickBean(CandlestickBean&& from) noexcept
      : CandlestickBean(nullptr, std::move(from)) {}
  inline CandlestickBean& operator=(const CandlestickBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandlestickBean& operator=(CandlestickBean&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandlestickBean& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandlestickBean* internal_default_instance() {
    return reinterpret_cast<const CandlestickBean*>(
        &_CandlestickBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(CandlestickBean& a, CandlestickBean& b) { a.Swap(&b); }
  inline void Swap(CandlestickBean* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandlestickBean* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CandlestickBean* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CandlestickBean>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CandlestickBean& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CandlestickBean& from) { CandlestickBean::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CandlestickBean* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.CandlestickBean"; }

 protected:
  explicit CandlestickBean(::google::protobuf::Arena* arena);
  CandlestickBean(::google::protobuf::Arena* arena, const CandlestickBean& from);
  CandlestickBean(::google::protobuf::Arena* arena, CandlestickBean&& from) noexcept
      : CandlestickBean(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeFieldNumber = 1,
    kOpenFieldNumber = 2,
    kHighFieldNumber = 3,
    kLowFieldNumber = 4,
    kCloseFieldNumber = 5,
    kVolumeFieldNumber = 6,
    kCurrencyFieldNumber = 7,
  };
  // int64 time = 1;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // double open = 2;
  void clear_open() ;
  double open() const;
  void set_open(double value);

  private:
  double _internal_open() const;
  void _internal_set_open(double value);

  public:
  // double high = 3;
  void clear_high() ;
  double high() const;
  void set_high(double value);

  private:
  double _internal_high() const;
  void _internal_set_high(double value);

  public:
  // double low = 4;
  void clear_low() ;
  double low() const;
  void set_low(double value);

  private:
  double _internal_low() const;
  void _internal_set_low(double value);

  public:
  // double close = 5;
  void clear_close() ;
  double close() const;
  void set_close(double value);

  private:
  double _internal_close() const;
  void _internal_set_close(double value);

  public:
  // double volume = 6;
  void clear_volume() ;
  double volume() const;
  void set_volume(double value);

  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);

  public:
  // double currency = 7;
  void clear_currency() ;
  double currency() const;
  void set_currency(double value);

  private:
  double _internal_currency() const;
  void _internal_set_currency(double value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.CandlestickBean)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CandlestickBean& from_msg);
    ::int64_t time_;
    double open_;
    double high_;
    double low_;
    double close_;
    double volume_;
    double currency_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class SymbolTradeDataBean final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.SymbolTradeDataBean) */ {
 public:
  inline SymbolTradeDataBean() : SymbolTradeDataBean(nullptr) {}
  ~SymbolTradeDataBean() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SymbolTradeDataBean* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SymbolTradeDataBean));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SymbolTradeDataBean(
      ::google::protobuf::internal::ConstantInitialized);

  inline SymbolTradeDataBean(const SymbolTradeDataBean& from) : SymbolTradeDataBean(nullptr, from) {}
  inline SymbolTradeDataBean(SymbolTradeDataBean&& from) noexcept
      : SymbolTradeDataBean(nullptr, std::move(from)) {}
  inline SymbolTradeDataBean& operator=(const SymbolTradeDataBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolTradeDataBean& operator=(SymbolTradeDataBean&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymbolTradeDataBean& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolTradeDataBean* internal_default_instance() {
    return reinterpret_cast<const SymbolTradeDataBean*>(
        &_SymbolTradeDataBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SymbolTradeDataBean& a, SymbolTradeDataBean& b) { a.Swap(&b); }
  inline void Swap(SymbolTradeDataBean* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolTradeDataBean* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymbolTradeDataBean* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SymbolTradeDataBean>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SymbolTradeDataBean& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SymbolTradeDataBean& from) { SymbolTradeDataBean::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SymbolTradeDataBean* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.SymbolTradeDataBean"; }

 protected:
  explicit SymbolTradeDataBean(::google::protobuf::Arena* arena);
  SymbolTradeDataBean(::google::protobuf::Arena* arena, const SymbolTradeDataBean& from);
  SymbolTradeDataBean(::google::protobuf::Arena* arena, SymbolTradeDataBean&& from) noexcept
      : SymbolTradeDataBean(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBeanListFieldNumber = 2,
    kSymbolFieldNumber = 1,
  };
  // repeated .lampyris.crypto.protocol.quote.TradeDataBean beanList = 2;
  int beanlist_size() const;
  private:
  int _internal_beanlist_size() const;

  public:
  void clear_beanlist() ;
  ::lampyris::crypto::protocol::quote::TradeDataBean* mutable_beanlist(int index);
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::TradeDataBean>* mutable_beanlist();

  private:
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::TradeDataBean>& _internal_beanlist() const;
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::TradeDataBean>* _internal_mutable_beanlist();
  public:
  const ::lampyris::crypto::protocol::quote::TradeDataBean& beanlist(int index) const;
  ::lampyris::crypto::protocol::quote::TradeDataBean* add_beanlist();
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::TradeDataBean>& beanlist() const;
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.SymbolTradeDataBean)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SymbolTradeDataBean& from_msg);
    ::google::protobuf::RepeatedPtrField< ::lampyris::crypto::protocol::quote::TradeDataBean > beanlist_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class SelfSelectedSymbolGroupBean final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean) */ {
 public:
  inline SelfSelectedSymbolGroupBean() : SelfSelectedSymbolGroupBean(nullptr) {}
  ~SelfSelectedSymbolGroupBean() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SelfSelectedSymbolGroupBean* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SelfSelectedSymbolGroupBean));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SelfSelectedSymbolGroupBean(
      ::google::protobuf::internal::ConstantInitialized);

  inline SelfSelectedSymbolGroupBean(const SelfSelectedSymbolGroupBean& from) : SelfSelectedSymbolGroupBean(nullptr, from) {}
  inline SelfSelectedSymbolGroupBean(SelfSelectedSymbolGroupBean&& from) noexcept
      : SelfSelectedSymbolGroupBean(nullptr, std::move(from)) {}
  inline SelfSelectedSymbolGroupBean& operator=(const SelfSelectedSymbolGroupBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfSelectedSymbolGroupBean& operator=(SelfSelectedSymbolGroupBean&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelfSelectedSymbolGroupBean& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelfSelectedSymbolGroupBean* internal_default_instance() {
    return reinterpret_cast<const SelfSelectedSymbolGroupBean*>(
        &_SelfSelectedSymbolGroupBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(SelfSelectedSymbolGroupBean& a, SelfSelectedSymbolGroupBean& b) { a.Swap(&b); }
  inline void Swap(SelfSelectedSymbolGroupBean* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfSelectedSymbolGroupBean* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelfSelectedSymbolGroupBean* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SelfSelectedSymbolGroupBean>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SelfSelectedSymbolGroupBean& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SelfSelectedSymbolGroupBean& from) { SelfSelectedSymbolGroupBean::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SelfSelectedSymbolGroupBean* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean"; }

 protected:
  explicit SelfSelectedSymbolGroupBean(::google::protobuf::Arena* arena);
  SelfSelectedSymbolGroupBean(::google::protobuf::Arena* arena, const SelfSelectedSymbolGroupBean& from);
  SelfSelectedSymbolGroupBean(::google::protobuf::Arena* arena, SelfSelectedSymbolGroupBean&& from) noexcept
      : SelfSelectedSymbolGroupBean(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolListFieldNumber = 4,
    kNameFieldNumber = 1,
    kCanDeleteFieldNumber = 2,
    kSortingOrderFieldNumber = 3,
  };
  // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean symbolList = 4;
  int symbollist_size() const;
  private:
  int _internal_symbollist_size() const;

  public:
  void clear_symbollist() ;
  ::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean* mutable_symbollist(int index);
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>* mutable_symbollist();

  private:
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>& _internal_symbollist() const;
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>* _internal_mutable_symbollist();
  public:
  const ::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean& symbollist(int index) const;
  ::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean* add_symbollist();
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>& symbollist() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bool canDelete = 2;
  void clear_candelete() ;
  bool candelete() const;
  void set_candelete(bool value);

  private:
  bool _internal_candelete() const;
  void _internal_set_candelete(bool value);

  public:
  // int32 sortingOrder = 3;
  void clear_sortingorder() ;
  ::int32_t sortingorder() const;
  void set_sortingorder(::int32_t value);

  private:
  ::int32_t _internal_sortingorder() const;
  void _internal_set_sortingorder(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      71, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SelfSelectedSymbolGroupBean& from_msg);
    ::google::protobuf::RepeatedPtrField< ::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean > symbollist_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    bool candelete_;
    ::int32_t sortingorder_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class ResSubscribeTickerData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.ResSubscribeTickerData) */ {
 public:
  inline ResSubscribeTickerData() : ResSubscribeTickerData(nullptr) {}
  ~ResSubscribeTickerData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResSubscribeTickerData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResSubscribeTickerData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResSubscribeTickerData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResSubscribeTickerData(const ResSubscribeTickerData& from) : ResSubscribeTickerData(nullptr, from) {}
  inline ResSubscribeTickerData(ResSubscribeTickerData&& from) noexcept
      : ResSubscribeTickerData(nullptr, std::move(from)) {}
  inline ResSubscribeTickerData& operator=(const ResSubscribeTickerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResSubscribeTickerData& operator=(ResSubscribeTickerData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResSubscribeTickerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResSubscribeTickerData* internal_default_instance() {
    return reinterpret_cast<const ResSubscribeTickerData*>(
        &_ResSubscribeTickerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ResSubscribeTickerData& a, ResSubscribeTickerData& b) { a.Swap(&b); }
  inline void Swap(ResSubscribeTickerData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResSubscribeTickerData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResSubscribeTickerData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResSubscribeTickerData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResSubscribeTickerData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResSubscribeTickerData& from) { ResSubscribeTickerData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResSubscribeTickerData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.ResSubscribeTickerData"; }

 protected:
  explicit ResSubscribeTickerData(::google::protobuf::Arena* arena);
  ResSubscribeTickerData(::google::protobuf::Arena* arena, const ResSubscribeTickerData& from);
  ResSubscribeTickerData(::google::protobuf::Arena* arena, ResSubscribeTickerData&& from) noexcept
      : ResSubscribeTickerData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBeanListFieldNumber = 1,
  };
  // repeated .lampyris.crypto.protocol.quote.SymbolTickerDataBean beanList = 1;
  int beanlist_size() const;
  private:
  int _internal_beanlist_size() const;

  public:
  void clear_beanlist() ;
  ::lampyris::crypto::protocol::quote::SymbolTickerDataBean* mutable_beanlist(int index);
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>* mutable_beanlist();

  private:
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>& _internal_beanlist() const;
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>* _internal_mutable_beanlist();
  public:
  const ::lampyris::crypto::protocol::quote::SymbolTickerDataBean& beanlist(int index) const;
  ::lampyris::crypto::protocol::quote::SymbolTickerDataBean* add_beanlist();
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>& beanlist() const;
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.ResSubscribeTickerData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResSubscribeTickerData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::lampyris::crypto::protocol::quote::SymbolTickerDataBean > beanlist_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class ResCandlestickQuery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.ResCandlestickQuery) */ {
 public:
  inline ResCandlestickQuery() : ResCandlestickQuery(nullptr) {}
  ~ResCandlestickQuery() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResCandlestickQuery* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResCandlestickQuery));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResCandlestickQuery(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResCandlestickQuery(const ResCandlestickQuery& from) : ResCandlestickQuery(nullptr, from) {}
  inline ResCandlestickQuery(ResCandlestickQuery&& from) noexcept
      : ResCandlestickQuery(nullptr, std::move(from)) {}
  inline ResCandlestickQuery& operator=(const ResCandlestickQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResCandlestickQuery& operator=(ResCandlestickQuery&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResCandlestickQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResCandlestickQuery* internal_default_instance() {
    return reinterpret_cast<const ResCandlestickQuery*>(
        &_ResCandlestickQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ResCandlestickQuery& a, ResCandlestickQuery& b) { a.Swap(&b); }
  inline void Swap(ResCandlestickQuery* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResCandlestickQuery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResCandlestickQuery* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResCandlestickQuery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResCandlestickQuery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResCandlestickQuery& from) { ResCandlestickQuery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResCandlestickQuery* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.ResCandlestickQuery"; }

 protected:
  explicit ResCandlestickQuery(::google::protobuf::Arena* arena);
  ResCandlestickQuery(::google::protobuf::Arena* arena, const ResCandlestickQuery& from);
  ResCandlestickQuery(::google::protobuf::Arena* arena, ResCandlestickQuery&& from) noexcept
      : ResCandlestickQuery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBeanListFieldNumber = 3,
    kSymbolFieldNumber = 1,
    kBarSizeFieldNumber = 2,
  };
  // repeated .lampyris.crypto.protocol.quote.CandlestickBean beanList = 3;
  int beanlist_size() const;
  private:
  int _internal_beanlist_size() const;

  public:
  void clear_beanlist() ;
  ::lampyris::crypto::protocol::quote::CandlestickBean* mutable_beanlist(int index);
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::CandlestickBean>* mutable_beanlist();

  private:
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::CandlestickBean>& _internal_beanlist() const;
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::CandlestickBean>* _internal_mutable_beanlist();
  public:
  const ::lampyris::crypto::protocol::quote::CandlestickBean& beanlist(int index) const;
  ::lampyris::crypto::protocol::quote::CandlestickBean* add_beanlist();
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::CandlestickBean>& beanlist() const;
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string barSize = 2;
  void clear_barsize() ;
  const std::string& barsize() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_barsize(Arg_&& arg, Args_... args);
  std::string* mutable_barsize();
  PROTOBUF_NODISCARD std::string* release_barsize();
  void set_allocated_barsize(std::string* value);

  private:
  const std::string& _internal_barsize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_barsize(
      const std::string& value);
  std::string* _internal_mutable_barsize();

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.ResCandlestickQuery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResCandlestickQuery& from_msg);
    ::google::protobuf::RepeatedPtrField< ::lampyris::crypto::protocol::quote::CandlestickBean > beanlist_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr barsize_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class ReqTradeRule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.ReqTradeRule) */ {
 public:
  inline ReqTradeRule() : ReqTradeRule(nullptr) {}
  ~ReqTradeRule() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqTradeRule* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqTradeRule));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqTradeRule(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqTradeRule(const ReqTradeRule& from) : ReqTradeRule(nullptr, from) {}
  inline ReqTradeRule(ReqTradeRule&& from) noexcept
      : ReqTradeRule(nullptr, std::move(from)) {}
  inline ReqTradeRule& operator=(const ReqTradeRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTradeRule& operator=(ReqTradeRule&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTradeRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTradeRule* internal_default_instance() {
    return reinterpret_cast<const ReqTradeRule*>(
        &_ReqTradeRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ReqTradeRule& a, ReqTradeRule& b) { a.Swap(&b); }
  inline void Swap(ReqTradeRule* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTradeRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqTradeRule* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqTradeRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqTradeRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqTradeRule& from) { ReqTradeRule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqTradeRule* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.ReqTradeRule"; }

 protected:
  explicit ReqTradeRule(::google::protobuf::Arena* arena);
  ReqTradeRule(::google::protobuf::Arena* arena, const ReqTradeRule& from);
  ReqTradeRule(::google::protobuf::Arena* arena, ReqTradeRule&& from) noexcept
      : ReqTradeRule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBeanListFieldNumber = 1,
  };
  // repeated .lampyris.crypto.protocol.quote.SymbolTradeRuleBean beanList = 1;
  int beanlist_size() const;
  private:
  int _internal_beanlist_size() const;

  public:
  void clear_beanlist() ;
  ::lampyris::crypto::protocol::quote::SymbolTradeRuleBean* mutable_beanlist(int index);
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>* mutable_beanlist();

  private:
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>& _internal_beanlist() const;
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>* _internal_mutable_beanlist();
  public:
  const ::lampyris::crypto::protocol::quote::SymbolTradeRuleBean& beanlist(int index) const;
  ::lampyris::crypto::protocol::quote::SymbolTradeRuleBean* add_beanlist();
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>& beanlist() const;
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.ReqTradeRule)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqTradeRule& from_msg);
    ::google::protobuf::RepeatedPtrField< ::lampyris::crypto::protocol::quote::SymbolTradeRuleBean > beanlist_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class CandlestickUpdateBean final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.CandlestickUpdateBean) */ {
 public:
  inline CandlestickUpdateBean() : CandlestickUpdateBean(nullptr) {}
  ~CandlestickUpdateBean() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CandlestickUpdateBean* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CandlestickUpdateBean));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CandlestickUpdateBean(
      ::google::protobuf::internal::ConstantInitialized);

  inline CandlestickUpdateBean(const CandlestickUpdateBean& from) : CandlestickUpdateBean(nullptr, from) {}
  inline CandlestickUpdateBean(CandlestickUpdateBean&& from) noexcept
      : CandlestickUpdateBean(nullptr, std::move(from)) {}
  inline CandlestickUpdateBean& operator=(const CandlestickUpdateBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandlestickUpdateBean& operator=(CandlestickUpdateBean&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandlestickUpdateBean& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandlestickUpdateBean* internal_default_instance() {
    return reinterpret_cast<const CandlestickUpdateBean*>(
        &_CandlestickUpdateBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(CandlestickUpdateBean& a, CandlestickUpdateBean& b) { a.Swap(&b); }
  inline void Swap(CandlestickUpdateBean* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandlestickUpdateBean* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CandlestickUpdateBean* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CandlestickUpdateBean>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CandlestickUpdateBean& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CandlestickUpdateBean& from) { CandlestickUpdateBean::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CandlestickUpdateBean* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.CandlestickUpdateBean"; }

 protected:
  explicit CandlestickUpdateBean(::google::protobuf::Arena* arena);
  CandlestickUpdateBean(::google::protobuf::Arena* arena, const CandlestickUpdateBean& from);
  CandlestickUpdateBean(::google::protobuf::Arena* arena, CandlestickUpdateBean&& from) noexcept
      : CandlestickUpdateBean(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kBarSizeFieldNumber = 2,
    kBeanFieldNumber = 3,
    kIsEndFieldNumber = 4,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string barSize = 2;
  void clear_barsize() ;
  const std::string& barsize() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_barsize(Arg_&& arg, Args_... args);
  std::string* mutable_barsize();
  PROTOBUF_NODISCARD std::string* release_barsize();
  void set_allocated_barsize(std::string* value);

  private:
  const std::string& _internal_barsize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_barsize(
      const std::string& value);
  std::string* _internal_mutable_barsize();

  public:
  // .lampyris.crypto.protocol.quote.CandlestickBean bean = 3;
  bool has_bean() const;
  void clear_bean() ;
  const ::lampyris::crypto::protocol::quote::CandlestickBean& bean() const;
  PROTOBUF_NODISCARD ::lampyris::crypto::protocol::quote::CandlestickBean* release_bean();
  ::lampyris::crypto::protocol::quote::CandlestickBean* mutable_bean();
  void set_allocated_bean(::lampyris::crypto::protocol::quote::CandlestickBean* value);
  void unsafe_arena_set_allocated_bean(::lampyris::crypto::protocol::quote::CandlestickBean* value);
  ::lampyris::crypto::protocol::quote::CandlestickBean* unsafe_arena_release_bean();

  private:
  const ::lampyris::crypto::protocol::quote::CandlestickBean& _internal_bean() const;
  ::lampyris::crypto::protocol::quote::CandlestickBean* _internal_mutable_bean();

  public:
  // bool isEnd = 4;
  void clear_isend() ;
  bool isend() const;
  void set_isend(bool value);

  private:
  bool _internal_isend() const;
  void _internal_set_isend(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.CandlestickUpdateBean)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CandlestickUpdateBean& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr barsize_;
    ::lampyris::crypto::protocol::quote::CandlestickBean* bean_;
    bool isend_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class ResSelfSelectedSymbol final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol) */ {
 public:
  inline ResSelfSelectedSymbol() : ResSelfSelectedSymbol(nullptr) {}
  ~ResSelfSelectedSymbol() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResSelfSelectedSymbol* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResSelfSelectedSymbol));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResSelfSelectedSymbol(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResSelfSelectedSymbol(const ResSelfSelectedSymbol& from) : ResSelfSelectedSymbol(nullptr, from) {}
  inline ResSelfSelectedSymbol(ResSelfSelectedSymbol&& from) noexcept
      : ResSelfSelectedSymbol(nullptr, std::move(from)) {}
  inline ResSelfSelectedSymbol& operator=(const ResSelfSelectedSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResSelfSelectedSymbol& operator=(ResSelfSelectedSymbol&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResSelfSelectedSymbol& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResSelfSelectedSymbol* internal_default_instance() {
    return reinterpret_cast<const ResSelfSelectedSymbol*>(
        &_ResSelfSelectedSymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(ResSelfSelectedSymbol& a, ResSelfSelectedSymbol& b) { a.Swap(&b); }
  inline void Swap(ResSelfSelectedSymbol* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResSelfSelectedSymbol* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResSelfSelectedSymbol* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResSelfSelectedSymbol>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResSelfSelectedSymbol& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResSelfSelectedSymbol& from) { ResSelfSelectedSymbol::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResSelfSelectedSymbol* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.ResSelfSelectedSymbol"; }

 protected:
  explicit ResSelfSelectedSymbol(::google::protobuf::Arena* arena);
  ResSelfSelectedSymbol(::google::protobuf::Arena* arena, const ResSelfSelectedSymbol& from);
  ResSelfSelectedSymbol(::google::protobuf::Arena* arena, ResSelfSelectedSymbol&& from) noexcept
      : ResSelfSelectedSymbol(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGrouoListFieldNumber = 1,
  };
  // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean grouoList = 1;
  int grouolist_size() const;
  private:
  int _internal_grouolist_size() const;

  public:
  void clear_grouolist() ;
  ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* mutable_grouolist(int index);
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>* mutable_grouolist();

  private:
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>& _internal_grouolist() const;
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>* _internal_mutable_grouolist();
  public:
  const ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean& grouolist(int index) const;
  ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* add_grouolist();
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>& grouolist() const;
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResSelfSelectedSymbol& from_msg);
    ::google::protobuf::RepeatedPtrField< ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean > grouolist_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};
// -------------------------------------------------------------------

class ReqSelfSelectedSymbol final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol) */ {
 public:
  inline ReqSelfSelectedSymbol() : ReqSelfSelectedSymbol(nullptr) {}
  ~ReqSelfSelectedSymbol() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqSelfSelectedSymbol* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqSelfSelectedSymbol));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqSelfSelectedSymbol(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqSelfSelectedSymbol(const ReqSelfSelectedSymbol& from) : ReqSelfSelectedSymbol(nullptr, from) {}
  inline ReqSelfSelectedSymbol(ReqSelfSelectedSymbol&& from) noexcept
      : ReqSelfSelectedSymbol(nullptr, std::move(from)) {}
  inline ReqSelfSelectedSymbol& operator=(const ReqSelfSelectedSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSelfSelectedSymbol& operator=(ReqSelfSelectedSymbol&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSelfSelectedSymbol& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSelfSelectedSymbol* internal_default_instance() {
    return reinterpret_cast<const ReqSelfSelectedSymbol*>(
        &_ReqSelfSelectedSymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(ReqSelfSelectedSymbol& a, ReqSelfSelectedSymbol& b) { a.Swap(&b); }
  inline void Swap(ReqSelfSelectedSymbol* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSelfSelectedSymbol* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSelfSelectedSymbol* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqSelfSelectedSymbol>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqSelfSelectedSymbol& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqSelfSelectedSymbol& from) { ReqSelfSelectedSymbol::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqSelfSelectedSymbol* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol"; }

 protected:
  explicit ReqSelfSelectedSymbol(::google::protobuf::Arena* arena);
  ReqSelfSelectedSymbol(::google::protobuf::Arena* arena, const ReqSelfSelectedSymbol& from);
  ReqSelfSelectedSymbol(::google::protobuf::Arena* arena, ReqSelfSelectedSymbol&& from) noexcept
      : ReqSelfSelectedSymbol(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGrouoListFieldNumber = 1,
  };
  // repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean grouoList = 1;
  int grouolist_size() const;
  private:
  int _internal_grouolist_size() const;

  public:
  void clear_grouolist() ;
  ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* mutable_grouolist(int index);
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>* mutable_grouolist();

  private:
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>& _internal_grouolist() const;
  ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>* _internal_mutable_grouolist();
  public:
  const ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean& grouolist(int index) const;
  ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* add_grouolist();
  const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>& grouolist() const;
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqSelfSelectedSymbol& from_msg);
    ::google::protobuf::RepeatedPtrField< ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean > grouolist_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SymbolTickerDataBean

// string symbol = 1;
inline void SymbolTickerDataBean::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SymbolTickerDataBean::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolTickerDataBean::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.symbol)
}
inline std::string* SymbolTickerDataBean::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SymbolTickerDataBean.symbol)
  return _s;
}
inline const std::string& SymbolTickerDataBean::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void SymbolTickerDataBean::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SymbolTickerDataBean::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SymbolTickerDataBean::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.SymbolTickerDataBean.symbol)
  return _impl_.symbol_.Release();
}
inline void SymbolTickerDataBean::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.SymbolTickerDataBean.symbol)
}

// double price = 2;
inline void SymbolTickerDataBean::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double SymbolTickerDataBean::price() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.price)
  return _internal_price();
}
inline void SymbolTickerDataBean::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.price)
}
inline double SymbolTickerDataBean::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void SymbolTickerDataBean::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double percentage = 3;
inline void SymbolTickerDataBean::clear_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_ = 0;
}
inline double SymbolTickerDataBean::percentage() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.percentage)
  return _internal_percentage();
}
inline void SymbolTickerDataBean::set_percentage(double value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.percentage)
}
inline double SymbolTickerDataBean::_internal_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.percentage_;
}
inline void SymbolTickerDataBean::_internal_set_percentage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_ = value;
}

// string currency = 4;
inline void SymbolTickerDataBean::clear_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& SymbolTickerDataBean::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolTickerDataBean::set_currency(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.currency)
}
inline std::string* SymbolTickerDataBean::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SymbolTickerDataBean.currency)
  return _s;
}
inline const std::string& SymbolTickerDataBean::_internal_currency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.currency_.Get();
}
inline void SymbolTickerDataBean::_internal_set_currency(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* SymbolTickerDataBean::_internal_mutable_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* SymbolTickerDataBean::release_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.SymbolTickerDataBean.currency)
  return _impl_.currency_.Release();
}
inline void SymbolTickerDataBean::set_allocated_currency(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.SymbolTickerDataBean.currency)
}

// double markPrice = 5;
inline void SymbolTickerDataBean::clear_markprice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.markprice_ = 0;
}
inline double SymbolTickerDataBean::markprice() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.markPrice)
  return _internal_markprice();
}
inline void SymbolTickerDataBean::set_markprice(double value) {
  _internal_set_markprice(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.markPrice)
}
inline double SymbolTickerDataBean::_internal_markprice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.markprice_;
}
inline void SymbolTickerDataBean::_internal_set_markprice(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.markprice_ = value;
}

// double indexPrice = 6;
inline void SymbolTickerDataBean::clear_indexprice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indexprice_ = 0;
}
inline double SymbolTickerDataBean::indexprice() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.indexPrice)
  return _internal_indexprice();
}
inline void SymbolTickerDataBean::set_indexprice(double value) {
  _internal_set_indexprice(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.indexPrice)
}
inline double SymbolTickerDataBean::_internal_indexprice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.indexprice_;
}
inline void SymbolTickerDataBean::_internal_set_indexprice(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indexprice_ = value;
}

// string fundingRate = 7;
inline void SymbolTickerDataBean::clear_fundingrate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fundingrate_.ClearToEmpty();
}
inline const std::string& SymbolTickerDataBean::fundingrate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.fundingRate)
  return _internal_fundingrate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolTickerDataBean::set_fundingrate(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fundingrate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.fundingRate)
}
inline std::string* SymbolTickerDataBean::mutable_fundingrate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fundingrate();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SymbolTickerDataBean.fundingRate)
  return _s;
}
inline const std::string& SymbolTickerDataBean::_internal_fundingrate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fundingrate_.Get();
}
inline void SymbolTickerDataBean::_internal_set_fundingrate(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fundingrate_.Set(value, GetArena());
}
inline std::string* SymbolTickerDataBean::_internal_mutable_fundingrate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fundingrate_.Mutable( GetArena());
}
inline std::string* SymbolTickerDataBean::release_fundingrate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.SymbolTickerDataBean.fundingRate)
  return _impl_.fundingrate_.Release();
}
inline void SymbolTickerDataBean::set_allocated_fundingrate(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fundingrate_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.fundingrate_.IsDefault()) {
    _impl_.fundingrate_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.SymbolTickerDataBean.fundingRate)
}

// string nextFundingTime = 8;
inline void SymbolTickerDataBean::clear_nextfundingtime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nextfundingtime_.ClearToEmpty();
}
inline const std::string& SymbolTickerDataBean::nextfundingtime() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.nextFundingTime)
  return _internal_nextfundingtime();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolTickerDataBean::set_nextfundingtime(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nextfundingtime_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.nextFundingTime)
}
inline std::string* SymbolTickerDataBean::mutable_nextfundingtime() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nextfundingtime();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SymbolTickerDataBean.nextFundingTime)
  return _s;
}
inline const std::string& SymbolTickerDataBean::_internal_nextfundingtime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nextfundingtime_.Get();
}
inline void SymbolTickerDataBean::_internal_set_nextfundingtime(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nextfundingtime_.Set(value, GetArena());
}
inline std::string* SymbolTickerDataBean::_internal_mutable_nextfundingtime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nextfundingtime_.Mutable( GetArena());
}
inline std::string* SymbolTickerDataBean::release_nextfundingtime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.SymbolTickerDataBean.nextFundingTime)
  return _impl_.nextfundingtime_.Release();
}
inline void SymbolTickerDataBean::set_allocated_nextfundingtime(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nextfundingtime_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nextfundingtime_.IsDefault()) {
    _impl_.nextfundingtime_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.SymbolTickerDataBean.nextFundingTime)
}

// bool priceChanged = 9;
inline void SymbolTickerDataBean::clear_pricechanged() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pricechanged_ = false;
}
inline bool SymbolTickerDataBean::pricechanged() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.priceChanged)
  return _internal_pricechanged();
}
inline void SymbolTickerDataBean::set_pricechanged(bool value) {
  _internal_set_pricechanged(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.priceChanged)
}
inline bool SymbolTickerDataBean::_internal_pricechanged() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pricechanged_;
}
inline void SymbolTickerDataBean::_internal_set_pricechanged(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pricechanged_ = value;
}

// double riseSpeed = 10;
inline void SymbolTickerDataBean::clear_risespeed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.risespeed_ = 0;
}
inline double SymbolTickerDataBean::risespeed() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.riseSpeed)
  return _internal_risespeed();
}
inline void SymbolTickerDataBean::set_risespeed(double value) {
  _internal_set_risespeed(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.riseSpeed)
}
inline double SymbolTickerDataBean::_internal_risespeed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.risespeed_;
}
inline void SymbolTickerDataBean::_internal_set_risespeed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.risespeed_ = value;
}

// repeated string labels = 11;
inline int SymbolTickerDataBean::_internal_labels_size() const {
  return _internal_labels().size();
}
inline int SymbolTickerDataBean::labels_size() const {
  return _internal_labels_size();
}
inline void SymbolTickerDataBean::clear_labels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.labels_.Clear();
}
inline std::string* SymbolTickerDataBean::add_labels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_labels()->Add();
  // @@protoc_insertion_point(field_add_mutable:lampyris.crypto.protocol.quote.SymbolTickerDataBean.labels)
  return _s;
}
inline const std::string& SymbolTickerDataBean::labels(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTickerDataBean.labels)
  return _internal_labels().Get(index);
}
inline std::string* SymbolTickerDataBean::mutable_labels(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SymbolTickerDataBean.labels)
  return _internal_mutable_labels()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SymbolTickerDataBean::set_labels(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_labels()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTickerDataBean.labels)
}
template <typename Arg_, typename... Args_>
inline void SymbolTickerDataBean::add_labels(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_labels(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.SymbolTickerDataBean.labels)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SymbolTickerDataBean::labels() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.SymbolTickerDataBean.labels)
  return _internal_labels();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SymbolTickerDataBean::mutable_labels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.SymbolTickerDataBean.labels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_labels();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SymbolTickerDataBean::_internal_labels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.labels_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SymbolTickerDataBean::_internal_mutable_labels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.labels_;
}

// -------------------------------------------------------------------

// ReqSubscribeTickerData

// bool isCancel = 1;
inline void ReqSubscribeTickerData::clear_iscancel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iscancel_ = false;
}
inline bool ReqSubscribeTickerData::iscancel() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqSubscribeTickerData.isCancel)
  return _internal_iscancel();
}
inline void ReqSubscribeTickerData::set_iscancel(bool value) {
  _internal_set_iscancel(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqSubscribeTickerData.isCancel)
}
inline bool ReqSubscribeTickerData::_internal_iscancel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iscancel_;
}
inline void ReqSubscribeTickerData::_internal_set_iscancel(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iscancel_ = value;
}

// bool isAscending = 2;
inline void ReqSubscribeTickerData::clear_isascending() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isascending_ = false;
}
inline bool ReqSubscribeTickerData::isascending() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqSubscribeTickerData.isAscending)
  return _internal_isascending();
}
inline void ReqSubscribeTickerData::set_isascending(bool value) {
  _internal_set_isascending(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqSubscribeTickerData.isAscending)
}
inline bool ReqSubscribeTickerData::_internal_isascending() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isascending_;
}
inline void ReqSubscribeTickerData::_internal_set_isascending(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isascending_ = value;
}

// .lampyris.crypto.protocol.quote.SymbolTickerDataSortType sortType = 3;
inline void ReqSubscribeTickerData::clear_sorttype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sorttype_ = 0;
}
inline ::lampyris::crypto::protocol::quote::SymbolTickerDataSortType ReqSubscribeTickerData::sorttype() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqSubscribeTickerData.sortType)
  return _internal_sorttype();
}
inline void ReqSubscribeTickerData::set_sorttype(::lampyris::crypto::protocol::quote::SymbolTickerDataSortType value) {
  _internal_set_sorttype(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqSubscribeTickerData.sortType)
}
inline ::lampyris::crypto::protocol::quote::SymbolTickerDataSortType ReqSubscribeTickerData::_internal_sorttype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::lampyris::crypto::protocol::quote::SymbolTickerDataSortType>(_impl_.sorttype_);
}
inline void ReqSubscribeTickerData::_internal_set_sorttype(::lampyris::crypto::protocol::quote::SymbolTickerDataSortType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sorttype_ = value;
}

// -------------------------------------------------------------------

// ResSubscribeTickerData

// repeated .lampyris.crypto.protocol.quote.SymbolTickerDataBean beanList = 1;
inline int ResSubscribeTickerData::_internal_beanlist_size() const {
  return _internal_beanlist().size();
}
inline int ResSubscribeTickerData::beanlist_size() const {
  return _internal_beanlist_size();
}
inline void ResSubscribeTickerData::clear_beanlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.beanlist_.Clear();
}
inline ::lampyris::crypto::protocol::quote::SymbolTickerDataBean* ResSubscribeTickerData::mutable_beanlist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ResSubscribeTickerData.beanList)
  return _internal_mutable_beanlist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>* ResSubscribeTickerData::mutable_beanlist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.ResSubscribeTickerData.beanList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_beanlist();
}
inline const ::lampyris::crypto::protocol::quote::SymbolTickerDataBean& ResSubscribeTickerData::beanlist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ResSubscribeTickerData.beanList)
  return _internal_beanlist().Get(index);
}
inline ::lampyris::crypto::protocol::quote::SymbolTickerDataBean* ResSubscribeTickerData::add_beanlist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::lampyris::crypto::protocol::quote::SymbolTickerDataBean* _add = _internal_mutable_beanlist()->Add();
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.ResSubscribeTickerData.beanList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>& ResSubscribeTickerData::beanlist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.ResSubscribeTickerData.beanList)
  return _internal_beanlist();
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>&
ResSubscribeTickerData::_internal_beanlist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.beanlist_;
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTickerDataBean>*
ResSubscribeTickerData::_internal_mutable_beanlist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.beanlist_;
}

// -------------------------------------------------------------------

// ReqSubscribeTradeData

// repeated string symbols = 1;
inline int ReqSubscribeTradeData::_internal_symbols_size() const {
  return _internal_symbols().size();
}
inline int ReqSubscribeTradeData::symbols_size() const {
  return _internal_symbols_size();
}
inline void ReqSubscribeTradeData::clear_symbols() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbols_.Clear();
}
inline std::string* ReqSubscribeTradeData::add_symbols() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_symbols()->Add();
  // @@protoc_insertion_point(field_add_mutable:lampyris.crypto.protocol.quote.ReqSubscribeTradeData.symbols)
  return _s;
}
inline const std::string& ReqSubscribeTradeData::symbols(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqSubscribeTradeData.symbols)
  return _internal_symbols().Get(index);
}
inline std::string* ReqSubscribeTradeData::mutable_symbols(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ReqSubscribeTradeData.symbols)
  return _internal_mutable_symbols()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ReqSubscribeTradeData::set_symbols(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_symbols()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqSubscribeTradeData.symbols)
}
template <typename Arg_, typename... Args_>
inline void ReqSubscribeTradeData::add_symbols(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_symbols(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.ReqSubscribeTradeData.symbols)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReqSubscribeTradeData::symbols() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.ReqSubscribeTradeData.symbols)
  return _internal_symbols();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReqSubscribeTradeData::mutable_symbols() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.ReqSubscribeTradeData.symbols)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_symbols();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReqSubscribeTradeData::_internal_symbols() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbols_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReqSubscribeTradeData::_internal_mutable_symbols() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.symbols_;
}

// bool isCancel = 2;
inline void ReqSubscribeTradeData::clear_iscancel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iscancel_ = false;
}
inline bool ReqSubscribeTradeData::iscancel() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqSubscribeTradeData.isCancel)
  return _internal_iscancel();
}
inline void ReqSubscribeTradeData::set_iscancel(bool value) {
  _internal_set_iscancel(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqSubscribeTradeData.isCancel)
}
inline bool ReqSubscribeTradeData::_internal_iscancel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iscancel_;
}
inline void ReqSubscribeTradeData::_internal_set_iscancel(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iscancel_ = value;
}

// -------------------------------------------------------------------

// SymbolTradeDataBean

// string symbol = 1;
inline void SymbolTradeDataBean::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SymbolTradeDataBean::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeDataBean.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolTradeDataBean::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTradeDataBean.symbol)
}
inline std::string* SymbolTradeDataBean::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SymbolTradeDataBean.symbol)
  return _s;
}
inline const std::string& SymbolTradeDataBean::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void SymbolTradeDataBean::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SymbolTradeDataBean::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SymbolTradeDataBean::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.SymbolTradeDataBean.symbol)
  return _impl_.symbol_.Release();
}
inline void SymbolTradeDataBean::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.SymbolTradeDataBean.symbol)
}

// repeated .lampyris.crypto.protocol.quote.TradeDataBean beanList = 2;
inline int SymbolTradeDataBean::_internal_beanlist_size() const {
  return _internal_beanlist().size();
}
inline int SymbolTradeDataBean::beanlist_size() const {
  return _internal_beanlist_size();
}
inline void SymbolTradeDataBean::clear_beanlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.beanlist_.Clear();
}
inline ::lampyris::crypto::protocol::quote::TradeDataBean* SymbolTradeDataBean::mutable_beanlist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SymbolTradeDataBean.beanList)
  return _internal_mutable_beanlist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::TradeDataBean>* SymbolTradeDataBean::mutable_beanlist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.SymbolTradeDataBean.beanList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_beanlist();
}
inline const ::lampyris::crypto::protocol::quote::TradeDataBean& SymbolTradeDataBean::beanlist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeDataBean.beanList)
  return _internal_beanlist().Get(index);
}
inline ::lampyris::crypto::protocol::quote::TradeDataBean* SymbolTradeDataBean::add_beanlist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::lampyris::crypto::protocol::quote::TradeDataBean* _add = _internal_mutable_beanlist()->Add();
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.SymbolTradeDataBean.beanList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::TradeDataBean>& SymbolTradeDataBean::beanlist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.SymbolTradeDataBean.beanList)
  return _internal_beanlist();
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::TradeDataBean>&
SymbolTradeDataBean::_internal_beanlist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.beanlist_;
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::TradeDataBean>*
SymbolTradeDataBean::_internal_mutable_beanlist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.beanlist_;
}

// -------------------------------------------------------------------

// TradeDataBean

// string symbol = 1;
inline void TradeDataBean::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& TradeDataBean::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.TradeDataBean.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeDataBean::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.TradeDataBean.symbol)
}
inline std::string* TradeDataBean::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.TradeDataBean.symbol)
  return _s;
}
inline const std::string& TradeDataBean::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void TradeDataBean::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* TradeDataBean::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* TradeDataBean::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.TradeDataBean.symbol)
  return _impl_.symbol_.Release();
}
inline void TradeDataBean::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.TradeDataBean.symbol)
}

// int64 timestamp = 2;
inline void TradeDataBean::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t TradeDataBean::timestamp() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.TradeDataBean.timestamp)
  return _internal_timestamp();
}
inline void TradeDataBean::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.TradeDataBean.timestamp)
}
inline ::int64_t TradeDataBean::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void TradeDataBean::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// double price = 3;
inline void TradeDataBean::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double TradeDataBean::price() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.TradeDataBean.price)
  return _internal_price();
}
inline void TradeDataBean::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.TradeDataBean.price)
}
inline double TradeDataBean::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void TradeDataBean::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double volume = 4;
inline void TradeDataBean::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = 0;
}
inline double TradeDataBean::volume() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.TradeDataBean.volume)
  return _internal_volume();
}
inline void TradeDataBean::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.TradeDataBean.volume)
}
inline double TradeDataBean::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline void TradeDataBean::_internal_set_volume(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = value;
}

// bool isBuy = 5;
inline void TradeDataBean::clear_isbuy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isbuy_ = false;
}
inline bool TradeDataBean::isbuy() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.TradeDataBean.isBuy)
  return _internal_isbuy();
}
inline void TradeDataBean::set_isbuy(bool value) {
  _internal_set_isbuy(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.TradeDataBean.isBuy)
}
inline bool TradeDataBean::_internal_isbuy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isbuy_;
}
inline void TradeDataBean::_internal_set_isbuy(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isbuy_ = value;
}

// int32 count = 6;
inline void TradeDataBean::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = 0;
}
inline ::int32_t TradeDataBean::count() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.TradeDataBean.count)
  return _internal_count();
}
inline void TradeDataBean::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.TradeDataBean.count)
}
inline ::int32_t TradeDataBean::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void TradeDataBean::_internal_set_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// ReqSubscribeCandlestickUpdate

// repeated string symbols = 1;
inline int ReqSubscribeCandlestickUpdate::_internal_symbols_size() const {
  return _internal_symbols().size();
}
inline int ReqSubscribeCandlestickUpdate::symbols_size() const {
  return _internal_symbols_size();
}
inline void ReqSubscribeCandlestickUpdate::clear_symbols() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbols_.Clear();
}
inline std::string* ReqSubscribeCandlestickUpdate::add_symbols() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_symbols()->Add();
  // @@protoc_insertion_point(field_add_mutable:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.symbols)
  return _s;
}
inline const std::string& ReqSubscribeCandlestickUpdate::symbols(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.symbols)
  return _internal_symbols().Get(index);
}
inline std::string* ReqSubscribeCandlestickUpdate::mutable_symbols(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.symbols)
  return _internal_mutable_symbols()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ReqSubscribeCandlestickUpdate::set_symbols(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_symbols()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.symbols)
}
template <typename Arg_, typename... Args_>
inline void ReqSubscribeCandlestickUpdate::add_symbols(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_symbols(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.symbols)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReqSubscribeCandlestickUpdate::symbols() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.symbols)
  return _internal_symbols();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReqSubscribeCandlestickUpdate::mutable_symbols() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.symbols)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_symbols();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReqSubscribeCandlestickUpdate::_internal_symbols() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbols_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReqSubscribeCandlestickUpdate::_internal_mutable_symbols() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.symbols_;
}

// string barSize = 2;
inline void ReqSubscribeCandlestickUpdate::clear_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.ClearToEmpty();
}
inline const std::string& ReqSubscribeCandlestickUpdate::barsize() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.barSize)
  return _internal_barsize();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqSubscribeCandlestickUpdate::set_barsize(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.barSize)
}
inline std::string* ReqSubscribeCandlestickUpdate::mutable_barsize() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_barsize();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.barSize)
  return _s;
}
inline const std::string& ReqSubscribeCandlestickUpdate::_internal_barsize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.barsize_.Get();
}
inline void ReqSubscribeCandlestickUpdate::_internal_set_barsize(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.Set(value, GetArena());
}
inline std::string* ReqSubscribeCandlestickUpdate::_internal_mutable_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.barsize_.Mutable( GetArena());
}
inline std::string* ReqSubscribeCandlestickUpdate::release_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.barSize)
  return _impl_.barsize_.Release();
}
inline void ReqSubscribeCandlestickUpdate::set_allocated_barsize(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.barsize_.IsDefault()) {
    _impl_.barsize_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.barSize)
}

// bool isCancel = 3;
inline void ReqSubscribeCandlestickUpdate::clear_iscancel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iscancel_ = false;
}
inline bool ReqSubscribeCandlestickUpdate::iscancel() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.isCancel)
  return _internal_iscancel();
}
inline void ReqSubscribeCandlestickUpdate::set_iscancel(bool value) {
  _internal_set_iscancel(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqSubscribeCandlestickUpdate.isCancel)
}
inline bool ReqSubscribeCandlestickUpdate::_internal_iscancel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iscancel_;
}
inline void ReqSubscribeCandlestickUpdate::_internal_set_iscancel(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iscancel_ = value;
}

// -------------------------------------------------------------------

// ReqCandlestickQuery

// string symbol = 1;
inline void ReqCandlestickQuery::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& ReqCandlestickQuery::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqCandlestickQuery.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqCandlestickQuery::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqCandlestickQuery.symbol)
}
inline std::string* ReqCandlestickQuery::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ReqCandlestickQuery.symbol)
  return _s;
}
inline const std::string& ReqCandlestickQuery::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void ReqCandlestickQuery::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* ReqCandlestickQuery::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* ReqCandlestickQuery::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.ReqCandlestickQuery.symbol)
  return _impl_.symbol_.Release();
}
inline void ReqCandlestickQuery::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.ReqCandlestickQuery.symbol)
}

// string barSize = 2;
inline void ReqCandlestickQuery::clear_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.ClearToEmpty();
}
inline const std::string& ReqCandlestickQuery::barsize() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqCandlestickQuery.barSize)
  return _internal_barsize();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqCandlestickQuery::set_barsize(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqCandlestickQuery.barSize)
}
inline std::string* ReqCandlestickQuery::mutable_barsize() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_barsize();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ReqCandlestickQuery.barSize)
  return _s;
}
inline const std::string& ReqCandlestickQuery::_internal_barsize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.barsize_.Get();
}
inline void ReqCandlestickQuery::_internal_set_barsize(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.Set(value, GetArena());
}
inline std::string* ReqCandlestickQuery::_internal_mutable_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.barsize_.Mutable( GetArena());
}
inline std::string* ReqCandlestickQuery::release_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.ReqCandlestickQuery.barSize)
  return _impl_.barsize_.Release();
}
inline void ReqCandlestickQuery::set_allocated_barsize(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.barsize_.IsDefault()) {
    _impl_.barsize_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.ReqCandlestickQuery.barSize)
}

// int64 startTime = 3;
inline void ReqCandlestickQuery::clear_starttime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.starttime_ = ::int64_t{0};
}
inline ::int64_t ReqCandlestickQuery::starttime() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqCandlestickQuery.startTime)
  return _internal_starttime();
}
inline void ReqCandlestickQuery::set_starttime(::int64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqCandlestickQuery.startTime)
}
inline ::int64_t ReqCandlestickQuery::_internal_starttime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.starttime_;
}
inline void ReqCandlestickQuery::_internal_set_starttime(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.starttime_ = value;
}

// int64 endTime = 4;
inline void ReqCandlestickQuery::clear_endtime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endtime_ = ::int64_t{0};
}
inline ::int64_t ReqCandlestickQuery::endtime() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqCandlestickQuery.endTime)
  return _internal_endtime();
}
inline void ReqCandlestickQuery::set_endtime(::int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqCandlestickQuery.endTime)
}
inline ::int64_t ReqCandlestickQuery::_internal_endtime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.endtime_;
}
inline void ReqCandlestickQuery::_internal_set_endtime(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endtime_ = value;
}

// int64 count = 5;
inline void ReqCandlestickQuery::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = ::int64_t{0};
}
inline ::int64_t ReqCandlestickQuery::count() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqCandlestickQuery.count)
  return _internal_count();
}
inline void ReqCandlestickQuery::set_count(::int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ReqCandlestickQuery.count)
}
inline ::int64_t ReqCandlestickQuery::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void ReqCandlestickQuery::_internal_set_count(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// ResCandlestickQuery

// string symbol = 1;
inline void ResCandlestickQuery::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& ResCandlestickQuery::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ResCandlestickQuery.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResCandlestickQuery::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ResCandlestickQuery.symbol)
}
inline std::string* ResCandlestickQuery::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ResCandlestickQuery.symbol)
  return _s;
}
inline const std::string& ResCandlestickQuery::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void ResCandlestickQuery::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* ResCandlestickQuery::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* ResCandlestickQuery::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.ResCandlestickQuery.symbol)
  return _impl_.symbol_.Release();
}
inline void ResCandlestickQuery::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.ResCandlestickQuery.symbol)
}

// string barSize = 2;
inline void ResCandlestickQuery::clear_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.ClearToEmpty();
}
inline const std::string& ResCandlestickQuery::barsize() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ResCandlestickQuery.barSize)
  return _internal_barsize();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResCandlestickQuery::set_barsize(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.ResCandlestickQuery.barSize)
}
inline std::string* ResCandlestickQuery::mutable_barsize() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_barsize();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ResCandlestickQuery.barSize)
  return _s;
}
inline const std::string& ResCandlestickQuery::_internal_barsize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.barsize_.Get();
}
inline void ResCandlestickQuery::_internal_set_barsize(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.Set(value, GetArena());
}
inline std::string* ResCandlestickQuery::_internal_mutable_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.barsize_.Mutable( GetArena());
}
inline std::string* ResCandlestickQuery::release_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.ResCandlestickQuery.barSize)
  return _impl_.barsize_.Release();
}
inline void ResCandlestickQuery::set_allocated_barsize(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.barsize_.IsDefault()) {
    _impl_.barsize_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.ResCandlestickQuery.barSize)
}

// repeated .lampyris.crypto.protocol.quote.CandlestickBean beanList = 3;
inline int ResCandlestickQuery::_internal_beanlist_size() const {
  return _internal_beanlist().size();
}
inline int ResCandlestickQuery::beanlist_size() const {
  return _internal_beanlist_size();
}
inline void ResCandlestickQuery::clear_beanlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.beanlist_.Clear();
}
inline ::lampyris::crypto::protocol::quote::CandlestickBean* ResCandlestickQuery::mutable_beanlist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ResCandlestickQuery.beanList)
  return _internal_mutable_beanlist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::CandlestickBean>* ResCandlestickQuery::mutable_beanlist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.ResCandlestickQuery.beanList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_beanlist();
}
inline const ::lampyris::crypto::protocol::quote::CandlestickBean& ResCandlestickQuery::beanlist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ResCandlestickQuery.beanList)
  return _internal_beanlist().Get(index);
}
inline ::lampyris::crypto::protocol::quote::CandlestickBean* ResCandlestickQuery::add_beanlist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::lampyris::crypto::protocol::quote::CandlestickBean* _add = _internal_mutable_beanlist()->Add();
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.ResCandlestickQuery.beanList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::CandlestickBean>& ResCandlestickQuery::beanlist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.ResCandlestickQuery.beanList)
  return _internal_beanlist();
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::CandlestickBean>&
ResCandlestickQuery::_internal_beanlist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.beanlist_;
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::CandlestickBean>*
ResCandlestickQuery::_internal_mutable_beanlist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.beanlist_;
}

// -------------------------------------------------------------------

// CandlestickUpdateBean

// string symbol = 1;
inline void CandlestickUpdateBean::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& CandlestickUpdateBean::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickUpdateBean.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CandlestickUpdateBean::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickUpdateBean.symbol)
}
inline std::string* CandlestickUpdateBean::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.CandlestickUpdateBean.symbol)
  return _s;
}
inline const std::string& CandlestickUpdateBean::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void CandlestickUpdateBean::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* CandlestickUpdateBean::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* CandlestickUpdateBean::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.CandlestickUpdateBean.symbol)
  return _impl_.symbol_.Release();
}
inline void CandlestickUpdateBean::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.CandlestickUpdateBean.symbol)
}

// string barSize = 2;
inline void CandlestickUpdateBean::clear_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.ClearToEmpty();
}
inline const std::string& CandlestickUpdateBean::barsize() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickUpdateBean.barSize)
  return _internal_barsize();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CandlestickUpdateBean::set_barsize(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickUpdateBean.barSize)
}
inline std::string* CandlestickUpdateBean::mutable_barsize() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_barsize();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.CandlestickUpdateBean.barSize)
  return _s;
}
inline const std::string& CandlestickUpdateBean::_internal_barsize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.barsize_.Get();
}
inline void CandlestickUpdateBean::_internal_set_barsize(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.Set(value, GetArena());
}
inline std::string* CandlestickUpdateBean::_internal_mutable_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.barsize_.Mutable( GetArena());
}
inline std::string* CandlestickUpdateBean::release_barsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.CandlestickUpdateBean.barSize)
  return _impl_.barsize_.Release();
}
inline void CandlestickUpdateBean::set_allocated_barsize(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barsize_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.barsize_.IsDefault()) {
    _impl_.barsize_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.CandlestickUpdateBean.barSize)
}

// .lampyris.crypto.protocol.quote.CandlestickBean bean = 3;
inline bool CandlestickUpdateBean::has_bean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bean_ != nullptr);
  return value;
}
inline void CandlestickUpdateBean::clear_bean() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bean_ != nullptr) _impl_.bean_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::lampyris::crypto::protocol::quote::CandlestickBean& CandlestickUpdateBean::_internal_bean() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::lampyris::crypto::protocol::quote::CandlestickBean* p = _impl_.bean_;
  return p != nullptr ? *p : reinterpret_cast<const ::lampyris::crypto::protocol::quote::CandlestickBean&>(::lampyris::crypto::protocol::quote::_CandlestickBean_default_instance_);
}
inline const ::lampyris::crypto::protocol::quote::CandlestickBean& CandlestickUpdateBean::bean() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickUpdateBean.bean)
  return _internal_bean();
}
inline void CandlestickUpdateBean::unsafe_arena_set_allocated_bean(::lampyris::crypto::protocol::quote::CandlestickBean* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bean_);
  }
  _impl_.bean_ = reinterpret_cast<::lampyris::crypto::protocol::quote::CandlestickBean*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lampyris.crypto.protocol.quote.CandlestickUpdateBean.bean)
}
inline ::lampyris::crypto::protocol::quote::CandlestickBean* CandlestickUpdateBean::release_bean() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lampyris::crypto::protocol::quote::CandlestickBean* released = _impl_.bean_;
  _impl_.bean_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::lampyris::crypto::protocol::quote::CandlestickBean* CandlestickUpdateBean::unsafe_arena_release_bean() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.CandlestickUpdateBean.bean)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::lampyris::crypto::protocol::quote::CandlestickBean* temp = _impl_.bean_;
  _impl_.bean_ = nullptr;
  return temp;
}
inline ::lampyris::crypto::protocol::quote::CandlestickBean* CandlestickUpdateBean::_internal_mutable_bean() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bean_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::lampyris::crypto::protocol::quote::CandlestickBean>(GetArena());
    _impl_.bean_ = reinterpret_cast<::lampyris::crypto::protocol::quote::CandlestickBean*>(p);
  }
  return _impl_.bean_;
}
inline ::lampyris::crypto::protocol::quote::CandlestickBean* CandlestickUpdateBean::mutable_bean() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::lampyris::crypto::protocol::quote::CandlestickBean* _msg = _internal_mutable_bean();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.CandlestickUpdateBean.bean)
  return _msg;
}
inline void CandlestickUpdateBean::set_allocated_bean(::lampyris::crypto::protocol::quote::CandlestickBean* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.bean_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bean_ = reinterpret_cast<::lampyris::crypto::protocol::quote::CandlestickBean*>(value);
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.CandlestickUpdateBean.bean)
}

// bool isEnd = 4;
inline void CandlestickUpdateBean::clear_isend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isend_ = false;
}
inline bool CandlestickUpdateBean::isend() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickUpdateBean.isEnd)
  return _internal_isend();
}
inline void CandlestickUpdateBean::set_isend(bool value) {
  _internal_set_isend(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickUpdateBean.isEnd)
}
inline bool CandlestickUpdateBean::_internal_isend() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isend_;
}
inline void CandlestickUpdateBean::_internal_set_isend(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isend_ = value;
}

// -------------------------------------------------------------------

// CandlestickBean

// int64 time = 1;
inline void CandlestickBean::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = ::int64_t{0};
}
inline ::int64_t CandlestickBean::time() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickBean.time)
  return _internal_time();
}
inline void CandlestickBean::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickBean.time)
}
inline ::int64_t CandlestickBean::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_;
}
inline void CandlestickBean::_internal_set_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = value;
}

// double open = 2;
inline void CandlestickBean::clear_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_ = 0;
}
inline double CandlestickBean::open() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickBean.open)
  return _internal_open();
}
inline void CandlestickBean::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickBean.open)
}
inline double CandlestickBean::_internal_open() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.open_;
}
inline void CandlestickBean::_internal_set_open(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_ = value;
}

// double high = 3;
inline void CandlestickBean::clear_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = 0;
}
inline double CandlestickBean::high() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickBean.high)
  return _internal_high();
}
inline void CandlestickBean::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickBean.high)
}
inline double CandlestickBean::_internal_high() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.high_;
}
inline void CandlestickBean::_internal_set_high(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = value;
}

// double low = 4;
inline void CandlestickBean::clear_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = 0;
}
inline double CandlestickBean::low() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickBean.low)
  return _internal_low();
}
inline void CandlestickBean::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickBean.low)
}
inline double CandlestickBean::_internal_low() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.low_;
}
inline void CandlestickBean::_internal_set_low(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = value;
}

// double close = 5;
inline void CandlestickBean::clear_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = 0;
}
inline double CandlestickBean::close() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickBean.close)
  return _internal_close();
}
inline void CandlestickBean::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickBean.close)
}
inline double CandlestickBean::_internal_close() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_;
}
inline void CandlestickBean::_internal_set_close(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = value;
}

// double volume = 6;
inline void CandlestickBean::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = 0;
}
inline double CandlestickBean::volume() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickBean.volume)
  return _internal_volume();
}
inline void CandlestickBean::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickBean.volume)
}
inline double CandlestickBean::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline void CandlestickBean::_internal_set_volume(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = value;
}

// double currency = 7;
inline void CandlestickBean::clear_currency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_ = 0;
}
inline double CandlestickBean::currency() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.CandlestickBean.currency)
  return _internal_currency();
}
inline void CandlestickBean::set_currency(double value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.CandlestickBean.currency)
}
inline double CandlestickBean::_internal_currency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.currency_;
}
inline void CandlestickBean::_internal_set_currency(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currency_ = value;
}

// -------------------------------------------------------------------

// ReqTradeRule

// repeated .lampyris.crypto.protocol.quote.SymbolTradeRuleBean beanList = 1;
inline int ReqTradeRule::_internal_beanlist_size() const {
  return _internal_beanlist().size();
}
inline int ReqTradeRule::beanlist_size() const {
  return _internal_beanlist_size();
}
inline void ReqTradeRule::clear_beanlist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.beanlist_.Clear();
}
inline ::lampyris::crypto::protocol::quote::SymbolTradeRuleBean* ReqTradeRule::mutable_beanlist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ReqTradeRule.beanList)
  return _internal_mutable_beanlist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>* ReqTradeRule::mutable_beanlist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.ReqTradeRule.beanList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_beanlist();
}
inline const ::lampyris::crypto::protocol::quote::SymbolTradeRuleBean& ReqTradeRule::beanlist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqTradeRule.beanList)
  return _internal_beanlist().Get(index);
}
inline ::lampyris::crypto::protocol::quote::SymbolTradeRuleBean* ReqTradeRule::add_beanlist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::lampyris::crypto::protocol::quote::SymbolTradeRuleBean* _add = _internal_mutable_beanlist()->Add();
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.ReqTradeRule.beanList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>& ReqTradeRule::beanlist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.ReqTradeRule.beanList)
  return _internal_beanlist();
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>&
ReqTradeRule::_internal_beanlist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.beanlist_;
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SymbolTradeRuleBean>*
ReqTradeRule::_internal_mutable_beanlist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.beanlist_;
}

// -------------------------------------------------------------------

// SymbolTradeRuleBean

// string symbol = 1;
inline void SymbolTradeRuleBean::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SymbolTradeRuleBean::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolTradeRuleBean::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.symbol)
}
inline std::string* SymbolTradeRuleBean::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.symbol)
  return _s;
}
inline const std::string& SymbolTradeRuleBean::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void SymbolTradeRuleBean::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SymbolTradeRuleBean::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SymbolTradeRuleBean::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.symbol)
  return _impl_.symbol_.Release();
}
inline void SymbolTradeRuleBean::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.symbol)
}

// double maxPrice = 2;
inline void SymbolTradeRuleBean::clear_maxprice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxprice_ = 0;
}
inline double SymbolTradeRuleBean::maxprice() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.maxPrice)
  return _internal_maxprice();
}
inline void SymbolTradeRuleBean::set_maxprice(double value) {
  _internal_set_maxprice(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.maxPrice)
}
inline double SymbolTradeRuleBean::_internal_maxprice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxprice_;
}
inline void SymbolTradeRuleBean::_internal_set_maxprice(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxprice_ = value;
}

// double minPrice = 3;
inline void SymbolTradeRuleBean::clear_minprice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minprice_ = 0;
}
inline double SymbolTradeRuleBean::minprice() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.minPrice)
  return _internal_minprice();
}
inline void SymbolTradeRuleBean::set_minprice(double value) {
  _internal_set_minprice(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.minPrice)
}
inline double SymbolTradeRuleBean::_internal_minprice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minprice_;
}
inline void SymbolTradeRuleBean::_internal_set_minprice(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minprice_ = value;
}

// double priceTickSize = 4;
inline void SymbolTradeRuleBean::clear_priceticksize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priceticksize_ = 0;
}
inline double SymbolTradeRuleBean::priceticksize() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.priceTickSize)
  return _internal_priceticksize();
}
inline void SymbolTradeRuleBean::set_priceticksize(double value) {
  _internal_set_priceticksize(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.priceTickSize)
}
inline double SymbolTradeRuleBean::_internal_priceticksize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.priceticksize_;
}
inline void SymbolTradeRuleBean::_internal_set_priceticksize(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priceticksize_ = value;
}

// double maxQuantity = 5;
inline void SymbolTradeRuleBean::clear_maxquantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxquantity_ = 0;
}
inline double SymbolTradeRuleBean::maxquantity() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.maxQuantity)
  return _internal_maxquantity();
}
inline void SymbolTradeRuleBean::set_maxquantity(double value) {
  _internal_set_maxquantity(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.maxQuantity)
}
inline double SymbolTradeRuleBean::_internal_maxquantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxquantity_;
}
inline void SymbolTradeRuleBean::_internal_set_maxquantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxquantity_ = value;
}

// double minQuantity = 6;
inline void SymbolTradeRuleBean::clear_minquantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minquantity_ = 0;
}
inline double SymbolTradeRuleBean::minquantity() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.minQuantity)
  return _internal_minquantity();
}
inline void SymbolTradeRuleBean::set_minquantity(double value) {
  _internal_set_minquantity(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.minQuantity)
}
inline double SymbolTradeRuleBean::_internal_minquantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minquantity_;
}
inline void SymbolTradeRuleBean::_internal_set_minquantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minquantity_ = value;
}

// double quantityTickSize = 7;
inline void SymbolTradeRuleBean::clear_quantityticksize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantityticksize_ = 0;
}
inline double SymbolTradeRuleBean::quantityticksize() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.quantityTickSize)
  return _internal_quantityticksize();
}
inline void SymbolTradeRuleBean::set_quantityticksize(double value) {
  _internal_set_quantityticksize(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.quantityTickSize)
}
inline double SymbolTradeRuleBean::_internal_quantityticksize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantityticksize_;
}
inline void SymbolTradeRuleBean::_internal_set_quantityticksize(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantityticksize_ = value;
}

// double minNotional = 8;
inline void SymbolTradeRuleBean::clear_minnotional() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minnotional_ = 0;
}
inline double SymbolTradeRuleBean::minnotional() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.minNotional)
  return _internal_minnotional();
}
inline void SymbolTradeRuleBean::set_minnotional(double value) {
  _internal_set_minnotional(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SymbolTradeRuleBean.minNotional)
}
inline double SymbolTradeRuleBean::_internal_minnotional() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minnotional_;
}
inline void SymbolTradeRuleBean::_internal_set_minnotional(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minnotional_ = value;
}

// -------------------------------------------------------------------

// MarketMonitorNoticeBean

// string symbol = 1;
inline void MarketMonitorNoticeBean::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& MarketMonitorNoticeBean::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketMonitorNoticeBean::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.symbol)
}
inline std::string* MarketMonitorNoticeBean::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.symbol)
  return _s;
}
inline const std::string& MarketMonitorNoticeBean::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void MarketMonitorNoticeBean::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* MarketMonitorNoticeBean::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* MarketMonitorNoticeBean::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.symbol)
  return _impl_.symbol_.Release();
}
inline void MarketMonitorNoticeBean::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.symbol)
}

// int64 timestamp = 2;
inline void MarketMonitorNoticeBean::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t MarketMonitorNoticeBean::timestamp() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.timestamp)
  return _internal_timestamp();
}
inline void MarketMonitorNoticeBean::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.timestamp)
}
inline ::int64_t MarketMonitorNoticeBean::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void MarketMonitorNoticeBean::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// int32 noticeType = 3;
inline void MarketMonitorNoticeBean::clear_noticetype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.noticetype_ = 0;
}
inline ::int32_t MarketMonitorNoticeBean::noticetype() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.noticeType)
  return _internal_noticetype();
}
inline void MarketMonitorNoticeBean::set_noticetype(::int32_t value) {
  _internal_set_noticetype(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.noticeType)
}
inline ::int32_t MarketMonitorNoticeBean::_internal_noticetype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.noticetype_;
}
inline void MarketMonitorNoticeBean::_internal_set_noticetype(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.noticetype_ = value;
}

// string value = 4;
inline void MarketMonitorNoticeBean::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& MarketMonitorNoticeBean::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketMonitorNoticeBean::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.value)
}
inline std::string* MarketMonitorNoticeBean::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.value)
  return _s;
}
inline const std::string& MarketMonitorNoticeBean::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void MarketMonitorNoticeBean::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* MarketMonitorNoticeBean::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* MarketMonitorNoticeBean::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.value)
  return _impl_.value_.Release();
}
inline void MarketMonitorNoticeBean::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.value)
}

// int32 noticeLevel = 5;
inline void MarketMonitorNoticeBean::clear_noticelevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.noticelevel_ = 0;
}
inline ::int32_t MarketMonitorNoticeBean::noticelevel() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.noticeLevel)
  return _internal_noticelevel();
}
inline void MarketMonitorNoticeBean::set_noticelevel(::int32_t value) {
  _internal_set_noticelevel(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.MarketMonitorNoticeBean.noticeLevel)
}
inline ::int32_t MarketMonitorNoticeBean::_internal_noticelevel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.noticelevel_;
}
inline void MarketMonitorNoticeBean::_internal_set_noticelevel(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.noticelevel_ = value;
}

// -------------------------------------------------------------------

// SelfSelectedSymbolInfoBean

// string symbol = 1;
inline void SelfSelectedSymbolInfoBean::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SelfSelectedSymbolInfoBean::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelfSelectedSymbolInfoBean::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.symbol)
}
inline std::string* SelfSelectedSymbolInfoBean::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.symbol)
  return _s;
}
inline const std::string& SelfSelectedSymbolInfoBean::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void SelfSelectedSymbolInfoBean::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SelfSelectedSymbolInfoBean::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SelfSelectedSymbolInfoBean::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.symbol)
  return _impl_.symbol_.Release();
}
inline void SelfSelectedSymbolInfoBean::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.symbol)
}

// int64 timestamp = 2;
inline void SelfSelectedSymbolInfoBean::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t SelfSelectedSymbolInfoBean::timestamp() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.timestamp)
  return _internal_timestamp();
}
inline void SelfSelectedSymbolInfoBean::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.timestamp)
}
inline ::int64_t SelfSelectedSymbolInfoBean::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void SelfSelectedSymbolInfoBean::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// double initialPrice = 3;
inline void SelfSelectedSymbolInfoBean::clear_initialprice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initialprice_ = 0;
}
inline double SelfSelectedSymbolInfoBean::initialprice() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.initialPrice)
  return _internal_initialprice();
}
inline void SelfSelectedSymbolInfoBean::set_initialprice(double value) {
  _internal_set_initialprice(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean.initialPrice)
}
inline double SelfSelectedSymbolInfoBean::_internal_initialprice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initialprice_;
}
inline void SelfSelectedSymbolInfoBean::_internal_set_initialprice(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initialprice_ = value;
}

// -------------------------------------------------------------------

// SelfSelectedSymbolGroupBean

// string name = 1;
inline void SelfSelectedSymbolGroupBean::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SelfSelectedSymbolGroupBean::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelfSelectedSymbolGroupBean::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.name)
}
inline std::string* SelfSelectedSymbolGroupBean::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.name)
  return _s;
}
inline const std::string& SelfSelectedSymbolGroupBean::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SelfSelectedSymbolGroupBean::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SelfSelectedSymbolGroupBean::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SelfSelectedSymbolGroupBean::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.name)
  return _impl_.name_.Release();
}
inline void SelfSelectedSymbolGroupBean::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.name)
}

// bool canDelete = 2;
inline void SelfSelectedSymbolGroupBean::clear_candelete() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candelete_ = false;
}
inline bool SelfSelectedSymbolGroupBean::candelete() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.canDelete)
  return _internal_candelete();
}
inline void SelfSelectedSymbolGroupBean::set_candelete(bool value) {
  _internal_set_candelete(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.canDelete)
}
inline bool SelfSelectedSymbolGroupBean::_internal_candelete() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.candelete_;
}
inline void SelfSelectedSymbolGroupBean::_internal_set_candelete(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candelete_ = value;
}

// int32 sortingOrder = 3;
inline void SelfSelectedSymbolGroupBean::clear_sortingorder() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sortingorder_ = 0;
}
inline ::int32_t SelfSelectedSymbolGroupBean::sortingorder() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.sortingOrder)
  return _internal_sortingorder();
}
inline void SelfSelectedSymbolGroupBean::set_sortingorder(::int32_t value) {
  _internal_set_sortingorder(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.sortingOrder)
}
inline ::int32_t SelfSelectedSymbolGroupBean::_internal_sortingorder() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sortingorder_;
}
inline void SelfSelectedSymbolGroupBean::_internal_set_sortingorder(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sortingorder_ = value;
}

// repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolInfoBean symbolList = 4;
inline int SelfSelectedSymbolGroupBean::_internal_symbollist_size() const {
  return _internal_symbollist().size();
}
inline int SelfSelectedSymbolGroupBean::symbollist_size() const {
  return _internal_symbollist_size();
}
inline void SelfSelectedSymbolGroupBean::clear_symbollist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbollist_.Clear();
}
inline ::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean* SelfSelectedSymbolGroupBean::mutable_symbollist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.symbolList)
  return _internal_mutable_symbollist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>* SelfSelectedSymbolGroupBean::mutable_symbollist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.symbolList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_symbollist();
}
inline const ::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean& SelfSelectedSymbolGroupBean::symbollist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.symbolList)
  return _internal_symbollist().Get(index);
}
inline ::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean* SelfSelectedSymbolGroupBean::add_symbollist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean* _add = _internal_mutable_symbollist()->Add();
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.symbolList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>& SelfSelectedSymbolGroupBean::symbollist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean.symbolList)
  return _internal_symbollist();
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>&
SelfSelectedSymbolGroupBean::_internal_symbollist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbollist_;
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolInfoBean>*
SelfSelectedSymbolGroupBean::_internal_mutable_symbollist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.symbollist_;
}

// -------------------------------------------------------------------

// ReqSelfSelectedSymbol

// repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean grouoList = 1;
inline int ReqSelfSelectedSymbol::_internal_grouolist_size() const {
  return _internal_grouolist().size();
}
inline int ReqSelfSelectedSymbol::grouolist_size() const {
  return _internal_grouolist_size();
}
inline void ReqSelfSelectedSymbol::clear_grouolist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grouolist_.Clear();
}
inline ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* ReqSelfSelectedSymbol::mutable_grouolist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol.grouoList)
  return _internal_mutable_grouolist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>* ReqSelfSelectedSymbol::mutable_grouolist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol.grouoList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_grouolist();
}
inline const ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean& ReqSelfSelectedSymbol::grouolist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol.grouoList)
  return _internal_grouolist().Get(index);
}
inline ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* ReqSelfSelectedSymbol::add_grouolist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* _add = _internal_mutable_grouolist()->Add();
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol.grouoList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>& ReqSelfSelectedSymbol::grouolist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.ReqSelfSelectedSymbol.grouoList)
  return _internal_grouolist();
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>&
ReqSelfSelectedSymbol::_internal_grouolist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.grouolist_;
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>*
ReqSelfSelectedSymbol::_internal_mutable_grouolist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.grouolist_;
}

// -------------------------------------------------------------------

// ResSelfSelectedSymbol

// repeated .lampyris.crypto.protocol.quote.SelfSelectedSymbolGroupBean grouoList = 1;
inline int ResSelfSelectedSymbol::_internal_grouolist_size() const {
  return _internal_grouolist().size();
}
inline int ResSelfSelectedSymbol::grouolist_size() const {
  return _internal_grouolist_size();
}
inline void ResSelfSelectedSymbol::clear_grouolist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grouolist_.Clear();
}
inline ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* ResSelfSelectedSymbol::mutable_grouolist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol.grouoList)
  return _internal_mutable_grouolist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>* ResSelfSelectedSymbol::mutable_grouolist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol.grouoList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_grouolist();
}
inline const ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean& ResSelfSelectedSymbol::grouolist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol.grouoList)
  return _internal_grouolist().Get(index);
}
inline ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* ResSelfSelectedSymbol::add_grouolist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean* _add = _internal_mutable_grouolist()->Add();
  // @@protoc_insertion_point(field_add:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol.grouoList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>& ResSelfSelectedSymbol::grouolist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lampyris.crypto.protocol.quote.ResSelfSelectedSymbol.grouoList)
  return _internal_grouolist();
}
inline const ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>&
ResSelfSelectedSymbol::_internal_grouolist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.grouolist_;
}
inline ::google::protobuf::RepeatedPtrField<::lampyris::crypto::protocol::quote::SelfSelectedSymbolGroupBean>*
ResSelfSelectedSymbol::_internal_mutable_grouolist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.grouolist_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace quote
}  // namespace protocol
}  // namespace crypto
}  // namespace lampyris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::lampyris::crypto::protocol::quote::SymbolTickerDataSortType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lampyris::crypto::protocol::quote::SymbolTickerDataSortType>() {
  return ::lampyris::crypto::protocol::quote::SymbolTickerDataSortType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // quote_2eproto_2epb_2eh
