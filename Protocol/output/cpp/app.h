// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: app.proto
// Protobuf C++ Version: 5.29.3

#ifndef app_2eproto_2epb_2eh
#define app_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_app_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_app_2eproto;
namespace lampyris {
namespace crypto {
namespace protocol {
namespace app {
class ReqHeartBeat;
struct ReqHeartBeatDefaultTypeInternal;
extern ReqHeartBeatDefaultTypeInternal _ReqHeartBeat_default_instance_;
class ReqLogin;
struct ReqLoginDefaultTypeInternal;
extern ReqLoginDefaultTypeInternal _ReqLogin_default_instance_;
class ReqLogout;
struct ReqLogoutDefaultTypeInternal;
extern ReqLogoutDefaultTypeInternal _ReqLogout_default_instance_;
class ReqUploadAppBehaviour;
struct ReqUploadAppBehaviourDefaultTypeInternal;
extern ReqUploadAppBehaviourDefaultTypeInternal _ReqUploadAppBehaviour_default_instance_;
class ResHeartBeat;
struct ResHeartBeatDefaultTypeInternal;
extern ResHeartBeatDefaultTypeInternal _ResHeartBeat_default_instance_;
class ResLogin;
struct ResLoginDefaultTypeInternal;
extern ResLoginDefaultTypeInternal _ResLogin_default_instance_;
class ResNotice;
struct ResNoticeDefaultTypeInternal;
extern ResNoticeDefaultTypeInternal _ResNotice_default_instance_;
}  // namespace app
}  // namespace protocol
}  // namespace crypto
}  // namespace lampyris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace lampyris {
namespace crypto {
namespace protocol {
namespace app {
enum NoticeType : int {
  Toast = 0,
  AlertDialog = 1,
  NoticeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NoticeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NoticeType_IsValid(int value);
extern const uint32_t NoticeType_internal_data_[];
constexpr NoticeType NoticeType_MIN = static_cast<NoticeType>(0);
constexpr NoticeType NoticeType_MAX = static_cast<NoticeType>(1);
constexpr int NoticeType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
NoticeType_descriptor();
template <typename T>
const std::string& NoticeType_Name(T value) {
  static_assert(std::is_same<T, NoticeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NoticeType_Name().");
  return NoticeType_Name(static_cast<NoticeType>(value));
}
template <>
inline const std::string& NoticeType_Name(NoticeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NoticeType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool NoticeType_Parse(absl::string_view name, NoticeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NoticeType>(
      NoticeType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ResNotice final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.app.ResNotice) */ {
 public:
  inline ResNotice() : ResNotice(nullptr) {}
  ~ResNotice() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResNotice* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResNotice));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResNotice(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResNotice(const ResNotice& from) : ResNotice(nullptr, from) {}
  inline ResNotice(ResNotice&& from) noexcept
      : ResNotice(nullptr, std::move(from)) {}
  inline ResNotice& operator=(const ResNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResNotice& operator=(ResNotice&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResNotice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResNotice* internal_default_instance() {
    return reinterpret_cast<const ResNotice*>(
        &_ResNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ResNotice& a, ResNotice& b) { a.Swap(&b); }
  inline void Swap(ResNotice* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResNotice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResNotice* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResNotice>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResNotice& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResNotice& from) { ResNotice::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResNotice* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.app.ResNotice"; }

 protected:
  explicit ResNotice(::google::protobuf::Arena* arena);
  ResNotice(::google::protobuf::Arena* arena, const ResNotice& from);
  ResNotice(::google::protobuf::Arena* arena, ResNotice&& from) noexcept
      : ResNotice(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // .lampyris.crypto.protocol.app.NoticeType type = 2;
  void clear_type() ;
  ::lampyris::crypto::protocol::app::NoticeType type() const;
  void set_type(::lampyris::crypto::protocol::app::NoticeType value);

  private:
  ::lampyris::crypto::protocol::app::NoticeType _internal_type() const;
  void _internal_set_type(::lampyris::crypto::protocol::app::NoticeType value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.app.ResNotice)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResNotice& from_msg);
    ::google::protobuf::internal::ArenaStringPtr content_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class ResLogin final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.app.ResLogin) */ {
 public:
  inline ResLogin() : ResLogin(nullptr) {}
  ~ResLogin() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResLogin* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResLogin));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResLogin(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResLogin(const ResLogin& from) : ResLogin(nullptr, from) {}
  inline ResLogin(ResLogin&& from) noexcept
      : ResLogin(nullptr, std::move(from)) {}
  inline ResLogin& operator=(const ResLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResLogin& operator=(ResLogin&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResLogin* internal_default_instance() {
    return reinterpret_cast<const ResLogin*>(
        &_ResLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ResLogin& a, ResLogin& b) { a.Swap(&b); }
  inline void Swap(ResLogin* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResLogin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResLogin* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResLogin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResLogin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResLogin& from) { ResLogin::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResLogin* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.app.ResLogin"; }

 protected:
  explicit ResLogin(::google::protobuf::Arena* arena);
  ResLogin(::google::protobuf::Arena* arena, const ResLogin& from);
  ResLogin(::google::protobuf::Arena* arena, ResLogin&& from) noexcept
      : ResLogin(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string errorMessage = 1;
  void clear_errormessage() ;
  const std::string& errormessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errormessage(Arg_&& arg, Args_... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* value);

  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(
      const std::string& value);
  std::string* _internal_mutable_errormessage();

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.app.ResLogin)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResLogin& from_msg);
    ::google::protobuf::internal::ArenaStringPtr errormessage_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class ResHeartBeat final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.app.ResHeartBeat) */ {
 public:
  inline ResHeartBeat() : ResHeartBeat(nullptr) {}
  ~ResHeartBeat() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResHeartBeat* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResHeartBeat));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResHeartBeat(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResHeartBeat(const ResHeartBeat& from) : ResHeartBeat(nullptr, from) {}
  inline ResHeartBeat(ResHeartBeat&& from) noexcept
      : ResHeartBeat(nullptr, std::move(from)) {}
  inline ResHeartBeat& operator=(const ResHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResHeartBeat& operator=(ResHeartBeat&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ResHeartBeat*>(
        &_ResHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ResHeartBeat& a, ResHeartBeat& b) { a.Swap(&b); }
  inline void Swap(ResHeartBeat* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResHeartBeat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResHeartBeat* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResHeartBeat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResHeartBeat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResHeartBeat& from) { ResHeartBeat::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResHeartBeat* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.app.ResHeartBeat"; }

 protected:
  explicit ResHeartBeat(::google::protobuf::Arena* arena);
  ResHeartBeat(::google::protobuf::Arena* arena, const ResHeartBeat& from);
  ResHeartBeat(::google::protobuf::Arena* arena, ResHeartBeat&& from) noexcept
      : ResHeartBeat(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerTimeFieldNumber = 1,
  };
  // int64 serverTime = 1;
  void clear_servertime() ;
  ::int64_t servertime() const;
  void set_servertime(::int64_t value);

  private:
  ::int64_t _internal_servertime() const;
  void _internal_set_servertime(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.app.ResHeartBeat)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResHeartBeat& from_msg);
    ::int64_t servertime_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class ReqUploadAppBehaviour final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.app.ReqUploadAppBehaviour) */ {
 public:
  inline ReqUploadAppBehaviour() : ReqUploadAppBehaviour(nullptr) {}
  ~ReqUploadAppBehaviour() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqUploadAppBehaviour* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqUploadAppBehaviour));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqUploadAppBehaviour(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqUploadAppBehaviour(const ReqUploadAppBehaviour& from) : ReqUploadAppBehaviour(nullptr, from) {}
  inline ReqUploadAppBehaviour(ReqUploadAppBehaviour&& from) noexcept
      : ReqUploadAppBehaviour(nullptr, std::move(from)) {}
  inline ReqUploadAppBehaviour& operator=(const ReqUploadAppBehaviour& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUploadAppBehaviour& operator=(ReqUploadAppBehaviour&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUploadAppBehaviour& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUploadAppBehaviour* internal_default_instance() {
    return reinterpret_cast<const ReqUploadAppBehaviour*>(
        &_ReqUploadAppBehaviour_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ReqUploadAppBehaviour& a, ReqUploadAppBehaviour& b) { a.Swap(&b); }
  inline void Swap(ReqUploadAppBehaviour* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUploadAppBehaviour* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqUploadAppBehaviour* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqUploadAppBehaviour>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqUploadAppBehaviour& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqUploadAppBehaviour& from) { ReqUploadAppBehaviour::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqUploadAppBehaviour* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.app.ReqUploadAppBehaviour"; }

 protected:
  explicit ReqUploadAppBehaviour(::google::protobuf::Arena* arena);
  ReqUploadAppBehaviour(::google::protobuf::Arena* arena, const ReqUploadAppBehaviour& from);
  ReqUploadAppBehaviour(::google::protobuf::Arena* arena, ReqUploadAppBehaviour&& from) noexcept
      : ReqUploadAppBehaviour(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kIsEnterFieldNumber = 3,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // int64 timestamp = 2;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // bool isEnter = 3;
  void clear_isenter() ;
  bool isenter() const;
  void set_isenter(bool value);

  private:
  bool _internal_isenter() const;
  void _internal_set_isenter(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.app.ReqUploadAppBehaviour)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqUploadAppBehaviour& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::int64_t timestamp_;
    bool isenter_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class ReqLogout final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.app.ReqLogout) */ {
 public:
  inline ReqLogout() : ReqLogout(nullptr) {}
  ~ReqLogout() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqLogout* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqLogout));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqLogout(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqLogout(const ReqLogout& from) : ReqLogout(nullptr, from) {}
  inline ReqLogout(ReqLogout&& from) noexcept
      : ReqLogout(nullptr, std::move(from)) {}
  inline ReqLogout& operator=(const ReqLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLogout& operator=(ReqLogout&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLogout& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLogout* internal_default_instance() {
    return reinterpret_cast<const ReqLogout*>(
        &_ReqLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ReqLogout& a, ReqLogout& b) { a.Swap(&b); }
  inline void Swap(ReqLogout* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLogout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqLogout* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqLogout>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqLogout& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqLogout& from) { ReqLogout::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqLogout* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.app.ReqLogout"; }

 protected:
  explicit ReqLogout(::google::protobuf::Arena* arena);
  ReqLogout(::google::protobuf::Arena* arena, const ReqLogout& from);
  ReqLogout(::google::protobuf::Arena* arena, ReqLogout&& from) noexcept
      : ReqLogout(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceMACFieldNumber = 1,
  };
  // string deviceMAC = 1;
  void clear_devicemac() ;
  const std::string& devicemac() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicemac(Arg_&& arg, Args_... args);
  std::string* mutable_devicemac();
  PROTOBUF_NODISCARD std::string* release_devicemac();
  void set_allocated_devicemac(std::string* value);

  private:
  const std::string& _internal_devicemac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicemac(
      const std::string& value);
  std::string* _internal_mutable_devicemac();

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.app.ReqLogout)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqLogout& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devicemac_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class ReqLogin final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.app.ReqLogin) */ {
 public:
  inline ReqLogin() : ReqLogin(nullptr) {}
  ~ReqLogin() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqLogin* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqLogin));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqLogin(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqLogin(const ReqLogin& from) : ReqLogin(nullptr, from) {}
  inline ReqLogin(ReqLogin&& from) noexcept
      : ReqLogin(nullptr, std::move(from)) {}
  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLogin& operator=(ReqLogin&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLogin* internal_default_instance() {
    return reinterpret_cast<const ReqLogin*>(
        &_ReqLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ReqLogin& a, ReqLogin& b) { a.Swap(&b); }
  inline void Swap(ReqLogin* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLogin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqLogin* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqLogin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqLogin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqLogin& from) { ReqLogin::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqLogin* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.app.ReqLogin"; }

 protected:
  explicit ReqLogin(::google::protobuf::Arena* arena);
  ReqLogin(::google::protobuf::Arena* arena, const ReqLogin& from);
  ReqLogin(::google::protobuf::Arena* arena, ReqLogin&& from) noexcept
      : ReqLogin(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceMACFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
  };
  // string deviceMAC = 1;
  void clear_devicemac() ;
  const std::string& devicemac() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicemac(Arg_&& arg, Args_... args);
  std::string* mutable_devicemac();
  PROTOBUF_NODISCARD std::string* release_devicemac();
  void set_allocated_devicemac(std::string* value);

  private:
  const std::string& _internal_devicemac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicemac(
      const std::string& value);
  std::string* _internal_mutable_devicemac();

  public:
  // string deviceName = 2;
  void clear_devicename() ;
  const std::string& devicename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicename(Arg_&& arg, Args_... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* value);

  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(
      const std::string& value);
  std::string* _internal_mutable_devicename();

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.app.ReqLogin)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqLogin& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devicemac_;
    ::google::protobuf::internal::ArenaStringPtr devicename_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class ReqHeartBeat final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lampyris.crypto.protocol.app.ReqHeartBeat) */ {
 public:
  inline ReqHeartBeat() : ReqHeartBeat(nullptr) {}
  ~ReqHeartBeat() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReqHeartBeat* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReqHeartBeat));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReqHeartBeat(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReqHeartBeat(const ReqHeartBeat& from) : ReqHeartBeat(nullptr, from) {}
  inline ReqHeartBeat(ReqHeartBeat&& from) noexcept
      : ReqHeartBeat(nullptr, std::move(from)) {}
  inline ReqHeartBeat& operator=(const ReqHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHeartBeat& operator=(ReqHeartBeat&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ReqHeartBeat*>(
        &_ReqHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ReqHeartBeat& a, ReqHeartBeat& b) { a.Swap(&b); }
  inline void Swap(ReqHeartBeat* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqHeartBeat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqHeartBeat* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReqHeartBeat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReqHeartBeat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReqHeartBeat& from) { ReqHeartBeat::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReqHeartBeat* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "lampyris.crypto.protocol.app.ReqHeartBeat"; }

 protected:
  explicit ReqHeartBeat(::google::protobuf::Arena* arena);
  ReqHeartBeat(::google::protobuf::Arena* arena, const ReqHeartBeat& from);
  ReqHeartBeat(::google::protobuf::Arena* arena, ReqHeartBeat&& from) noexcept
      : ReqHeartBeat(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientTimeFieldNumber = 1,
    kIsForegroundFieldNumber = 2,
  };
  // int64 clientTime = 1;
  void clear_clienttime() ;
  ::int64_t clienttime() const;
  void set_clienttime(::int64_t value);

  private:
  ::int64_t _internal_clienttime() const;
  void _internal_set_clienttime(::int64_t value);

  public:
  // bool isForeground = 2;
  void clear_isforeground() ;
  bool isforeground() const;
  void set_isforeground(bool value);

  private:
  bool _internal_isforeground() const;
  void _internal_set_isforeground(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lampyris.crypto.protocol.app.ReqHeartBeat)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReqHeartBeat& from_msg);
    ::int64_t clienttime_;
    bool isforeground_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ReqLogin

// string deviceMAC = 1;
inline void ReqLogin::clear_devicemac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicemac_.ClearToEmpty();
}
inline const std::string& ReqLogin::devicemac() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ReqLogin.deviceMAC)
  return _internal_devicemac();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqLogin::set_devicemac(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicemac_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ReqLogin.deviceMAC)
}
inline std::string* ReqLogin::mutable_devicemac() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devicemac();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.app.ReqLogin.deviceMAC)
  return _s;
}
inline const std::string& ReqLogin::_internal_devicemac() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devicemac_.Get();
}
inline void ReqLogin::_internal_set_devicemac(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicemac_.Set(value, GetArena());
}
inline std::string* ReqLogin::_internal_mutable_devicemac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devicemac_.Mutable( GetArena());
}
inline std::string* ReqLogin::release_devicemac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.app.ReqLogin.deviceMAC)
  return _impl_.devicemac_.Release();
}
inline void ReqLogin::set_allocated_devicemac(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicemac_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.devicemac_.IsDefault()) {
    _impl_.devicemac_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.app.ReqLogin.deviceMAC)
}

// string deviceName = 2;
inline void ReqLogin::clear_devicename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicename_.ClearToEmpty();
}
inline const std::string& ReqLogin::devicename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ReqLogin.deviceName)
  return _internal_devicename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqLogin::set_devicename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ReqLogin.deviceName)
}
inline std::string* ReqLogin::mutable_devicename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.app.ReqLogin.deviceName)
  return _s;
}
inline const std::string& ReqLogin::_internal_devicename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devicename_.Get();
}
inline void ReqLogin::_internal_set_devicename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicename_.Set(value, GetArena());
}
inline std::string* ReqLogin::_internal_mutable_devicename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devicename_.Mutable( GetArena());
}
inline std::string* ReqLogin::release_devicename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.app.ReqLogin.deviceName)
  return _impl_.devicename_.Release();
}
inline void ReqLogin::set_allocated_devicename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.devicename_.IsDefault()) {
    _impl_.devicename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.app.ReqLogin.deviceName)
}

// -------------------------------------------------------------------

// ReqLogout

// string deviceMAC = 1;
inline void ReqLogout::clear_devicemac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicemac_.ClearToEmpty();
}
inline const std::string& ReqLogout::devicemac() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ReqLogout.deviceMAC)
  return _internal_devicemac();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqLogout::set_devicemac(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicemac_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ReqLogout.deviceMAC)
}
inline std::string* ReqLogout::mutable_devicemac() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devicemac();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.app.ReqLogout.deviceMAC)
  return _s;
}
inline const std::string& ReqLogout::_internal_devicemac() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devicemac_.Get();
}
inline void ReqLogout::_internal_set_devicemac(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicemac_.Set(value, GetArena());
}
inline std::string* ReqLogout::_internal_mutable_devicemac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devicemac_.Mutable( GetArena());
}
inline std::string* ReqLogout::release_devicemac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.app.ReqLogout.deviceMAC)
  return _impl_.devicemac_.Release();
}
inline void ReqLogout::set_allocated_devicemac(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicemac_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.devicemac_.IsDefault()) {
    _impl_.devicemac_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.app.ReqLogout.deviceMAC)
}

// -------------------------------------------------------------------

// ResLogin

// string errorMessage = 1;
inline void ResLogin::clear_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& ResLogin::errormessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ResLogin.errorMessage)
  return _internal_errormessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResLogin::set_errormessage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ResLogin.errorMessage)
}
inline std::string* ResLogin::mutable_errormessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.app.ResLogin.errorMessage)
  return _s;
}
inline const std::string& ResLogin::_internal_errormessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.errormessage_.Get();
}
inline void ResLogin::_internal_set_errormessage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(value, GetArena());
}
inline std::string* ResLogin::_internal_mutable_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.errormessage_.Mutable( GetArena());
}
inline std::string* ResLogin::release_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.app.ResLogin.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void ResLogin::set_allocated_errormessage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.app.ResLogin.errorMessage)
}

// -------------------------------------------------------------------

// ReqHeartBeat

// int64 clientTime = 1;
inline void ReqHeartBeat::clear_clienttime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clienttime_ = ::int64_t{0};
}
inline ::int64_t ReqHeartBeat::clienttime() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ReqHeartBeat.clientTime)
  return _internal_clienttime();
}
inline void ReqHeartBeat::set_clienttime(::int64_t value) {
  _internal_set_clienttime(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ReqHeartBeat.clientTime)
}
inline ::int64_t ReqHeartBeat::_internal_clienttime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clienttime_;
}
inline void ReqHeartBeat::_internal_set_clienttime(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clienttime_ = value;
}

// bool isForeground = 2;
inline void ReqHeartBeat::clear_isforeground() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isforeground_ = false;
}
inline bool ReqHeartBeat::isforeground() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ReqHeartBeat.isForeground)
  return _internal_isforeground();
}
inline void ReqHeartBeat::set_isforeground(bool value) {
  _internal_set_isforeground(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ReqHeartBeat.isForeground)
}
inline bool ReqHeartBeat::_internal_isforeground() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isforeground_;
}
inline void ReqHeartBeat::_internal_set_isforeground(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isforeground_ = value;
}

// -------------------------------------------------------------------

// ResHeartBeat

// int64 serverTime = 1;
inline void ResHeartBeat::clear_servertime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servertime_ = ::int64_t{0};
}
inline ::int64_t ResHeartBeat::servertime() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ResHeartBeat.serverTime)
  return _internal_servertime();
}
inline void ResHeartBeat::set_servertime(::int64_t value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ResHeartBeat.serverTime)
}
inline ::int64_t ResHeartBeat::_internal_servertime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.servertime_;
}
inline void ResHeartBeat::_internal_set_servertime(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.servertime_ = value;
}

// -------------------------------------------------------------------

// ReqUploadAppBehaviour

// string symbol = 1;
inline void ReqUploadAppBehaviour::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& ReqUploadAppBehaviour::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ReqUploadAppBehaviour.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReqUploadAppBehaviour::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ReqUploadAppBehaviour.symbol)
}
inline std::string* ReqUploadAppBehaviour::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.app.ReqUploadAppBehaviour.symbol)
  return _s;
}
inline const std::string& ReqUploadAppBehaviour::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void ReqUploadAppBehaviour::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* ReqUploadAppBehaviour::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* ReqUploadAppBehaviour::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.app.ReqUploadAppBehaviour.symbol)
  return _impl_.symbol_.Release();
}
inline void ReqUploadAppBehaviour::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.app.ReqUploadAppBehaviour.symbol)
}

// int64 timestamp = 2;
inline void ReqUploadAppBehaviour::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t ReqUploadAppBehaviour::timestamp() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ReqUploadAppBehaviour.timestamp)
  return _internal_timestamp();
}
inline void ReqUploadAppBehaviour::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ReqUploadAppBehaviour.timestamp)
}
inline ::int64_t ReqUploadAppBehaviour::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void ReqUploadAppBehaviour::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// bool isEnter = 3;
inline void ReqUploadAppBehaviour::clear_isenter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isenter_ = false;
}
inline bool ReqUploadAppBehaviour::isenter() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ReqUploadAppBehaviour.isEnter)
  return _internal_isenter();
}
inline void ReqUploadAppBehaviour::set_isenter(bool value) {
  _internal_set_isenter(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ReqUploadAppBehaviour.isEnter)
}
inline bool ReqUploadAppBehaviour::_internal_isenter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isenter_;
}
inline void ReqUploadAppBehaviour::_internal_set_isenter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isenter_ = value;
}

// -------------------------------------------------------------------

// ResNotice

// string content = 1;
inline void ResNotice::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ResNotice::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ResNotice.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResNotice::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ResNotice.content)
}
inline std::string* ResNotice::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:lampyris.crypto.protocol.app.ResNotice.content)
  return _s;
}
inline const std::string& ResNotice::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void ResNotice::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* ResNotice::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* ResNotice::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lampyris.crypto.protocol.app.ResNotice.content)
  return _impl_.content_.Release();
}
inline void ResNotice::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:lampyris.crypto.protocol.app.ResNotice.content)
}

// .lampyris.crypto.protocol.app.NoticeType type = 2;
inline void ResNotice::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::lampyris::crypto::protocol::app::NoticeType ResNotice::type() const {
  // @@protoc_insertion_point(field_get:lampyris.crypto.protocol.app.ResNotice.type)
  return _internal_type();
}
inline void ResNotice::set_type(::lampyris::crypto::protocol::app::NoticeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lampyris.crypto.protocol.app.ResNotice.type)
}
inline ::lampyris::crypto::protocol::app::NoticeType ResNotice::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::lampyris::crypto::protocol::app::NoticeType>(_impl_.type_);
}
inline void ResNotice::_internal_set_type(::lampyris::crypto::protocol::app::NoticeType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace app
}  // namespace protocol
}  // namespace crypto
}  // namespace lampyris


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::lampyris::crypto::protocol::app::NoticeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lampyris::crypto::protocol::app::NoticeType>() {
  return ::lampyris::crypto::protocol::app::NoticeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // app_2eproto_2epb_2eh
