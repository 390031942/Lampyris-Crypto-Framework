// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: trading.proto
// Protobuf C++ Version: 5.29.4

#include "trading.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace lampyris {
namespace crypto {
namespace protocol {
namespace trading {

inline constexpr ReqQueryPositions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqQueryPositions::ReqQueryPositions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqQueryPositionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqQueryPositionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqQueryPositionsDefaultTypeInternal() {}
  union {
    ReqQueryPositions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqQueryPositionsDefaultTypeInternal _ReqQueryPositions_default_instance_;

inline constexpr ReqQueryLeverageBracket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqQueryLeverageBracket::ReqQueryLeverageBracket(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqQueryLeverageBracketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqQueryLeverageBracketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqQueryLeverageBracketDefaultTypeInternal() {}
  union {
    ReqQueryLeverageBracket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqQueryLeverageBracketDefaultTypeInternal _ReqQueryLeverageBracket_default_instance_;

inline constexpr ReqQueryLeverage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqQueryLeverage::ReqQueryLeverage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqQueryLeverageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqQueryLeverageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqQueryLeverageDefaultTypeInternal() {}
  union {
    ReqQueryLeverage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqQueryLeverageDefaultTypeInternal _ReqQueryLeverage_default_instance_;

inline constexpr ReqQueryHistoricalOrders::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        begintime_{::int64_t{0}},
        endtime_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqQueryHistoricalOrders::ReqQueryHistoricalOrders(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqQueryHistoricalOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqQueryHistoricalOrdersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqQueryHistoricalOrdersDefaultTypeInternal() {}
  union {
    ReqQueryHistoricalOrders _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqQueryHistoricalOrdersDefaultTypeInternal _ReqQueryHistoricalOrders_default_instance_;

inline constexpr ReqQueryActiveOrders::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqQueryActiveOrders::ReqQueryActiveOrders(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqQueryActiveOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqQueryActiveOrdersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqQueryActiveOrdersDefaultTypeInternal() {}
  union {
    ReqQueryActiveOrders _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqQueryActiveOrdersDefaultTypeInternal _ReqQueryActiveOrders_default_instance_;

inline constexpr ReqOneKeyClosePosition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbols_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqOneKeyClosePosition::ReqOneKeyClosePosition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqOneKeyClosePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqOneKeyClosePositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqOneKeyClosePositionDefaultTypeInternal() {}
  union {
    ReqOneKeyClosePosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqOneKeyClosePositionDefaultTypeInternal _ReqOneKeyClosePosition_default_instance_;

inline constexpr ReqCancelOrder::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : orderid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqCancelOrder::ReqCancelOrder(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqCancelOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqCancelOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqCancelOrderDefaultTypeInternal() {}
  union {
    ReqCancelOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqCancelOrderDefaultTypeInternal _ReqCancelOrder_default_instance_;

inline constexpr LeverageBracketBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : leverage_{0},
        notionalcap_{0},
        notionalfloor_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LeverageBracketBean::LeverageBracketBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LeverageBracketBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeverageBracketBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeverageBracketBeanDefaultTypeInternal() {}
  union {
    LeverageBracketBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeverageBracketBeanDefaultTypeInternal _LeverageBracketBean_default_instance_;

inline constexpr LeverageBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        leverage_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LeverageBean::LeverageBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LeverageBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeverageBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeverageBeanDefaultTypeInternal() {}
  union {
    LeverageBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeverageBeanDefaultTypeInternal _LeverageBean_default_instance_;

inline constexpr ConditionTriggerBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::lampyris::crypto::protocol::trading::ConditionOrderTriggerType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConditionTriggerBean::ConditionTriggerBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConditionTriggerBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionTriggerBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionTriggerBeanDefaultTypeInternal() {}
  union {
    ConditionTriggerBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionTriggerBeanDefaultTypeInternal _ConditionTriggerBean_default_instance_;

inline constexpr SymbolLeverageBracketBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : beanlist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SymbolLeverageBracketBean::SymbolLeverageBracketBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SymbolLeverageBracketBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolLeverageBracketBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolLeverageBracketBeanDefaultTypeInternal() {}
  union {
    SymbolLeverageBracketBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolLeverageBracketBeanDefaultTypeInternal _SymbolLeverageBracketBean_default_instance_;

inline constexpr ResQueryLeverage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : beanlist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResQueryLeverage::ResQueryLeverage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResQueryLeverageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResQueryLeverageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResQueryLeverageDefaultTypeInternal() {}
  union {
    ResQueryLeverage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResQueryLeverageDefaultTypeInternal _ResQueryLeverage_default_instance_;

inline constexpr ReqSetLeverage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : beanlist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReqSetLeverage::ReqSetLeverage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqSetLeverageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqSetLeverageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqSetLeverageDefaultTypeInternal() {}
  union {
    ReqSetLeverage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqSetLeverageDefaultTypeInternal _ReqSetLeverage_default_instance_;

inline constexpr OrderBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : condition_{},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        side_{static_cast< ::lampyris::crypto::protocol::trading::TradeSide >(0)},
        ordertype_{static_cast< ::lampyris::crypto::protocol::trading::OrderType >(0)},
        quantity_{0},
        cashquantity_{0},
        price_{0},
        goodtilldate_{::int64_t{0}},
        tiftype_{static_cast< ::lampyris::crypto::protocol::trading::TimeInForceType >(0)},
        reduceonly_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OrderBean::OrderBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OrderBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderBeanDefaultTypeInternal() {}
  union {
    OrderBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderBeanDefaultTypeInternal _OrderBean_default_instance_;

inline constexpr ResQueryLeverageBracket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : beanlist_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResQueryLeverageBracket::ResQueryLeverageBracket(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResQueryLeverageBracketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResQueryLeverageBracketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResQueryLeverageBracketDefaultTypeInternal() {}
  union {
    ResQueryLeverageBracket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResQueryLeverageBracketDefaultTypeInternal _ResQueryLeverageBracket_default_instance_;

inline constexpr ReqPlaceOrder::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        orderbean_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ReqPlaceOrder::ReqPlaceOrder(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqPlaceOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqPlaceOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqPlaceOrderDefaultTypeInternal() {}
  union {
    ReqPlaceOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqPlaceOrderDefaultTypeInternal _ReqPlaceOrder_default_instance_;

inline constexpr ReqModifyOrder::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        orderid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        orderbean_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ReqModifyOrder::ReqModifyOrder(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReqModifyOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReqModifyOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReqModifyOrderDefaultTypeInternal() {}
  union {
    ReqModifyOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReqModifyOrderDefaultTypeInternal _ReqModifyOrder_default_instance_;

inline constexpr OrderStatusBean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        orderbean_{nullptr},
        orderid_{0},
        status_{static_cast< ::lampyris::crypto::protocol::trading::OrderStatus >(0)},
        filledquantity_{0},
        avgfilledprice_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OrderStatusBean::OrderStatusBean(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OrderStatusBeanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderStatusBeanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderStatusBeanDefaultTypeInternal() {}
  union {
    OrderStatusBean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderStatusBeanDefaultTypeInternal _OrderStatusBean_default_instance_;
}  // namespace trading
}  // namespace protocol
}  // namespace crypto
}  // namespace lampyris
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_trading_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_trading_2eproto = nullptr;
const ::uint32_t
    TableStruct_trading_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ConditionTriggerBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ConditionTriggerBean, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ConditionTriggerBean, _impl_.value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.ordertype_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.quantity_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.cashquantity_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.tiftype_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.goodtilldate_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.reduceonly_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderBean, _impl_.condition_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderStatusBean, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderStatusBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderStatusBean, _impl_.orderbean_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderStatusBean, _impl_.orderid_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderStatusBean, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderStatusBean, _impl_.filledquantity_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::OrderStatusBean, _impl_.avgfilledprice_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqPlaceOrder, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqPlaceOrder, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqPlaceOrder, _impl_.orderbean_),
        0,
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqModifyOrder, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqModifyOrder, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqModifyOrder, _impl_.orderid_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqModifyOrder, _impl_.orderbean_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqCancelOrder, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqCancelOrder, _impl_.orderid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqOneKeyClosePosition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqOneKeyClosePosition, _impl_.symbols_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryActiveOrders, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryActiveOrders, _impl_.symbol_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryHistoricalOrders, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryHistoricalOrders, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryHistoricalOrders, _impl_.begintime_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryHistoricalOrders, _impl_.endtime_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryPositions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryPositions, _impl_.symbol_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::LeverageBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::LeverageBean, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::LeverageBean, _impl_.leverage_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqSetLeverage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqSetLeverage, _impl_.beanlist_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryLeverage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryLeverage, _impl_.symbol_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ResQueryLeverage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ResQueryLeverage, _impl_.beanlist_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryLeverageBracket, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ReqQueryLeverageBracket, _impl_.symbol_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ResQueryLeverageBracket, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::ResQueryLeverageBracket, _impl_.beanlist_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::SymbolLeverageBracketBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::SymbolLeverageBracketBean, _impl_.beanlist_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::LeverageBracketBean, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::LeverageBracketBean, _impl_.leverage_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::LeverageBracketBean, _impl_.notionalcap_),
        PROTOBUF_FIELD_OFFSET(::lampyris::crypto::protocol::trading::LeverageBracketBean, _impl_.notionalfloor_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ConditionTriggerBean)},
        {10, -1, -1, sizeof(::lampyris::crypto::protocol::trading::OrderBean)},
        {28, 41, -1, sizeof(::lampyris::crypto::protocol::trading::OrderStatusBean)},
        {46, 55, -1, sizeof(::lampyris::crypto::protocol::trading::ReqPlaceOrder)},
        {56, 66, -1, sizeof(::lampyris::crypto::protocol::trading::ReqModifyOrder)},
        {68, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ReqCancelOrder)},
        {77, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ReqOneKeyClosePosition)},
        {86, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ReqQueryActiveOrders)},
        {95, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ReqQueryHistoricalOrders)},
        {106, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ReqQueryPositions)},
        {115, -1, -1, sizeof(::lampyris::crypto::protocol::trading::LeverageBean)},
        {125, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ReqSetLeverage)},
        {134, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ReqQueryLeverage)},
        {143, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ResQueryLeverage)},
        {152, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ReqQueryLeverageBracket)},
        {161, -1, -1, sizeof(::lampyris::crypto::protocol::trading::ResQueryLeverageBracket)},
        {170, -1, -1, sizeof(::lampyris::crypto::protocol::trading::SymbolLeverageBracketBean)},
        {179, -1, -1, sizeof(::lampyris::crypto::protocol::trading::LeverageBracketBean)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::lampyris::crypto::protocol::trading::_ConditionTriggerBean_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_OrderBean_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_OrderStatusBean_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqPlaceOrder_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqModifyOrder_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqCancelOrder_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqOneKeyClosePosition_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqQueryActiveOrders_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqQueryHistoricalOrders_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqQueryPositions_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_LeverageBean_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqSetLeverage_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqQueryLeverage_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ResQueryLeverage_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ReqQueryLeverageBracket_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_ResQueryLeverageBracket_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_SymbolLeverageBracketBean_default_instance_._instance,
    &::lampyris::crypto::protocol::trading::_LeverageBracketBean_default_instance_._instance,
};
const char descriptor_table_protodef_trading_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rtrading.proto\022 lampyris.crypto.protoco"
    "l.trading\"p\n\024ConditionTriggerBean\022I\n\004typ"
    "e\030\001 \001(\0162;.lampyris.crypto.protocol.tradi"
    "ng.ConditionOrderTriggerType\022\r\n\005value\030\002 "
    "\001(\t\"\206\003\n\tOrderBean\022\016\n\006symbol\030\001 \001(\t\0229\n\004sid"
    "e\030\002 \001(\0162+.lampyris.crypto.protocol.tradi"
    "ng.TradeSide\022>\n\torderType\030\003 \001(\0162+.lampyr"
    "is.crypto.protocol.trading.OrderType\022\020\n\010"
    "quantity\030\004 \001(\001\022\024\n\014cashQuantity\030\005 \001(\001\022\r\n\005"
    "price\030\006 \001(\001\022B\n\007tifType\030\007 \001(\01621.lampyris."
    "crypto.protocol.trading.TimeInForceType\022"
    "\024\n\014goodTillDate\030\010 \001(\003\022\022\n\nreduceOnly\030\t \001("
    "\010\022I\n\tcondition\030\n \003(\01326.lampyris.crypto.p"
    "rotocol.trading.ConditionTriggerBean\"\321\001\n"
    "\017OrderStatusBean\022>\n\torderBean\030\001 \001(\0132+.la"
    "mpyris.crypto.protocol.trading.OrderBean"
    "\022\017\n\007orderId\030\002 \001(\005\022=\n\006status\030\003 \001(\0162-.lamp"
    "yris.crypto.protocol.trading.OrderStatus"
    "\022\026\n\016filledQuantity\030\004 \001(\001\022\026\n\016avgFilledPri"
    "ce\030\005 \001(\001\"O\n\rReqPlaceOrder\022>\n\torderBean\030\001"
    " \001(\0132+.lampyris.crypto.protocol.trading."
    "OrderBean\"a\n\016ReqModifyOrder\022\017\n\007orderId\030\001"
    " \001(\t\022>\n\torderBean\030\002 \001(\0132+.lampyris.crypt"
    "o.protocol.trading.OrderBean\"!\n\016ReqCance"
    "lOrder\022\017\n\007orderId\030\001 \001(\t\")\n\026ReqOneKeyClos"
    "ePosition\022\017\n\007symbols\030\001 \003(\t\"&\n\024ReqQueryAc"
    "tiveOrders\022\016\n\006symbol\030\001 \001(\t\"N\n\030ReqQueryHi"
    "storicalOrders\022\016\n\006symbol\030\001 \001(\t\022\021\n\tbeginT"
    "ime\030\002 \001(\003\022\017\n\007endTime\030\003 \001(\003\"#\n\021ReqQueryPo"
    "sitions\022\016\n\006symbol\030\001 \001(\t\"0\n\014LeverageBean\022"
    "\016\n\006symbol\030\001 \001(\t\022\020\n\010leverage\030\002 \001(\005\"R\n\016Req"
    "SetLeverage\022@\n\010beanList\030\001 \003(\0132..lampyris"
    ".crypto.protocol.trading.LeverageBean\"\"\n"
    "\020ReqQueryLeverage\022\016\n\006symbol\030\001 \001(\t\"T\n\020Res"
    "QueryLeverage\022@\n\010beanList\030\001 \003(\0132..lampyr"
    "is.crypto.protocol.trading.LeverageBean\""
    ")\n\027ReqQueryLeverageBracket\022\016\n\006symbol\030\001 \001"
    "(\t\"h\n\027ResQueryLeverageBracket\022M\n\010beanLis"
    "t\030\001 \003(\0132;.lampyris.crypto.protocol.tradi"
    "ng.SymbolLeverageBracketBean\"d\n\031SymbolLe"
    "verageBracketBean\022G\n\010beanList\030\001 \003(\01325.la"
    "mpyris.crypto.protocol.trading.LeverageB"
    "racketBean\"S\n\023LeverageBracketBean\022\020\n\010lev"
    "erage\030\001 \001(\005\022\023\n\013notionalCap\030\002 \001(\005\022\025\n\rnoti"
    "onalFloor\030\003 \001(\005*\212\001\n\tOrderType\022\t\n\005LIMIT\020\000"
    "\022\n\n\006MARKET\020\001\022\r\n\tSTOP_LOSS\020\002\022\017\n\013TAKE_PROF"
    "IT\020\003\022\024\n\020STOP_LOSS_MARKET\020\004\022\026\n\022TAKE_PROFI"
    "T_MARKET\020\005\022\030\n\024TRAILING_STOP_MARKET\020\006*w\n\013"
    "OrderStatus\022\007\n\003NEW\020\000\022\024\n\020PARTIALLY_FILLED"
    "\020\001\022\n\n\006FILLED\020\002\022\014\n\010CANCELED\020\003\022\014\n\010REJECTED"
    "\020\004\022\013\n\007EXPIRED\020\005\022\024\n\020EXPIRED_IN_MATCH\020\006*>\n"
    "\017TimeInForceType\022\007\n\003GTC\020\000\022\007\n\003IOC\020\001\022\007\n\003FO"
    "K\020\002\022\007\n\003GTX\020\003\022\007\n\003GTD\020\004*\036\n\tTradeSide\022\007\n\003BU"
    "Y\020\000\022\010\n\004SELL\020\001*D\n\031ConditionOrderTriggerTy"
    "pe\022\t\n\005PRICE\020\000\022\016\n\nRISE_SPEED\020\001\022\014\n\010INTERVA"
    "L\020\002b\006proto3"
};
static ::absl::once_flag descriptor_table_trading_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_trading_2eproto = {
    false,
    false,
    2211,
    descriptor_table_protodef_trading_2eproto,
    "trading.proto",
    &descriptor_table_trading_2eproto_once,
    nullptr,
    0,
    18,
    schemas,
    file_default_instances,
    TableStruct_trading_2eproto::offsets,
    file_level_enum_descriptors_trading_2eproto,
    file_level_service_descriptors_trading_2eproto,
};
namespace lampyris {
namespace crypto {
namespace protocol {
namespace trading {
const ::google::protobuf::EnumDescriptor* OrderType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t OrderType_internal_data_[] = {
    458752u, 0u, };
bool OrderType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t OrderStatus_internal_data_[] = {
    458752u, 0u, };
bool OrderStatus_IsValid(int value) {
  return 0 <= value && value <= 6;
}
const ::google::protobuf::EnumDescriptor* TimeInForceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t TimeInForceType_internal_data_[] = {
    327680u, 0u, };
bool TimeInForceType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* TradeSide_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t TradeSide_internal_data_[] = {
    131072u, 0u, };
bool TradeSide_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* ConditionOrderTriggerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t ConditionOrderTriggerType_internal_data_[] = {
    196608u, 0u, };
bool ConditionOrderTriggerType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class ConditionTriggerBean::_Internal {
 public:
};

ConditionTriggerBean::ConditionTriggerBean(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ConditionTriggerBean)
}
inline PROTOBUF_NDEBUG_INLINE ConditionTriggerBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ConditionTriggerBean& from_msg)
      : value_(arena, from.value_),
        _cached_size_{0} {}

ConditionTriggerBean::ConditionTriggerBean(
    ::google::protobuf::Arena* arena,
    const ConditionTriggerBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConditionTriggerBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ConditionTriggerBean)
}
inline PROTOBUF_NDEBUG_INLINE ConditionTriggerBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_(arena),
        _cached_size_{0} {}

inline void ConditionTriggerBean::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
ConditionTriggerBean::~ConditionTriggerBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ConditionTriggerBean)
  SharedDtor(*this);
}
inline void ConditionTriggerBean::SharedDtor(MessageLite& self) {
  ConditionTriggerBean& this_ = static_cast<ConditionTriggerBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.value_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ConditionTriggerBean::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ConditionTriggerBean(arena);
}
constexpr auto ConditionTriggerBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConditionTriggerBean),
                                            alignof(ConditionTriggerBean));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ConditionTriggerBean::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ConditionTriggerBean_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ConditionTriggerBean::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ConditionTriggerBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ConditionTriggerBean::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ConditionTriggerBean>(), &ConditionTriggerBean::ByteSizeLong,
            &ConditionTriggerBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ConditionTriggerBean, _impl_._cached_size_),
        false,
    },
    &ConditionTriggerBean::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ConditionTriggerBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 67, 2> ConditionTriggerBean::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ConditionTriggerBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ConditionTriggerBean, _impl_.value_)}},
    // .lampyris.crypto.protocol.trading.ConditionOrderTriggerType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConditionTriggerBean, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ConditionTriggerBean, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .lampyris.crypto.protocol.trading.ConditionOrderTriggerType type = 1;
    {PROTOBUF_FIELD_OFFSET(ConditionTriggerBean, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ConditionTriggerBean, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\65\0\5\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.ConditionTriggerBean"
    "value"
  }},
};

PROTOBUF_NOINLINE void ConditionTriggerBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ConditionTriggerBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ConditionTriggerBean::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ConditionTriggerBean& this_ = static_cast<const ConditionTriggerBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ConditionTriggerBean::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ConditionTriggerBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ConditionTriggerBean)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .lampyris.crypto.protocol.trading.ConditionOrderTriggerType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // string value = 2;
          if (!this_._internal_value().empty()) {
            const std::string& _s = this_._internal_value();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.ConditionTriggerBean.value");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ConditionTriggerBean)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ConditionTriggerBean::ByteSizeLong(const MessageLite& base) {
          const ConditionTriggerBean& this_ = static_cast<const ConditionTriggerBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ConditionTriggerBean::ByteSizeLong() const {
          const ConditionTriggerBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ConditionTriggerBean)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string value = 2;
            if (!this_._internal_value().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_value());
            }
            // .lampyris.crypto.protocol.trading.ConditionOrderTriggerType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ConditionTriggerBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConditionTriggerBean*>(&to_msg);
  auto& from = static_cast<const ConditionTriggerBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ConditionTriggerBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionTriggerBean::CopyFrom(const ConditionTriggerBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ConditionTriggerBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConditionTriggerBean::InternalSwap(ConditionTriggerBean* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata ConditionTriggerBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OrderBean::_Internal {
 public:
};

OrderBean::OrderBean(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.OrderBean)
}
inline PROTOBUF_NDEBUG_INLINE OrderBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::OrderBean& from_msg)
      : condition_{visibility, arena, from.condition_},
        symbol_(arena, from.symbol_),
        _cached_size_{0} {}

OrderBean::OrderBean(
    ::google::protobuf::Arena* arena,
    const OrderBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OrderBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, side_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, side_),
           offsetof(Impl_, reduceonly_) -
               offsetof(Impl_, side_) +
               sizeof(Impl_::reduceonly_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.OrderBean)
}
inline PROTOBUF_NDEBUG_INLINE OrderBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : condition_{visibility, arena},
        symbol_(arena),
        _cached_size_{0} {}

inline void OrderBean::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, side_),
           0,
           offsetof(Impl_, reduceonly_) -
               offsetof(Impl_, side_) +
               sizeof(Impl_::reduceonly_));
}
OrderBean::~OrderBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.OrderBean)
  SharedDtor(*this);
}
inline void OrderBean::SharedDtor(MessageLite& self) {
  OrderBean& this_ = static_cast<OrderBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* OrderBean::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) OrderBean(arena);
}
constexpr auto OrderBean::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.condition_) +
          decltype(OrderBean::_impl_.condition_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(OrderBean), alignof(OrderBean), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&OrderBean::PlacementNew_,
                                 sizeof(OrderBean),
                                 alignof(OrderBean));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull OrderBean::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_OrderBean_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &OrderBean::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<OrderBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &OrderBean::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<OrderBean>(), &OrderBean::ByteSizeLong,
            &OrderBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(OrderBean, _impl_._cached_size_),
        false,
    },
    &OrderBean::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* OrderBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 65, 2> OrderBean::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::OrderBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.symbol_)}},
    // .lampyris.crypto.protocol.trading.TradeSide side = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBean, _impl_.side_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.side_)}},
    // .lampyris.crypto.protocol.trading.OrderType orderType = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBean, _impl_.ordertype_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.ordertype_)}},
    // double quantity = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.quantity_)}},
    // double cashQuantity = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.cashquantity_)}},
    // double price = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.price_)}},
    // .lampyris.crypto.protocol.trading.TimeInForceType tifType = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderBean, _impl_.tiftype_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.tiftype_)}},
    // int64 goodTillDate = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(OrderBean, _impl_.goodtilldate_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.goodtilldate_)}},
    // bool reduceOnly = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OrderBean, _impl_.reduceonly_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.reduceonly_)}},
    // repeated .lampyris.crypto.protocol.trading.ConditionTriggerBean condition = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.condition_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .lampyris.crypto.protocol.trading.TradeSide side = 2;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .lampyris.crypto.protocol.trading.OrderType orderType = 3;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.ordertype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double quantity = 4;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.quantity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double cashQuantity = 5;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.cashquantity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double price = 6;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .lampyris.crypto.protocol.trading.TimeInForceType tifType = 7;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.tiftype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 goodTillDate = 8;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.goodtilldate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool reduceOnly = 9;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.reduceonly_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .lampyris.crypto.protocol.trading.ConditionTriggerBean condition = 10;
    {PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.condition_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ConditionTriggerBean>()},
  }}, {{
    "\52\6\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.OrderBean"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void OrderBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.OrderBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.condition_.Clear();
  _impl_.symbol_.ClearToEmpty();
  ::memset(&_impl_.side_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reduceonly_) -
      reinterpret_cast<char*>(&_impl_.side_)) + sizeof(_impl_.reduceonly_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OrderBean::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OrderBean& this_ = static_cast<const OrderBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OrderBean::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OrderBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.OrderBean)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.OrderBean.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .lampyris.crypto.protocol.trading.TradeSide side = 2;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_side(), target);
          }

          // .lampyris.crypto.protocol.trading.OrderType orderType = 3;
          if (this_._internal_ordertype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_ordertype(), target);
          }

          // double quantity = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_quantity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_quantity(), target);
          }

          // double cashQuantity = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_cashquantity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_cashquantity(), target);
          }

          // double price = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_price(), target);
          }

          // .lampyris.crypto.protocol.trading.TimeInForceType tifType = 7;
          if (this_._internal_tiftype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_tiftype(), target);
          }

          // int64 goodTillDate = 8;
          if (this_._internal_goodtilldate() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<8>(
                    stream, this_._internal_goodtilldate(), target);
          }

          // bool reduceOnly = 9;
          if (this_._internal_reduceonly() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_reduceonly(), target);
          }

          // repeated .lampyris.crypto.protocol.trading.ConditionTriggerBean condition = 10;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_condition_size());
               i < n; i++) {
            const auto& repfield = this_._internal_condition().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    10, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.OrderBean)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OrderBean::ByteSizeLong(const MessageLite& base) {
          const OrderBean& this_ = static_cast<const OrderBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OrderBean::ByteSizeLong() const {
          const OrderBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.OrderBean)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .lampyris.crypto.protocol.trading.ConditionTriggerBean condition = 10;
            {
              total_size += 1UL * this_._internal_condition_size();
              for (const auto& msg : this_._internal_condition()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // .lampyris.crypto.protocol.trading.TradeSide side = 2;
            if (this_._internal_side() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_side());
            }
            // .lampyris.crypto.protocol.trading.OrderType orderType = 3;
            if (this_._internal_ordertype() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_ordertype());
            }
            // double quantity = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_quantity()) != 0) {
              total_size += 9;
            }
            // double cashQuantity = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_cashquantity()) != 0) {
              total_size += 9;
            }
            // double price = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
              total_size += 9;
            }
            // int64 goodTillDate = 8;
            if (this_._internal_goodtilldate() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_goodtilldate());
            }
            // .lampyris.crypto.protocol.trading.TimeInForceType tifType = 7;
            if (this_._internal_tiftype() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_tiftype());
            }
            // bool reduceOnly = 9;
            if (this_._internal_reduceonly() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OrderBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OrderBean*>(&to_msg);
  auto& from = static_cast<const OrderBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.OrderBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_condition()->MergeFrom(
      from._internal_condition());
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  if (from._internal_ordertype() != 0) {
    _this->_impl_.ordertype_ = from._impl_.ordertype_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_quantity()) != 0) {
    _this->_impl_.quantity_ = from._impl_.quantity_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_cashquantity()) != 0) {
    _this->_impl_.cashquantity_ = from._impl_.cashquantity_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_price()) != 0) {
    _this->_impl_.price_ = from._impl_.price_;
  }
  if (from._internal_goodtilldate() != 0) {
    _this->_impl_.goodtilldate_ = from._impl_.goodtilldate_;
  }
  if (from._internal_tiftype() != 0) {
    _this->_impl_.tiftype_ = from._impl_.tiftype_;
  }
  if (from._internal_reduceonly() != 0) {
    _this->_impl_.reduceonly_ = from._impl_.reduceonly_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OrderBean::CopyFrom(const OrderBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.OrderBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OrderBean::InternalSwap(OrderBean* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.condition_.InternalSwap(&other->_impl_.condition_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.reduceonly_)
      + sizeof(OrderBean::_impl_.reduceonly_)
      - PROTOBUF_FIELD_OFFSET(OrderBean, _impl_.side_)>(
          reinterpret_cast<char*>(&_impl_.side_),
          reinterpret_cast<char*>(&other->_impl_.side_));
}

::google::protobuf::Metadata OrderBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OrderStatusBean::_Internal {
 public:
  using HasBits =
      decltype(std::declval<OrderStatusBean>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_._has_bits_);
};

OrderStatusBean::OrderStatusBean(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.OrderStatusBean)
}
inline PROTOBUF_NDEBUG_INLINE OrderStatusBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::OrderStatusBean& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

OrderStatusBean::OrderStatusBean(
    ::google::protobuf::Arena* arena,
    const OrderStatusBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OrderStatusBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.orderbean_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::lampyris::crypto::protocol::trading::OrderBean>(
                              arena, *from._impl_.orderbean_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, orderid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, orderid_),
           offsetof(Impl_, avgfilledprice_) -
               offsetof(Impl_, orderid_) +
               sizeof(Impl_::avgfilledprice_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.OrderStatusBean)
}
inline PROTOBUF_NDEBUG_INLINE OrderStatusBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OrderStatusBean::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, orderbean_),
           0,
           offsetof(Impl_, avgfilledprice_) -
               offsetof(Impl_, orderbean_) +
               sizeof(Impl_::avgfilledprice_));
}
OrderStatusBean::~OrderStatusBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.OrderStatusBean)
  SharedDtor(*this);
}
inline void OrderStatusBean::SharedDtor(MessageLite& self) {
  OrderStatusBean& this_ = static_cast<OrderStatusBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.orderbean_;
  this_._impl_.~Impl_();
}

inline void* OrderStatusBean::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) OrderStatusBean(arena);
}
constexpr auto OrderStatusBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(OrderStatusBean),
                                            alignof(OrderStatusBean));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull OrderStatusBean::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_OrderStatusBean_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &OrderStatusBean::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<OrderStatusBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &OrderStatusBean::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<OrderStatusBean>(), &OrderStatusBean::ByteSizeLong,
            &OrderStatusBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_._cached_size_),
        false,
    },
    &OrderStatusBean::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* OrderStatusBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> OrderStatusBean::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::OrderStatusBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .lampyris.crypto.protocol.trading.OrderBean orderBean = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.orderbean_)}},
    // int32 orderId = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderStatusBean, _impl_.orderid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.orderid_)}},
    // .lampyris.crypto.protocol.trading.OrderStatus status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OrderStatusBean, _impl_.status_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.status_)}},
    // double filledQuantity = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.filledquantity_)}},
    // double avgFilledPrice = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.avgfilledprice_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .lampyris.crypto.protocol.trading.OrderBean orderBean = 1;
    {PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.orderbean_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 orderId = 2;
    {PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.orderid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .lampyris.crypto.protocol.trading.OrderStatus status = 3;
    {PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double filledQuantity = 4;
    {PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.filledquantity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double avgFilledPrice = 5;
    {PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.avgfilledprice_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::OrderBean>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void OrderStatusBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.OrderStatusBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbean_ != nullptr);
    _impl_.orderbean_->Clear();
  }
  ::memset(&_impl_.orderid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.avgfilledprice_) -
      reinterpret_cast<char*>(&_impl_.orderid_)) + sizeof(_impl_.avgfilledprice_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OrderStatusBean::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OrderStatusBean& this_ = static_cast<const OrderStatusBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OrderStatusBean::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OrderStatusBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.OrderStatusBean)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .lampyris.crypto.protocol.trading.OrderBean orderBean = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.orderbean_, this_._impl_.orderbean_->GetCachedSize(), target,
                stream);
          }

          // int32 orderId = 2;
          if (this_._internal_orderid() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_orderid(), target);
          }

          // .lampyris.crypto.protocol.trading.OrderStatus status = 3;
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_status(), target);
          }

          // double filledQuantity = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_filledquantity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_filledquantity(), target);
          }

          // double avgFilledPrice = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_avgfilledprice()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_avgfilledprice(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.OrderStatusBean)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OrderStatusBean::ByteSizeLong(const MessageLite& base) {
          const OrderStatusBean& this_ = static_cast<const OrderStatusBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OrderStatusBean::ByteSizeLong() const {
          const OrderStatusBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.OrderStatusBean)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .lampyris.crypto.protocol.trading.OrderBean orderBean = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.orderbean_);
            }
          }
           {
            // int32 orderId = 2;
            if (this_._internal_orderid() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_orderid());
            }
            // .lampyris.crypto.protocol.trading.OrderStatus status = 3;
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
            // double filledQuantity = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_filledquantity()) != 0) {
              total_size += 9;
            }
            // double avgFilledPrice = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_avgfilledprice()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OrderStatusBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OrderStatusBean*>(&to_msg);
  auto& from = static_cast<const OrderStatusBean&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.OrderStatusBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.orderbean_ != nullptr);
    if (_this->_impl_.orderbean_ == nullptr) {
      _this->_impl_.orderbean_ =
          ::google::protobuf::Message::CopyConstruct<::lampyris::crypto::protocol::trading::OrderBean>(arena, *from._impl_.orderbean_);
    } else {
      _this->_impl_.orderbean_->MergeFrom(*from._impl_.orderbean_);
    }
  }
  if (from._internal_orderid() != 0) {
    _this->_impl_.orderid_ = from._impl_.orderid_;
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_filledquantity()) != 0) {
    _this->_impl_.filledquantity_ = from._impl_.filledquantity_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_avgfilledprice()) != 0) {
    _this->_impl_.avgfilledprice_ = from._impl_.avgfilledprice_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OrderStatusBean::CopyFrom(const OrderStatusBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.OrderStatusBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OrderStatusBean::InternalSwap(OrderStatusBean* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.avgfilledprice_)
      + sizeof(OrderStatusBean::_impl_.avgfilledprice_)
      - PROTOBUF_FIELD_OFFSET(OrderStatusBean, _impl_.orderbean_)>(
          reinterpret_cast<char*>(&_impl_.orderbean_),
          reinterpret_cast<char*>(&other->_impl_.orderbean_));
}

::google::protobuf::Metadata OrderStatusBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqPlaceOrder::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReqPlaceOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReqPlaceOrder, _impl_._has_bits_);
};

ReqPlaceOrder::ReqPlaceOrder(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqPlaceOrder)
}
inline PROTOBUF_NDEBUG_INLINE ReqPlaceOrder::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqPlaceOrder& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ReqPlaceOrder::ReqPlaceOrder(
    ::google::protobuf::Arena* arena,
    const ReqPlaceOrder& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqPlaceOrder* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.orderbean_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::lampyris::crypto::protocol::trading::OrderBean>(
                              arena, *from._impl_.orderbean_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqPlaceOrder)
}
inline PROTOBUF_NDEBUG_INLINE ReqPlaceOrder::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ReqPlaceOrder::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.orderbean_ = {};
}
ReqPlaceOrder::~ReqPlaceOrder() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqPlaceOrder)
  SharedDtor(*this);
}
inline void ReqPlaceOrder::SharedDtor(MessageLite& self) {
  ReqPlaceOrder& this_ = static_cast<ReqPlaceOrder&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.orderbean_;
  this_._impl_.~Impl_();
}

inline void* ReqPlaceOrder::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqPlaceOrder(arena);
}
constexpr auto ReqPlaceOrder::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ReqPlaceOrder),
                                            alignof(ReqPlaceOrder));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqPlaceOrder::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqPlaceOrder_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqPlaceOrder::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqPlaceOrder>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqPlaceOrder::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqPlaceOrder>(), &ReqPlaceOrder::ByteSizeLong,
            &ReqPlaceOrder::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqPlaceOrder, _impl_._cached_size_),
        false,
    },
    &ReqPlaceOrder::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqPlaceOrder::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ReqPlaceOrder::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReqPlaceOrder, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqPlaceOrder>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .lampyris.crypto.protocol.trading.OrderBean orderBean = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ReqPlaceOrder, _impl_.orderbean_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .lampyris.crypto.protocol.trading.OrderBean orderBean = 1;
    {PROTOBUF_FIELD_OFFSET(ReqPlaceOrder, _impl_.orderbean_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::OrderBean>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ReqPlaceOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqPlaceOrder)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbean_ != nullptr);
    _impl_.orderbean_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqPlaceOrder::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqPlaceOrder& this_ = static_cast<const ReqPlaceOrder&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqPlaceOrder::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqPlaceOrder& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqPlaceOrder)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .lampyris.crypto.protocol.trading.OrderBean orderBean = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.orderbean_, this_._impl_.orderbean_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqPlaceOrder)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqPlaceOrder::ByteSizeLong(const MessageLite& base) {
          const ReqPlaceOrder& this_ = static_cast<const ReqPlaceOrder&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqPlaceOrder::ByteSizeLong() const {
          const ReqPlaceOrder& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqPlaceOrder)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .lampyris.crypto.protocol.trading.OrderBean orderBean = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.orderbean_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqPlaceOrder::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqPlaceOrder*>(&to_msg);
  auto& from = static_cast<const ReqPlaceOrder&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqPlaceOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.orderbean_ != nullptr);
    if (_this->_impl_.orderbean_ == nullptr) {
      _this->_impl_.orderbean_ =
          ::google::protobuf::Message::CopyConstruct<::lampyris::crypto::protocol::trading::OrderBean>(arena, *from._impl_.orderbean_);
    } else {
      _this->_impl_.orderbean_->MergeFrom(*from._impl_.orderbean_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqPlaceOrder::CopyFrom(const ReqPlaceOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqPlaceOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqPlaceOrder::InternalSwap(ReqPlaceOrder* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.orderbean_, other->_impl_.orderbean_);
}

::google::protobuf::Metadata ReqPlaceOrder::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqModifyOrder::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReqModifyOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReqModifyOrder, _impl_._has_bits_);
};

ReqModifyOrder::ReqModifyOrder(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqModifyOrder)
}
inline PROTOBUF_NDEBUG_INLINE ReqModifyOrder::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqModifyOrder& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        orderid_(arena, from.orderid_) {}

ReqModifyOrder::ReqModifyOrder(
    ::google::protobuf::Arena* arena,
    const ReqModifyOrder& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqModifyOrder* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.orderbean_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::lampyris::crypto::protocol::trading::OrderBean>(
                              arena, *from._impl_.orderbean_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqModifyOrder)
}
inline PROTOBUF_NDEBUG_INLINE ReqModifyOrder::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        orderid_(arena) {}

inline void ReqModifyOrder::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.orderbean_ = {};
}
ReqModifyOrder::~ReqModifyOrder() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqModifyOrder)
  SharedDtor(*this);
}
inline void ReqModifyOrder::SharedDtor(MessageLite& self) {
  ReqModifyOrder& this_ = static_cast<ReqModifyOrder&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.orderid_.Destroy();
  delete this_._impl_.orderbean_;
  this_._impl_.~Impl_();
}

inline void* ReqModifyOrder::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqModifyOrder(arena);
}
constexpr auto ReqModifyOrder::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReqModifyOrder),
                                            alignof(ReqModifyOrder));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqModifyOrder::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqModifyOrder_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqModifyOrder::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqModifyOrder>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqModifyOrder::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqModifyOrder>(), &ReqModifyOrder::ByteSizeLong,
            &ReqModifyOrder::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqModifyOrder, _impl_._cached_size_),
        false,
    },
    &ReqModifyOrder::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqModifyOrder::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 63, 2> ReqModifyOrder::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReqModifyOrder, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqModifyOrder>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .lampyris.crypto.protocol.trading.OrderBean orderBean = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ReqModifyOrder, _impl_.orderbean_)}},
    // string orderId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqModifyOrder, _impl_.orderid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string orderId = 1;
    {PROTOBUF_FIELD_OFFSET(ReqModifyOrder, _impl_.orderid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .lampyris.crypto.protocol.trading.OrderBean orderBean = 2;
    {PROTOBUF_FIELD_OFFSET(ReqModifyOrder, _impl_.orderbean_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::OrderBean>()},
  }}, {{
    "\57\7\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.ReqModifyOrder"
    "orderId"
  }},
};

PROTOBUF_NOINLINE void ReqModifyOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqModifyOrder)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orderid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbean_ != nullptr);
    _impl_.orderbean_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqModifyOrder::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqModifyOrder& this_ = static_cast<const ReqModifyOrder&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqModifyOrder::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqModifyOrder& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqModifyOrder)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string orderId = 1;
          if (!this_._internal_orderid().empty()) {
            const std::string& _s = this_._internal_orderid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.ReqModifyOrder.orderId");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .lampyris.crypto.protocol.trading.OrderBean orderBean = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.orderbean_, this_._impl_.orderbean_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqModifyOrder)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqModifyOrder::ByteSizeLong(const MessageLite& base) {
          const ReqModifyOrder& this_ = static_cast<const ReqModifyOrder&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqModifyOrder::ByteSizeLong() const {
          const ReqModifyOrder& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqModifyOrder)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string orderId = 1;
            if (!this_._internal_orderid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_orderid());
            }
          }
           {
            // .lampyris.crypto.protocol.trading.OrderBean orderBean = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.orderbean_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqModifyOrder::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqModifyOrder*>(&to_msg);
  auto& from = static_cast<const ReqModifyOrder&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqModifyOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_orderid().empty()) {
    _this->_internal_set_orderid(from._internal_orderid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.orderbean_ != nullptr);
    if (_this->_impl_.orderbean_ == nullptr) {
      _this->_impl_.orderbean_ =
          ::google::protobuf::Message::CopyConstruct<::lampyris::crypto::protocol::trading::OrderBean>(arena, *from._impl_.orderbean_);
    } else {
      _this->_impl_.orderbean_->MergeFrom(*from._impl_.orderbean_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqModifyOrder::CopyFrom(const ReqModifyOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqModifyOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqModifyOrder::InternalSwap(ReqModifyOrder* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orderid_, &other->_impl_.orderid_, arena);
  swap(_impl_.orderbean_, other->_impl_.orderbean_);
}

::google::protobuf::Metadata ReqModifyOrder::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqCancelOrder::_Internal {
 public:
};

ReqCancelOrder::ReqCancelOrder(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqCancelOrder)
}
inline PROTOBUF_NDEBUG_INLINE ReqCancelOrder::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqCancelOrder& from_msg)
      : orderid_(arena, from.orderid_),
        _cached_size_{0} {}

ReqCancelOrder::ReqCancelOrder(
    ::google::protobuf::Arena* arena,
    const ReqCancelOrder& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqCancelOrder* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqCancelOrder)
}
inline PROTOBUF_NDEBUG_INLINE ReqCancelOrder::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : orderid_(arena),
        _cached_size_{0} {}

inline void ReqCancelOrder::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReqCancelOrder::~ReqCancelOrder() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqCancelOrder)
  SharedDtor(*this);
}
inline void ReqCancelOrder::SharedDtor(MessageLite& self) {
  ReqCancelOrder& this_ = static_cast<ReqCancelOrder&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.orderid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ReqCancelOrder::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqCancelOrder(arena);
}
constexpr auto ReqCancelOrder::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReqCancelOrder),
                                            alignof(ReqCancelOrder));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqCancelOrder::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqCancelOrder_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqCancelOrder::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqCancelOrder>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqCancelOrder::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqCancelOrder>(), &ReqCancelOrder::ByteSizeLong,
            &ReqCancelOrder::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqCancelOrder, _impl_._cached_size_),
        false,
    },
    &ReqCancelOrder::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqCancelOrder::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 63, 2> ReqCancelOrder::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqCancelOrder>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string orderId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqCancelOrder, _impl_.orderid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string orderId = 1;
    {PROTOBUF_FIELD_OFFSET(ReqCancelOrder, _impl_.orderid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\57\7\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.ReqCancelOrder"
    "orderId"
  }},
};

PROTOBUF_NOINLINE void ReqCancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqCancelOrder)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orderid_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqCancelOrder::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqCancelOrder& this_ = static_cast<const ReqCancelOrder&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqCancelOrder::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqCancelOrder& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqCancelOrder)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string orderId = 1;
          if (!this_._internal_orderid().empty()) {
            const std::string& _s = this_._internal_orderid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.ReqCancelOrder.orderId");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqCancelOrder)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqCancelOrder::ByteSizeLong(const MessageLite& base) {
          const ReqCancelOrder& this_ = static_cast<const ReqCancelOrder&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqCancelOrder::ByteSizeLong() const {
          const ReqCancelOrder& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqCancelOrder)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string orderId = 1;
            if (!this_._internal_orderid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_orderid());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqCancelOrder::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqCancelOrder*>(&to_msg);
  auto& from = static_cast<const ReqCancelOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqCancelOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_orderid().empty()) {
    _this->_internal_set_orderid(from._internal_orderid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqCancelOrder::CopyFrom(const ReqCancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqCancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqCancelOrder::InternalSwap(ReqCancelOrder* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orderid_, &other->_impl_.orderid_, arena);
}

::google::protobuf::Metadata ReqCancelOrder::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqOneKeyClosePosition::_Internal {
 public:
};

ReqOneKeyClosePosition::ReqOneKeyClosePosition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqOneKeyClosePosition)
}
inline PROTOBUF_NDEBUG_INLINE ReqOneKeyClosePosition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqOneKeyClosePosition& from_msg)
      : symbols_{visibility, arena, from.symbols_},
        _cached_size_{0} {}

ReqOneKeyClosePosition::ReqOneKeyClosePosition(
    ::google::protobuf::Arena* arena,
    const ReqOneKeyClosePosition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqOneKeyClosePosition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqOneKeyClosePosition)
}
inline PROTOBUF_NDEBUG_INLINE ReqOneKeyClosePosition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbols_{visibility, arena},
        _cached_size_{0} {}

inline void ReqOneKeyClosePosition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReqOneKeyClosePosition::~ReqOneKeyClosePosition() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqOneKeyClosePosition)
  SharedDtor(*this);
}
inline void ReqOneKeyClosePosition::SharedDtor(MessageLite& self) {
  ReqOneKeyClosePosition& this_ = static_cast<ReqOneKeyClosePosition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ReqOneKeyClosePosition::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqOneKeyClosePosition(arena);
}
constexpr auto ReqOneKeyClosePosition::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ReqOneKeyClosePosition, _impl_.symbols_) +
          decltype(ReqOneKeyClosePosition::_impl_.symbols_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ReqOneKeyClosePosition), alignof(ReqOneKeyClosePosition), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ReqOneKeyClosePosition::PlacementNew_,
                                 sizeof(ReqOneKeyClosePosition),
                                 alignof(ReqOneKeyClosePosition));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqOneKeyClosePosition::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqOneKeyClosePosition_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqOneKeyClosePosition::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqOneKeyClosePosition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqOneKeyClosePosition::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqOneKeyClosePosition>(), &ReqOneKeyClosePosition::ByteSizeLong,
            &ReqOneKeyClosePosition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqOneKeyClosePosition, _impl_._cached_size_),
        false,
    },
    &ReqOneKeyClosePosition::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqOneKeyClosePosition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 71, 2> ReqOneKeyClosePosition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqOneKeyClosePosition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string symbols = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqOneKeyClosePosition, _impl_.symbols_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string symbols = 1;
    {PROTOBUF_FIELD_OFFSET(ReqOneKeyClosePosition, _impl_.symbols_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\67\7\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.ReqOneKeyClosePosition"
    "symbols"
  }},
};

PROTOBUF_NOINLINE void ReqOneKeyClosePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqOneKeyClosePosition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbols_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqOneKeyClosePosition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqOneKeyClosePosition& this_ = static_cast<const ReqOneKeyClosePosition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqOneKeyClosePosition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqOneKeyClosePosition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqOneKeyClosePosition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string symbols = 1;
          for (int i = 0, n = this_._internal_symbols_size(); i < n; ++i) {
            const auto& s = this_._internal_symbols().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.ReqOneKeyClosePosition.symbols");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqOneKeyClosePosition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqOneKeyClosePosition::ByteSizeLong(const MessageLite& base) {
          const ReqOneKeyClosePosition& this_ = static_cast<const ReqOneKeyClosePosition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqOneKeyClosePosition::ByteSizeLong() const {
          const ReqOneKeyClosePosition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqOneKeyClosePosition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string symbols = 1;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_symbols().size());
              for (int i = 0, n = this_._internal_symbols().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_symbols().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqOneKeyClosePosition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqOneKeyClosePosition*>(&to_msg);
  auto& from = static_cast<const ReqOneKeyClosePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqOneKeyClosePosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_symbols()->MergeFrom(from._internal_symbols());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqOneKeyClosePosition::CopyFrom(const ReqOneKeyClosePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqOneKeyClosePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqOneKeyClosePosition::InternalSwap(ReqOneKeyClosePosition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.symbols_.InternalSwap(&other->_impl_.symbols_);
}

::google::protobuf::Metadata ReqOneKeyClosePosition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqQueryActiveOrders::_Internal {
 public:
};

ReqQueryActiveOrders::ReqQueryActiveOrders(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqQueryActiveOrders)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryActiveOrders::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqQueryActiveOrders& from_msg)
      : symbol_(arena, from.symbol_),
        _cached_size_{0} {}

ReqQueryActiveOrders::ReqQueryActiveOrders(
    ::google::protobuf::Arena* arena,
    const ReqQueryActiveOrders& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqQueryActiveOrders* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqQueryActiveOrders)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryActiveOrders::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        _cached_size_{0} {}

inline void ReqQueryActiveOrders::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReqQueryActiveOrders::~ReqQueryActiveOrders() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqQueryActiveOrders)
  SharedDtor(*this);
}
inline void ReqQueryActiveOrders::SharedDtor(MessageLite& self) {
  ReqQueryActiveOrders& this_ = static_cast<ReqQueryActiveOrders&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ReqQueryActiveOrders::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqQueryActiveOrders(arena);
}
constexpr auto ReqQueryActiveOrders::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReqQueryActiveOrders),
                                            alignof(ReqQueryActiveOrders));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqQueryActiveOrders::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqQueryActiveOrders_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqQueryActiveOrders::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqQueryActiveOrders>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqQueryActiveOrders::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqQueryActiveOrders>(), &ReqQueryActiveOrders::ByteSizeLong,
            &ReqQueryActiveOrders::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqQueryActiveOrders, _impl_._cached_size_),
        false,
    },
    &ReqQueryActiveOrders::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqQueryActiveOrders::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 68, 2> ReqQueryActiveOrders::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqQueryActiveOrders>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqQueryActiveOrders, _impl_.symbol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(ReqQueryActiveOrders, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\65\6\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.ReqQueryActiveOrders"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void ReqQueryActiveOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqQueryActiveOrders)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqQueryActiveOrders::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqQueryActiveOrders& this_ = static_cast<const ReqQueryActiveOrders&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqQueryActiveOrders::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqQueryActiveOrders& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqQueryActiveOrders)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.ReqQueryActiveOrders.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqQueryActiveOrders)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqQueryActiveOrders::ByteSizeLong(const MessageLite& base) {
          const ReqQueryActiveOrders& this_ = static_cast<const ReqQueryActiveOrders&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqQueryActiveOrders::ByteSizeLong() const {
          const ReqQueryActiveOrders& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqQueryActiveOrders)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqQueryActiveOrders::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqQueryActiveOrders*>(&to_msg);
  auto& from = static_cast<const ReqQueryActiveOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqQueryActiveOrders)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqQueryActiveOrders::CopyFrom(const ReqQueryActiveOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqQueryActiveOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqQueryActiveOrders::InternalSwap(ReqQueryActiveOrders* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
}

::google::protobuf::Metadata ReqQueryActiveOrders::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqQueryHistoricalOrders::_Internal {
 public:
};

ReqQueryHistoricalOrders::ReqQueryHistoricalOrders(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryHistoricalOrders::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqQueryHistoricalOrders& from_msg)
      : symbol_(arena, from.symbol_),
        _cached_size_{0} {}

ReqQueryHistoricalOrders::ReqQueryHistoricalOrders(
    ::google::protobuf::Arena* arena,
    const ReqQueryHistoricalOrders& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqQueryHistoricalOrders* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, begintime_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, begintime_),
           offsetof(Impl_, endtime_) -
               offsetof(Impl_, begintime_) +
               sizeof(Impl_::endtime_));

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryHistoricalOrders::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        _cached_size_{0} {}

inline void ReqQueryHistoricalOrders::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, begintime_),
           0,
           offsetof(Impl_, endtime_) -
               offsetof(Impl_, begintime_) +
               sizeof(Impl_::endtime_));
}
ReqQueryHistoricalOrders::~ReqQueryHistoricalOrders() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders)
  SharedDtor(*this);
}
inline void ReqQueryHistoricalOrders::SharedDtor(MessageLite& self) {
  ReqQueryHistoricalOrders& this_ = static_cast<ReqQueryHistoricalOrders&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ReqQueryHistoricalOrders::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqQueryHistoricalOrders(arena);
}
constexpr auto ReqQueryHistoricalOrders::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReqQueryHistoricalOrders),
                                            alignof(ReqQueryHistoricalOrders));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqQueryHistoricalOrders::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqQueryHistoricalOrders_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqQueryHistoricalOrders::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqQueryHistoricalOrders>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqQueryHistoricalOrders::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqQueryHistoricalOrders>(), &ReqQueryHistoricalOrders::ByteSizeLong,
            &ReqQueryHistoricalOrders::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqQueryHistoricalOrders, _impl_._cached_size_),
        false,
    },
    &ReqQueryHistoricalOrders::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqQueryHistoricalOrders::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 72, 2> ReqQueryHistoricalOrders::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqQueryHistoricalOrders>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqQueryHistoricalOrders, _impl_.symbol_)}},
    // int64 beginTime = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ReqQueryHistoricalOrders, _impl_.begintime_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ReqQueryHistoricalOrders, _impl_.begintime_)}},
    // int64 endTime = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ReqQueryHistoricalOrders, _impl_.endtime_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ReqQueryHistoricalOrders, _impl_.endtime_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(ReqQueryHistoricalOrders, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 beginTime = 2;
    {PROTOBUF_FIELD_OFFSET(ReqQueryHistoricalOrders, _impl_.begintime_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 endTime = 3;
    {PROTOBUF_FIELD_OFFSET(ReqQueryHistoricalOrders, _impl_.endtime_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\71\6\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void ReqQueryHistoricalOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  ::memset(&_impl_.begintime_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.endtime_) -
      reinterpret_cast<char*>(&_impl_.begintime_)) + sizeof(_impl_.endtime_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqQueryHistoricalOrders::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqQueryHistoricalOrders& this_ = static_cast<const ReqQueryHistoricalOrders&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqQueryHistoricalOrders::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqQueryHistoricalOrders& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int64 beginTime = 2;
          if (this_._internal_begintime() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_begintime(), target);
          }

          // int64 endTime = 3;
          if (this_._internal_endtime() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_endtime(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqQueryHistoricalOrders::ByteSizeLong(const MessageLite& base) {
          const ReqQueryHistoricalOrders& this_ = static_cast<const ReqQueryHistoricalOrders&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqQueryHistoricalOrders::ByteSizeLong() const {
          const ReqQueryHistoricalOrders& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // int64 beginTime = 2;
            if (this_._internal_begintime() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_begintime());
            }
            // int64 endTime = 3;
            if (this_._internal_endtime() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_endtime());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqQueryHistoricalOrders::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqQueryHistoricalOrders*>(&to_msg);
  auto& from = static_cast<const ReqQueryHistoricalOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_begintime() != 0) {
    _this->_impl_.begintime_ = from._impl_.begintime_;
  }
  if (from._internal_endtime() != 0) {
    _this->_impl_.endtime_ = from._impl_.endtime_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqQueryHistoricalOrders::CopyFrom(const ReqQueryHistoricalOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqQueryHistoricalOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqQueryHistoricalOrders::InternalSwap(ReqQueryHistoricalOrders* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqQueryHistoricalOrders, _impl_.endtime_)
      + sizeof(ReqQueryHistoricalOrders::_impl_.endtime_)
      - PROTOBUF_FIELD_OFFSET(ReqQueryHistoricalOrders, _impl_.begintime_)>(
          reinterpret_cast<char*>(&_impl_.begintime_),
          reinterpret_cast<char*>(&other->_impl_.begintime_));
}

::google::protobuf::Metadata ReqQueryHistoricalOrders::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqQueryPositions::_Internal {
 public:
};

ReqQueryPositions::ReqQueryPositions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqQueryPositions)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryPositions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqQueryPositions& from_msg)
      : symbol_(arena, from.symbol_),
        _cached_size_{0} {}

ReqQueryPositions::ReqQueryPositions(
    ::google::protobuf::Arena* arena,
    const ReqQueryPositions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqQueryPositions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqQueryPositions)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryPositions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        _cached_size_{0} {}

inline void ReqQueryPositions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReqQueryPositions::~ReqQueryPositions() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqQueryPositions)
  SharedDtor(*this);
}
inline void ReqQueryPositions::SharedDtor(MessageLite& self) {
  ReqQueryPositions& this_ = static_cast<ReqQueryPositions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ReqQueryPositions::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqQueryPositions(arena);
}
constexpr auto ReqQueryPositions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReqQueryPositions),
                                            alignof(ReqQueryPositions));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqQueryPositions::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqQueryPositions_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqQueryPositions::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqQueryPositions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqQueryPositions::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqQueryPositions>(), &ReqQueryPositions::ByteSizeLong,
            &ReqQueryPositions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqQueryPositions, _impl_._cached_size_),
        false,
    },
    &ReqQueryPositions::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqQueryPositions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 65, 2> ReqQueryPositions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqQueryPositions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqQueryPositions, _impl_.symbol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(ReqQueryPositions, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\62\6\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.ReqQueryPositions"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void ReqQueryPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqQueryPositions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqQueryPositions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqQueryPositions& this_ = static_cast<const ReqQueryPositions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqQueryPositions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqQueryPositions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqQueryPositions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.ReqQueryPositions.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqQueryPositions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqQueryPositions::ByteSizeLong(const MessageLite& base) {
          const ReqQueryPositions& this_ = static_cast<const ReqQueryPositions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqQueryPositions::ByteSizeLong() const {
          const ReqQueryPositions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqQueryPositions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqQueryPositions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqQueryPositions*>(&to_msg);
  auto& from = static_cast<const ReqQueryPositions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqQueryPositions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqQueryPositions::CopyFrom(const ReqQueryPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqQueryPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqQueryPositions::InternalSwap(ReqQueryPositions* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
}

::google::protobuf::Metadata ReqQueryPositions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LeverageBean::_Internal {
 public:
};

LeverageBean::LeverageBean(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.LeverageBean)
}
inline PROTOBUF_NDEBUG_INLINE LeverageBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::LeverageBean& from_msg)
      : symbol_(arena, from.symbol_),
        _cached_size_{0} {}

LeverageBean::LeverageBean(
    ::google::protobuf::Arena* arena,
    const LeverageBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LeverageBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.leverage_ = from._impl_.leverage_;

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.LeverageBean)
}
inline PROTOBUF_NDEBUG_INLINE LeverageBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        _cached_size_{0} {}

inline void LeverageBean::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.leverage_ = {};
}
LeverageBean::~LeverageBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.LeverageBean)
  SharedDtor(*this);
}
inline void LeverageBean::SharedDtor(MessageLite& self) {
  LeverageBean& this_ = static_cast<LeverageBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* LeverageBean::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LeverageBean(arena);
}
constexpr auto LeverageBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(LeverageBean),
                                            alignof(LeverageBean));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LeverageBean::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LeverageBean_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LeverageBean::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LeverageBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LeverageBean::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LeverageBean>(), &LeverageBean::ByteSizeLong,
            &LeverageBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LeverageBean, _impl_._cached_size_),
        false,
    },
    &LeverageBean::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LeverageBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 60, 2> LeverageBean::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::LeverageBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 leverage = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LeverageBean, _impl_.leverage_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LeverageBean, _impl_.leverage_)}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LeverageBean, _impl_.symbol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(LeverageBean, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 leverage = 2;
    {PROTOBUF_FIELD_OFFSET(LeverageBean, _impl_.leverage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\55\6\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.LeverageBean"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void LeverageBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.LeverageBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _impl_.leverage_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LeverageBean::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LeverageBean& this_ = static_cast<const LeverageBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LeverageBean::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LeverageBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.LeverageBean)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.LeverageBean.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int32 leverage = 2;
          if (this_._internal_leverage() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_leverage(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.LeverageBean)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LeverageBean::ByteSizeLong(const MessageLite& base) {
          const LeverageBean& this_ = static_cast<const LeverageBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LeverageBean::ByteSizeLong() const {
          const LeverageBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.LeverageBean)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // int32 leverage = 2;
            if (this_._internal_leverage() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_leverage());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LeverageBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LeverageBean*>(&to_msg);
  auto& from = static_cast<const LeverageBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.LeverageBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_leverage() != 0) {
    _this->_impl_.leverage_ = from._impl_.leverage_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LeverageBean::CopyFrom(const LeverageBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.LeverageBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LeverageBean::InternalSwap(LeverageBean* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
        swap(_impl_.leverage_, other->_impl_.leverage_);
}

::google::protobuf::Metadata LeverageBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqSetLeverage::_Internal {
 public:
};

ReqSetLeverage::ReqSetLeverage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqSetLeverage)
}
inline PROTOBUF_NDEBUG_INLINE ReqSetLeverage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqSetLeverage& from_msg)
      : beanlist_{visibility, arena, from.beanlist_},
        _cached_size_{0} {}

ReqSetLeverage::ReqSetLeverage(
    ::google::protobuf::Arena* arena,
    const ReqSetLeverage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqSetLeverage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqSetLeverage)
}
inline PROTOBUF_NDEBUG_INLINE ReqSetLeverage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : beanlist_{visibility, arena},
        _cached_size_{0} {}

inline void ReqSetLeverage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReqSetLeverage::~ReqSetLeverage() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqSetLeverage)
  SharedDtor(*this);
}
inline void ReqSetLeverage::SharedDtor(MessageLite& self) {
  ReqSetLeverage& this_ = static_cast<ReqSetLeverage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ReqSetLeverage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqSetLeverage(arena);
}
constexpr auto ReqSetLeverage::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ReqSetLeverage, _impl_.beanlist_) +
          decltype(ReqSetLeverage::_impl_.beanlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ReqSetLeverage), alignof(ReqSetLeverage), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ReqSetLeverage::PlacementNew_,
                                 sizeof(ReqSetLeverage),
                                 alignof(ReqSetLeverage));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqSetLeverage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqSetLeverage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqSetLeverage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqSetLeverage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqSetLeverage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqSetLeverage>(), &ReqSetLeverage::ByteSizeLong,
            &ReqSetLeverage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqSetLeverage, _impl_._cached_size_),
        false,
    },
    &ReqSetLeverage::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqSetLeverage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ReqSetLeverage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqSetLeverage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.trading.LeverageBean beanList = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqSetLeverage, _impl_.beanlist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .lampyris.crypto.protocol.trading.LeverageBean beanList = 1;
    {PROTOBUF_FIELD_OFFSET(ReqSetLeverage, _impl_.beanlist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::LeverageBean>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ReqSetLeverage::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqSetLeverage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beanlist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqSetLeverage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqSetLeverage& this_ = static_cast<const ReqSetLeverage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqSetLeverage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqSetLeverage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqSetLeverage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .lampyris.crypto.protocol.trading.LeverageBean beanList = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_beanlist_size());
               i < n; i++) {
            const auto& repfield = this_._internal_beanlist().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqSetLeverage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqSetLeverage::ByteSizeLong(const MessageLite& base) {
          const ReqSetLeverage& this_ = static_cast<const ReqSetLeverage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqSetLeverage::ByteSizeLong() const {
          const ReqSetLeverage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqSetLeverage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .lampyris.crypto.protocol.trading.LeverageBean beanList = 1;
            {
              total_size += 1UL * this_._internal_beanlist_size();
              for (const auto& msg : this_._internal_beanlist()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqSetLeverage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqSetLeverage*>(&to_msg);
  auto& from = static_cast<const ReqSetLeverage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqSetLeverage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beanlist()->MergeFrom(
      from._internal_beanlist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqSetLeverage::CopyFrom(const ReqSetLeverage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqSetLeverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqSetLeverage::InternalSwap(ReqSetLeverage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.beanlist_.InternalSwap(&other->_impl_.beanlist_);
}

::google::protobuf::Metadata ReqSetLeverage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqQueryLeverage::_Internal {
 public:
};

ReqQueryLeverage::ReqQueryLeverage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqQueryLeverage)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryLeverage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqQueryLeverage& from_msg)
      : symbol_(arena, from.symbol_),
        _cached_size_{0} {}

ReqQueryLeverage::ReqQueryLeverage(
    ::google::protobuf::Arena* arena,
    const ReqQueryLeverage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqQueryLeverage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqQueryLeverage)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryLeverage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        _cached_size_{0} {}

inline void ReqQueryLeverage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReqQueryLeverage::~ReqQueryLeverage() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqQueryLeverage)
  SharedDtor(*this);
}
inline void ReqQueryLeverage::SharedDtor(MessageLite& self) {
  ReqQueryLeverage& this_ = static_cast<ReqQueryLeverage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ReqQueryLeverage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqQueryLeverage(arena);
}
constexpr auto ReqQueryLeverage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReqQueryLeverage),
                                            alignof(ReqQueryLeverage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqQueryLeverage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqQueryLeverage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqQueryLeverage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqQueryLeverage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqQueryLeverage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqQueryLeverage>(), &ReqQueryLeverage::ByteSizeLong,
            &ReqQueryLeverage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqQueryLeverage, _impl_._cached_size_),
        false,
    },
    &ReqQueryLeverage::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqQueryLeverage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 64, 2> ReqQueryLeverage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqQueryLeverage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqQueryLeverage, _impl_.symbol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(ReqQueryLeverage, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\61\6\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.ReqQueryLeverage"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void ReqQueryLeverage::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqQueryLeverage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqQueryLeverage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqQueryLeverage& this_ = static_cast<const ReqQueryLeverage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqQueryLeverage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqQueryLeverage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqQueryLeverage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.ReqQueryLeverage.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqQueryLeverage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqQueryLeverage::ByteSizeLong(const MessageLite& base) {
          const ReqQueryLeverage& this_ = static_cast<const ReqQueryLeverage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqQueryLeverage::ByteSizeLong() const {
          const ReqQueryLeverage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqQueryLeverage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqQueryLeverage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqQueryLeverage*>(&to_msg);
  auto& from = static_cast<const ReqQueryLeverage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqQueryLeverage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqQueryLeverage::CopyFrom(const ReqQueryLeverage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqQueryLeverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqQueryLeverage::InternalSwap(ReqQueryLeverage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
}

::google::protobuf::Metadata ReqQueryLeverage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResQueryLeverage::_Internal {
 public:
};

ResQueryLeverage::ResQueryLeverage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ResQueryLeverage)
}
inline PROTOBUF_NDEBUG_INLINE ResQueryLeverage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ResQueryLeverage& from_msg)
      : beanlist_{visibility, arena, from.beanlist_},
        _cached_size_{0} {}

ResQueryLeverage::ResQueryLeverage(
    ::google::protobuf::Arena* arena,
    const ResQueryLeverage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResQueryLeverage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ResQueryLeverage)
}
inline PROTOBUF_NDEBUG_INLINE ResQueryLeverage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : beanlist_{visibility, arena},
        _cached_size_{0} {}

inline void ResQueryLeverage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ResQueryLeverage::~ResQueryLeverage() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ResQueryLeverage)
  SharedDtor(*this);
}
inline void ResQueryLeverage::SharedDtor(MessageLite& self) {
  ResQueryLeverage& this_ = static_cast<ResQueryLeverage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ResQueryLeverage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResQueryLeverage(arena);
}
constexpr auto ResQueryLeverage::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResQueryLeverage, _impl_.beanlist_) +
          decltype(ResQueryLeverage::_impl_.beanlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ResQueryLeverage), alignof(ResQueryLeverage), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResQueryLeverage::PlacementNew_,
                                 sizeof(ResQueryLeverage),
                                 alignof(ResQueryLeverage));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResQueryLeverage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResQueryLeverage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResQueryLeverage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResQueryLeverage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResQueryLeverage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResQueryLeverage>(), &ResQueryLeverage::ByteSizeLong,
            &ResQueryLeverage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResQueryLeverage, _impl_._cached_size_),
        false,
    },
    &ResQueryLeverage::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResQueryLeverage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ResQueryLeverage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ResQueryLeverage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.trading.LeverageBean beanList = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResQueryLeverage, _impl_.beanlist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .lampyris.crypto.protocol.trading.LeverageBean beanList = 1;
    {PROTOBUF_FIELD_OFFSET(ResQueryLeverage, _impl_.beanlist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::LeverageBean>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ResQueryLeverage::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ResQueryLeverage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beanlist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResQueryLeverage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResQueryLeverage& this_ = static_cast<const ResQueryLeverage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResQueryLeverage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResQueryLeverage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ResQueryLeverage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .lampyris.crypto.protocol.trading.LeverageBean beanList = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_beanlist_size());
               i < n; i++) {
            const auto& repfield = this_._internal_beanlist().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ResQueryLeverage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResQueryLeverage::ByteSizeLong(const MessageLite& base) {
          const ResQueryLeverage& this_ = static_cast<const ResQueryLeverage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResQueryLeverage::ByteSizeLong() const {
          const ResQueryLeverage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ResQueryLeverage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .lampyris.crypto.protocol.trading.LeverageBean beanList = 1;
            {
              total_size += 1UL * this_._internal_beanlist_size();
              for (const auto& msg : this_._internal_beanlist()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResQueryLeverage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResQueryLeverage*>(&to_msg);
  auto& from = static_cast<const ResQueryLeverage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ResQueryLeverage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beanlist()->MergeFrom(
      from._internal_beanlist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResQueryLeverage::CopyFrom(const ResQueryLeverage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ResQueryLeverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResQueryLeverage::InternalSwap(ResQueryLeverage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.beanlist_.InternalSwap(&other->_impl_.beanlist_);
}

::google::protobuf::Metadata ResQueryLeverage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReqQueryLeverageBracket::_Internal {
 public:
};

ReqQueryLeverageBracket::ReqQueryLeverageBracket(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ReqQueryLeverageBracket)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryLeverageBracket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ReqQueryLeverageBracket& from_msg)
      : symbol_(arena, from.symbol_),
        _cached_size_{0} {}

ReqQueryLeverageBracket::ReqQueryLeverageBracket(
    ::google::protobuf::Arena* arena,
    const ReqQueryLeverageBracket& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReqQueryLeverageBracket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ReqQueryLeverageBracket)
}
inline PROTOBUF_NDEBUG_INLINE ReqQueryLeverageBracket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        _cached_size_{0} {}

inline void ReqQueryLeverageBracket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ReqQueryLeverageBracket::~ReqQueryLeverageBracket() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ReqQueryLeverageBracket)
  SharedDtor(*this);
}
inline void ReqQueryLeverageBracket::SharedDtor(MessageLite& self) {
  ReqQueryLeverageBracket& this_ = static_cast<ReqQueryLeverageBracket&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ReqQueryLeverageBracket::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReqQueryLeverageBracket(arena);
}
constexpr auto ReqQueryLeverageBracket::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReqQueryLeverageBracket),
                                            alignof(ReqQueryLeverageBracket));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReqQueryLeverageBracket::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReqQueryLeverageBracket_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReqQueryLeverageBracket::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReqQueryLeverageBracket>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReqQueryLeverageBracket::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReqQueryLeverageBracket>(), &ReqQueryLeverageBracket::ByteSizeLong,
            &ReqQueryLeverageBracket::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReqQueryLeverageBracket, _impl_._cached_size_),
        false,
    },
    &ReqQueryLeverageBracket::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReqQueryLeverageBracket::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 71, 2> ReqQueryLeverageBracket::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ReqQueryLeverageBracket>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReqQueryLeverageBracket, _impl_.symbol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(ReqQueryLeverageBracket, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\70\6\0\0\0\0\0\0"
    "lampyris.crypto.protocol.trading.ReqQueryLeverageBracket"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void ReqQueryLeverageBracket::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ReqQueryLeverageBracket)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReqQueryLeverageBracket::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReqQueryLeverageBracket& this_ = static_cast<const ReqQueryLeverageBracket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReqQueryLeverageBracket::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReqQueryLeverageBracket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ReqQueryLeverageBracket)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "lampyris.crypto.protocol.trading.ReqQueryLeverageBracket.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ReqQueryLeverageBracket)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReqQueryLeverageBracket::ByteSizeLong(const MessageLite& base) {
          const ReqQueryLeverageBracket& this_ = static_cast<const ReqQueryLeverageBracket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReqQueryLeverageBracket::ByteSizeLong() const {
          const ReqQueryLeverageBracket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ReqQueryLeverageBracket)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReqQueryLeverageBracket::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReqQueryLeverageBracket*>(&to_msg);
  auto& from = static_cast<const ReqQueryLeverageBracket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ReqQueryLeverageBracket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReqQueryLeverageBracket::CopyFrom(const ReqQueryLeverageBracket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ReqQueryLeverageBracket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReqQueryLeverageBracket::InternalSwap(ReqQueryLeverageBracket* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
}

::google::protobuf::Metadata ReqQueryLeverageBracket::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResQueryLeverageBracket::_Internal {
 public:
};

ResQueryLeverageBracket::ResQueryLeverageBracket(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.ResQueryLeverageBracket)
}
inline PROTOBUF_NDEBUG_INLINE ResQueryLeverageBracket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::ResQueryLeverageBracket& from_msg)
      : beanlist_{visibility, arena, from.beanlist_},
        _cached_size_{0} {}

ResQueryLeverageBracket::ResQueryLeverageBracket(
    ::google::protobuf::Arena* arena,
    const ResQueryLeverageBracket& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResQueryLeverageBracket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.ResQueryLeverageBracket)
}
inline PROTOBUF_NDEBUG_INLINE ResQueryLeverageBracket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : beanlist_{visibility, arena},
        _cached_size_{0} {}

inline void ResQueryLeverageBracket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ResQueryLeverageBracket::~ResQueryLeverageBracket() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.ResQueryLeverageBracket)
  SharedDtor(*this);
}
inline void ResQueryLeverageBracket::SharedDtor(MessageLite& self) {
  ResQueryLeverageBracket& this_ = static_cast<ResQueryLeverageBracket&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ResQueryLeverageBracket::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResQueryLeverageBracket(arena);
}
constexpr auto ResQueryLeverageBracket::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResQueryLeverageBracket, _impl_.beanlist_) +
          decltype(ResQueryLeverageBracket::_impl_.beanlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ResQueryLeverageBracket), alignof(ResQueryLeverageBracket), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResQueryLeverageBracket::PlacementNew_,
                                 sizeof(ResQueryLeverageBracket),
                                 alignof(ResQueryLeverageBracket));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResQueryLeverageBracket::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResQueryLeverageBracket_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResQueryLeverageBracket::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResQueryLeverageBracket>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResQueryLeverageBracket::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResQueryLeverageBracket>(), &ResQueryLeverageBracket::ByteSizeLong,
            &ResQueryLeverageBracket::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResQueryLeverageBracket, _impl_._cached_size_),
        false,
    },
    &ResQueryLeverageBracket::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResQueryLeverageBracket::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ResQueryLeverageBracket::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::ResQueryLeverageBracket>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.trading.SymbolLeverageBracketBean beanList = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResQueryLeverageBracket, _impl_.beanlist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .lampyris.crypto.protocol.trading.SymbolLeverageBracketBean beanList = 1;
    {PROTOBUF_FIELD_OFFSET(ResQueryLeverageBracket, _impl_.beanlist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::SymbolLeverageBracketBean>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ResQueryLeverageBracket::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.ResQueryLeverageBracket)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beanlist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResQueryLeverageBracket::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResQueryLeverageBracket& this_ = static_cast<const ResQueryLeverageBracket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResQueryLeverageBracket::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResQueryLeverageBracket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.ResQueryLeverageBracket)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .lampyris.crypto.protocol.trading.SymbolLeverageBracketBean beanList = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_beanlist_size());
               i < n; i++) {
            const auto& repfield = this_._internal_beanlist().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.ResQueryLeverageBracket)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResQueryLeverageBracket::ByteSizeLong(const MessageLite& base) {
          const ResQueryLeverageBracket& this_ = static_cast<const ResQueryLeverageBracket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResQueryLeverageBracket::ByteSizeLong() const {
          const ResQueryLeverageBracket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.ResQueryLeverageBracket)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .lampyris.crypto.protocol.trading.SymbolLeverageBracketBean beanList = 1;
            {
              total_size += 1UL * this_._internal_beanlist_size();
              for (const auto& msg : this_._internal_beanlist()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResQueryLeverageBracket::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResQueryLeverageBracket*>(&to_msg);
  auto& from = static_cast<const ResQueryLeverageBracket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.ResQueryLeverageBracket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beanlist()->MergeFrom(
      from._internal_beanlist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResQueryLeverageBracket::CopyFrom(const ResQueryLeverageBracket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.ResQueryLeverageBracket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResQueryLeverageBracket::InternalSwap(ResQueryLeverageBracket* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.beanlist_.InternalSwap(&other->_impl_.beanlist_);
}

::google::protobuf::Metadata ResQueryLeverageBracket::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SymbolLeverageBracketBean::_Internal {
 public:
};

SymbolLeverageBracketBean::SymbolLeverageBracketBean(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.SymbolLeverageBracketBean)
}
inline PROTOBUF_NDEBUG_INLINE SymbolLeverageBracketBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::lampyris::crypto::protocol::trading::SymbolLeverageBracketBean& from_msg)
      : beanlist_{visibility, arena, from.beanlist_},
        _cached_size_{0} {}

SymbolLeverageBracketBean::SymbolLeverageBracketBean(
    ::google::protobuf::Arena* arena,
    const SymbolLeverageBracketBean& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SymbolLeverageBracketBean* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:lampyris.crypto.protocol.trading.SymbolLeverageBracketBean)
}
inline PROTOBUF_NDEBUG_INLINE SymbolLeverageBracketBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : beanlist_{visibility, arena},
        _cached_size_{0} {}

inline void SymbolLeverageBracketBean::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SymbolLeverageBracketBean::~SymbolLeverageBracketBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.SymbolLeverageBracketBean)
  SharedDtor(*this);
}
inline void SymbolLeverageBracketBean::SharedDtor(MessageLite& self) {
  SymbolLeverageBracketBean& this_ = static_cast<SymbolLeverageBracketBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SymbolLeverageBracketBean::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SymbolLeverageBracketBean(arena);
}
constexpr auto SymbolLeverageBracketBean::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SymbolLeverageBracketBean, _impl_.beanlist_) +
          decltype(SymbolLeverageBracketBean::_impl_.beanlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SymbolLeverageBracketBean), alignof(SymbolLeverageBracketBean), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SymbolLeverageBracketBean::PlacementNew_,
                                 sizeof(SymbolLeverageBracketBean),
                                 alignof(SymbolLeverageBracketBean));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SymbolLeverageBracketBean::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SymbolLeverageBracketBean_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SymbolLeverageBracketBean::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SymbolLeverageBracketBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SymbolLeverageBracketBean::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SymbolLeverageBracketBean>(), &SymbolLeverageBracketBean::ByteSizeLong,
            &SymbolLeverageBracketBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SymbolLeverageBracketBean, _impl_._cached_size_),
        false,
    },
    &SymbolLeverageBracketBean::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SymbolLeverageBracketBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SymbolLeverageBracketBean::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::SymbolLeverageBracketBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .lampyris.crypto.protocol.trading.LeverageBracketBean beanList = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SymbolLeverageBracketBean, _impl_.beanlist_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .lampyris.crypto.protocol.trading.LeverageBracketBean beanList = 1;
    {PROTOBUF_FIELD_OFFSET(SymbolLeverageBracketBean, _impl_.beanlist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::LeverageBracketBean>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SymbolLeverageBracketBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.SymbolLeverageBracketBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.beanlist_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SymbolLeverageBracketBean::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SymbolLeverageBracketBean& this_ = static_cast<const SymbolLeverageBracketBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SymbolLeverageBracketBean::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SymbolLeverageBracketBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.SymbolLeverageBracketBean)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .lampyris.crypto.protocol.trading.LeverageBracketBean beanList = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_beanlist_size());
               i < n; i++) {
            const auto& repfield = this_._internal_beanlist().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.SymbolLeverageBracketBean)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SymbolLeverageBracketBean::ByteSizeLong(const MessageLite& base) {
          const SymbolLeverageBracketBean& this_ = static_cast<const SymbolLeverageBracketBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SymbolLeverageBracketBean::ByteSizeLong() const {
          const SymbolLeverageBracketBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.SymbolLeverageBracketBean)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .lampyris.crypto.protocol.trading.LeverageBracketBean beanList = 1;
            {
              total_size += 1UL * this_._internal_beanlist_size();
              for (const auto& msg : this_._internal_beanlist()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SymbolLeverageBracketBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SymbolLeverageBracketBean*>(&to_msg);
  auto& from = static_cast<const SymbolLeverageBracketBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.SymbolLeverageBracketBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beanlist()->MergeFrom(
      from._internal_beanlist());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolLeverageBracketBean::CopyFrom(const SymbolLeverageBracketBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.SymbolLeverageBracketBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SymbolLeverageBracketBean::InternalSwap(SymbolLeverageBracketBean* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.beanlist_.InternalSwap(&other->_impl_.beanlist_);
}

::google::protobuf::Metadata SymbolLeverageBracketBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LeverageBracketBean::_Internal {
 public:
};

LeverageBracketBean::LeverageBracketBean(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:lampyris.crypto.protocol.trading.LeverageBracketBean)
}
LeverageBracketBean::LeverageBracketBean(
    ::google::protobuf::Arena* arena, const LeverageBracketBean& from)
    : LeverageBracketBean(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE LeverageBracketBean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LeverageBracketBean::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, leverage_),
           0,
           offsetof(Impl_, notionalfloor_) -
               offsetof(Impl_, leverage_) +
               sizeof(Impl_::notionalfloor_));
}
LeverageBracketBean::~LeverageBracketBean() {
  // @@protoc_insertion_point(destructor:lampyris.crypto.protocol.trading.LeverageBracketBean)
  SharedDtor(*this);
}
inline void LeverageBracketBean::SharedDtor(MessageLite& self) {
  LeverageBracketBean& this_ = static_cast<LeverageBracketBean&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* LeverageBracketBean::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LeverageBracketBean(arena);
}
constexpr auto LeverageBracketBean::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LeverageBracketBean),
                                            alignof(LeverageBracketBean));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LeverageBracketBean::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LeverageBracketBean_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LeverageBracketBean::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LeverageBracketBean>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LeverageBracketBean::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LeverageBracketBean>(), &LeverageBracketBean::ByteSizeLong,
            &LeverageBracketBean::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LeverageBracketBean, _impl_._cached_size_),
        false,
    },
    &LeverageBracketBean::kDescriptorMethods,
    &descriptor_table_trading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LeverageBracketBean::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> LeverageBracketBean::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::lampyris::crypto::protocol::trading::LeverageBracketBean>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 leverage = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LeverageBracketBean, _impl_.leverage_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LeverageBracketBean, _impl_.leverage_)}},
    // int32 notionalCap = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LeverageBracketBean, _impl_.notionalcap_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LeverageBracketBean, _impl_.notionalcap_)}},
    // int32 notionalFloor = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LeverageBracketBean, _impl_.notionalfloor_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(LeverageBracketBean, _impl_.notionalfloor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 leverage = 1;
    {PROTOBUF_FIELD_OFFSET(LeverageBracketBean, _impl_.leverage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 notionalCap = 2;
    {PROTOBUF_FIELD_OFFSET(LeverageBracketBean, _impl_.notionalcap_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 notionalFloor = 3;
    {PROTOBUF_FIELD_OFFSET(LeverageBracketBean, _impl_.notionalfloor_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void LeverageBracketBean::Clear() {
// @@protoc_insertion_point(message_clear_start:lampyris.crypto.protocol.trading.LeverageBracketBean)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.leverage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.notionalfloor_) -
      reinterpret_cast<char*>(&_impl_.leverage_)) + sizeof(_impl_.notionalfloor_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LeverageBracketBean::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LeverageBracketBean& this_ = static_cast<const LeverageBracketBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LeverageBracketBean::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LeverageBracketBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:lampyris.crypto.protocol.trading.LeverageBracketBean)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 leverage = 1;
          if (this_._internal_leverage() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_leverage(), target);
          }

          // int32 notionalCap = 2;
          if (this_._internal_notionalcap() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_notionalcap(), target);
          }

          // int32 notionalFloor = 3;
          if (this_._internal_notionalfloor() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_notionalfloor(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:lampyris.crypto.protocol.trading.LeverageBracketBean)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LeverageBracketBean::ByteSizeLong(const MessageLite& base) {
          const LeverageBracketBean& this_ = static_cast<const LeverageBracketBean&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LeverageBracketBean::ByteSizeLong() const {
          const LeverageBracketBean& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:lampyris.crypto.protocol.trading.LeverageBracketBean)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 leverage = 1;
            if (this_._internal_leverage() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_leverage());
            }
            // int32 notionalCap = 2;
            if (this_._internal_notionalcap() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_notionalcap());
            }
            // int32 notionalFloor = 3;
            if (this_._internal_notionalfloor() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_notionalfloor());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LeverageBracketBean::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LeverageBracketBean*>(&to_msg);
  auto& from = static_cast<const LeverageBracketBean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lampyris.crypto.protocol.trading.LeverageBracketBean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leverage() != 0) {
    _this->_impl_.leverage_ = from._impl_.leverage_;
  }
  if (from._internal_notionalcap() != 0) {
    _this->_impl_.notionalcap_ = from._impl_.notionalcap_;
  }
  if (from._internal_notionalfloor() != 0) {
    _this->_impl_.notionalfloor_ = from._impl_.notionalfloor_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LeverageBracketBean::CopyFrom(const LeverageBracketBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lampyris.crypto.protocol.trading.LeverageBracketBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LeverageBracketBean::InternalSwap(LeverageBracketBean* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeverageBracketBean, _impl_.notionalfloor_)
      + sizeof(LeverageBracketBean::_impl_.notionalfloor_)
      - PROTOBUF_FIELD_OFFSET(LeverageBracketBean, _impl_.leverage_)>(
          reinterpret_cast<char*>(&_impl_.leverage_),
          reinterpret_cast<char*>(&other->_impl_.leverage_));
}

::google::protobuf::Metadata LeverageBracketBean::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace trading
}  // namespace protocol
}  // namespace crypto
}  // namespace lampyris
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_trading_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
